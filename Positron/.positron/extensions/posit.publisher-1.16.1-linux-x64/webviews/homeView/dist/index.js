var Fc=Object.defineProperty;var Lc=(t,e,n)=>e in t?Fc(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n;var Nn=(t,e,n)=>Lc(t,typeof e!="symbol"?e+"":e,n);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const o of r.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function n(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function i(s){if(s.ep)return;s.ep=!0;const r=n(s);fetch(s.href,r)}})();/**
* @vue/shared v3.5.14
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function $r(t){const e=Object.create(null);for(const n of t.split(","))e[n]=1;return n=>n in e}const ue={},Sn=[],yt=()=>{},Bc=()=>!1,Ki=t=>t.charCodeAt(0)===111&&t.charCodeAt(1)===110&&(t.charCodeAt(2)>122||t.charCodeAt(2)<97),Ir=t=>t.startsWith("onUpdate:"),ze=Object.assign,Or=(t,e)=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)},Vc=Object.prototype.hasOwnProperty,fe=(t,e)=>Vc.call(t,e),q=Array.isArray,xn=t=>es(t)==="[object Map]",Nl=t=>es(t)==="[object Set]",Q=t=>typeof t=="function",Pe=t=>typeof t=="string",jt=t=>typeof t=="symbol",Ee=t=>t!==null&&typeof t=="object",Fl=t=>(Ee(t)||Q(t))&&Q(t.then)&&Q(t.catch),Ll=Object.prototype.toString,es=t=>Ll.call(t),Hc=t=>es(t).slice(8,-1),Bl=t=>es(t)==="[object Object]",Rr=t=>Pe(t)&&t!=="NaN"&&t[0]!=="-"&&""+parseInt(t,10)===t,Wn=$r(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),ts=t=>{const e=Object.create(null);return n=>e[n]||(e[n]=t(n))},jc=/-(\w)/g,ut=ts(t=>t.replace(jc,(e,n)=>n?n.toUpperCase():"")),Uc=/\B([A-Z])/g,Ut=ts(t=>t.replace(Uc,"-$1").toLowerCase()),ns=ts(t=>t.charAt(0).toUpperCase()+t.slice(1)),Ii=ts(t=>t?`on${ns(t)}`:""),nt=(t,e)=>!Object.is(t,e),Oi=(t,...e)=>{for(let n=0;n<t.length;n++)t[n](...e)},Vl=(t,e,n,i=!1)=>{Object.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:i,value:n})},rr=t=>{const e=parseFloat(t);return isNaN(e)?t:e};let ko;const is=()=>ko||(ko=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function ss(t){if(q(t)){const e={};for(let n=0;n<t.length;n++){const i=t[n],s=Pe(i)?Yc(i):ss(i);if(s)for(const r in s)e[r]=s[r]}return e}else if(Pe(t)||Ee(t))return t}const zc=/;(?![^(]*\))/g,qc=/:([^]+)/,Wc=/\/\*[^]*?\*\//g;function Yc(t){const e={};return t.replace(Wc,"").split(zc).forEach(n=>{if(n){const i=n.split(qc);i.length>1&&(e[i[0].trim()]=i[1].trim())}}),e}function De(t){let e="";if(Pe(t))e=t;else if(q(t))for(let n=0;n<t.length;n++){const i=De(t[n]);i&&(e+=i+" ")}else if(Ee(t))for(const n in t)t[n]&&(e+=n+" ");return e.trim()}const Gc="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Jc=$r(Gc);function Hl(t){return!!t||t===""}const jl=t=>!!(t&&t.__v_isRef===!0),xe=t=>Pe(t)?t:t==null?"":q(t)||Ee(t)&&(t.toString===Ll||!Q(t.toString))?jl(t)?xe(t.value):JSON.stringify(t,Ul,2):String(t),Ul=(t,e)=>jl(e)?Ul(t,e.value):xn(e)?{[`Map(${e.size})`]:[...e.entries()].reduce((n,[i,s],r)=>(n[As(i,r)+" =>"]=s,n),{})}:Nl(e)?{[`Set(${e.size})`]:[...e.values()].map(n=>As(n))}:jt(e)?As(e):Ee(e)&&!q(e)&&!Bl(e)?String(e):e,As=(t,e="")=>{var n;return jt(t)?`Symbol(${(n=t.description)!=null?n:e})`:t};/**
* @vue/reactivity v3.5.14
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let qe;class zl{constructor(e=!1){this.detached=e,this._active=!0,this._on=0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=qe,!e&&qe&&(this.index=(qe.scopes||(qe.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){this._isPaused=!0;let e,n;if(this.scopes)for(e=0,n=this.scopes.length;e<n;e++)this.scopes[e].pause();for(e=0,n=this.effects.length;e<n;e++)this.effects[e].pause()}}resume(){if(this._active&&this._isPaused){this._isPaused=!1;let e,n;if(this.scopes)for(e=0,n=this.scopes.length;e<n;e++)this.scopes[e].resume();for(e=0,n=this.effects.length;e<n;e++)this.effects[e].resume()}}run(e){if(this._active){const n=qe;try{return qe=this,e()}finally{qe=n}}}on(){++this._on===1&&(this.prevScope=qe,qe=this)}off(){this._on>0&&--this._on===0&&(qe=this.prevScope,this.prevScope=void 0)}stop(e){if(this._active){this._active=!1;let n,i;for(n=0,i=this.effects.length;n<i;n++)this.effects[n].stop();for(this.effects.length=0,n=0,i=this.cleanups.length;n<i;n++)this.cleanups[n]();if(this.cleanups.length=0,this.scopes){for(n=0,i=this.scopes.length;n<i;n++)this.scopes[n].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!e){const s=this.parent.scopes.pop();s&&s!==this&&(this.parent.scopes[this.index]=s,s.index=this.index)}this.parent=void 0}}}function ql(t){return new zl(t)}function Wl(){return qe}function Qc(t,e=!1){qe&&qe.cleanups.push(t)}let Se;const Ps=new WeakSet;class Yl{constructor(e){this.fn=e,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,qe&&qe.active&&qe.effects.push(this)}pause(){this.flags|=64}resume(){this.flags&64&&(this.flags&=-65,Ps.has(this)&&(Ps.delete(this),this.trigger()))}notify(){this.flags&2&&!(this.flags&32)||this.flags&8||Jl(this)}run(){if(!(this.flags&1))return this.fn();this.flags|=2,Eo(this),Ql(this);const e=Se,n=St;Se=this,St=!0;try{return this.fn()}finally{Xl(this),Se=e,St=n,this.flags&=-3}}stop(){if(this.flags&1){for(let e=this.deps;e;e=e.nextDep)Tr(e);this.deps=this.depsTail=void 0,Eo(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){this.flags&64?Ps.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){or(this)&&this.run()}get dirty(){return or(this)}}let Gl=0,Yn,Gn;function Jl(t,e=!1){if(t.flags|=8,e){t.next=Gn,Gn=t;return}t.next=Yn,Yn=t}function Ar(){Gl++}function Pr(){if(--Gl>0)return;if(Gn){let e=Gn;for(Gn=void 0;e;){const n=e.next;e.next=void 0,e.flags&=-9,e=n}}let t;for(;Yn;){let e=Yn;for(Yn=void 0;e;){const n=e.next;if(e.next=void 0,e.flags&=-9,e.flags&1)try{e.trigger()}catch(i){t||(t=i)}e=n}}if(t)throw t}function Ql(t){for(let e=t.deps;e;e=e.nextDep)e.version=-1,e.prevActiveLink=e.dep.activeLink,e.dep.activeLink=e}function Xl(t){let e,n=t.depsTail,i=n;for(;i;){const s=i.prevDep;i.version===-1?(i===n&&(n=s),Tr(i),Xc(i)):e=i,i.dep.activeLink=i.prevActiveLink,i.prevActiveLink=void 0,i=s}t.deps=e,t.depsTail=n}function or(t){for(let e=t.deps;e;e=e.nextDep)if(e.dep.version!==e.version||e.dep.computed&&(Zl(e.dep.computed)||e.dep.version!==e.version))return!0;return!!t._dirty}function Zl(t){if(t.flags&4&&!(t.flags&16)||(t.flags&=-17,t.globalVersion===si)||(t.globalVersion=si,!t.isSSR&&t.flags&128&&(!t.deps&&!t._dirty||!or(t))))return;t.flags|=2;const e=t.dep,n=Se,i=St;Se=t,St=!0;try{Ql(t);const s=t.fn(t._value);(e.version===0||nt(s,t._value))&&(t.flags|=128,t._value=s,e.version++)}catch(s){throw e.version++,s}finally{Se=n,St=i,Xl(t),t.flags&=-3}}function Tr(t,e=!1){const{dep:n,prevSub:i,nextSub:s}=t;if(i&&(i.nextSub=s,t.prevSub=void 0),s&&(s.prevSub=i,t.nextSub=void 0),n.subs===t&&(n.subs=i,!i&&n.computed)){n.computed.flags&=-5;for(let r=n.computed.deps;r;r=r.nextDep)Tr(r,!0)}!e&&!--n.sc&&n.map&&n.map.delete(n.key)}function Xc(t){const{prevDep:e,nextDep:n}=t;e&&(e.nextDep=n,t.prevDep=void 0),n&&(n.prevDep=e,t.nextDep=void 0)}let St=!0;const Kl=[];function Bt(){Kl.push(St),St=!1}function Vt(){const t=Kl.pop();St=t===void 0?!0:t}function Eo(t){const{cleanup:e}=t;if(t.cleanup=void 0,e){const n=Se;Se=void 0;try{e()}finally{Se=n}}}let si=0;class Zc{constructor(e,n){this.sub=e,this.dep=n,this.version=n.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class rs{constructor(e){this.computed=e,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0}track(e){if(!Se||!St||Se===this.computed)return;let n=this.activeLink;if(n===void 0||n.sub!==Se)n=this.activeLink=new Zc(Se,this),Se.deps?(n.prevDep=Se.depsTail,Se.depsTail.nextDep=n,Se.depsTail=n):Se.deps=Se.depsTail=n,ea(n);else if(n.version===-1&&(n.version=this.version,n.nextDep)){const i=n.nextDep;i.prevDep=n.prevDep,n.prevDep&&(n.prevDep.nextDep=i),n.prevDep=Se.depsTail,n.nextDep=void 0,Se.depsTail.nextDep=n,Se.depsTail=n,Se.deps===n&&(Se.deps=i)}return n}trigger(e){this.version++,si++,this.notify(e)}notify(e){Ar();try{for(let n=this.subs;n;n=n.prevSub)n.sub.notify()&&n.sub.dep.notify()}finally{Pr()}}}function ea(t){if(t.dep.sc++,t.sub.flags&4){const e=t.dep.computed;if(e&&!t.dep.subs){e.flags|=20;for(let i=e.deps;i;i=i.nextDep)ea(i)}const n=t.dep.subs;n!==t&&(t.prevSub=n,n&&(n.nextSub=t)),t.dep.subs=t}}const Bi=new WeakMap,un=Symbol(""),lr=Symbol(""),ri=Symbol("");function We(t,e,n){if(St&&Se){let i=Bi.get(t);i||Bi.set(t,i=new Map);let s=i.get(n);s||(i.set(n,s=new rs),s.map=i,s.key=n),s.track()}}function Dt(t,e,n,i,s,r){const o=Bi.get(t);if(!o){si++;return}const l=a=>{a&&a.trigger()};if(Ar(),e==="clear")o.forEach(l);else{const a=q(t),u=a&&Rr(n);if(a&&n==="length"){const c=Number(i);o.forEach((h,p)=>{(p==="length"||p===ri||!jt(p)&&p>=c)&&l(h)})}else switch((n!==void 0||o.has(void 0))&&l(o.get(n)),u&&l(o.get(ri)),e){case"add":a?u&&l(o.get("length")):(l(o.get(un)),xn(t)&&l(o.get(lr)));break;case"delete":a||(l(o.get(un)),xn(t)&&l(o.get(lr)));break;case"set":xn(t)&&l(o.get(un));break}}Pr()}function Kc(t,e){const n=Bi.get(t);return n&&n.get(e)}function pn(t){const e=oe(t);return e===t?e:(We(e,"iterate",ri),pt(t)?e:e.map(je))}function os(t){return We(t=oe(t),"iterate",ri),t}const eu={__proto__:null,[Symbol.iterator](){return Ts(this,Symbol.iterator,je)},concat(...t){return pn(this).concat(...t.map(e=>q(e)?pn(e):e))},entries(){return Ts(this,"entries",t=>(t[1]=je(t[1]),t))},every(t,e){return At(this,"every",t,e,void 0,arguments)},filter(t,e){return At(this,"filter",t,e,n=>n.map(je),arguments)},find(t,e){return At(this,"find",t,e,je,arguments)},findIndex(t,e){return At(this,"findIndex",t,e,void 0,arguments)},findLast(t,e){return At(this,"findLast",t,e,je,arguments)},findLastIndex(t,e){return At(this,"findLastIndex",t,e,void 0,arguments)},forEach(t,e){return At(this,"forEach",t,e,void 0,arguments)},includes(...t){return Ds(this,"includes",t)},indexOf(...t){return Ds(this,"indexOf",t)},join(t){return pn(this).join(t)},lastIndexOf(...t){return Ds(this,"lastIndexOf",t)},map(t,e){return At(this,"map",t,e,void 0,arguments)},pop(){return Fn(this,"pop")},push(...t){return Fn(this,"push",t)},reduce(t,...e){return $o(this,"reduce",t,e)},reduceRight(t,...e){return $o(this,"reduceRight",t,e)},shift(){return Fn(this,"shift")},some(t,e){return At(this,"some",t,e,void 0,arguments)},splice(...t){return Fn(this,"splice",t)},toReversed(){return pn(this).toReversed()},toSorted(t){return pn(this).toSorted(t)},toSpliced(...t){return pn(this).toSpliced(...t)},unshift(...t){return Fn(this,"unshift",t)},values(){return Ts(this,"values",je)}};function Ts(t,e,n){const i=os(t),s=i[e]();return i!==t&&!pt(t)&&(s._next=s.next,s.next=()=>{const r=s._next();return r.value&&(r.value=n(r.value)),r}),s}const tu=Array.prototype;function At(t,e,n,i,s,r){const o=os(t),l=o!==t&&!pt(t),a=o[e];if(a!==tu[e]){const h=a.apply(t,r);return l?je(h):h}let u=n;o!==t&&(l?u=function(h,p){return n.call(this,je(h),p,t)}:n.length>2&&(u=function(h,p){return n.call(this,h,p,t)}));const c=a.call(o,u,i);return l&&s?s(c):c}function $o(t,e,n,i){const s=os(t);let r=n;return s!==t&&(pt(t)?n.length>3&&(r=function(o,l,a){return n.call(this,o,l,a,t)}):r=function(o,l,a){return n.call(this,o,je(l),a,t)}),s[e](r,...i)}function Ds(t,e,n){const i=oe(t);We(i,"iterate",ri);const s=i[e](...n);return(s===-1||s===!1)&&Nr(n[0])?(n[0]=oe(n[0]),i[e](...n)):s}function Fn(t,e,n=[]){Bt(),Ar();const i=oe(t)[e].apply(t,n);return Pr(),Vt(),i}const nu=$r("__proto__,__v_isRef,__isVue"),ta=new Set(Object.getOwnPropertyNames(Symbol).filter(t=>t!=="arguments"&&t!=="caller").map(t=>Symbol[t]).filter(jt));function iu(t){jt(t)||(t=String(t));const e=oe(this);return We(e,"has",t),e.hasOwnProperty(t)}class na{constructor(e=!1,n=!1){this._isReadonly=e,this._isShallow=n}get(e,n,i){if(n==="__v_skip")return e.__v_skip;const s=this._isReadonly,r=this._isShallow;if(n==="__v_isReactive")return!s;if(n==="__v_isReadonly")return s;if(n==="__v_isShallow")return r;if(n==="__v_raw")return i===(s?r?hu:oa:r?ra:sa).get(e)||Object.getPrototypeOf(e)===Object.getPrototypeOf(i)?e:void 0;const o=q(e);if(!s){let a;if(o&&(a=eu[n]))return a;if(n==="hasOwnProperty")return iu}const l=Reflect.get(e,n,Ae(e)?e:i);return(jt(n)?ta.has(n):nu(n))||(s||We(e,"get",n),r)?l:Ae(l)?o&&Rr(n)?l:l.value:Ee(l)?s?aa(l):ls(l):l}}class ia extends na{constructor(e=!1){super(!1,e)}set(e,n,i,s){let r=e[n];if(!this._isShallow){const a=en(r);if(!pt(i)&&!en(i)&&(r=oe(r),i=oe(i)),!q(e)&&Ae(r)&&!Ae(i))return a?!1:(r.value=i,!0)}const o=q(e)&&Rr(n)?Number(n)<e.length:fe(e,n),l=Reflect.set(e,n,i,Ae(e)?e:s);return e===oe(s)&&(o?nt(i,r)&&Dt(e,"set",n,i):Dt(e,"add",n,i)),l}deleteProperty(e,n){const i=fe(e,n);e[n];const s=Reflect.deleteProperty(e,n);return s&&i&&Dt(e,"delete",n,void 0),s}has(e,n){const i=Reflect.has(e,n);return(!jt(n)||!ta.has(n))&&We(e,"has",n),i}ownKeys(e){return We(e,"iterate",q(e)?"length":un),Reflect.ownKeys(e)}}class su extends na{constructor(e=!1){super(!0,e)}set(e,n){return!0}deleteProperty(e,n){return!0}}const ru=new ia,ou=new su,lu=new ia(!0);const ar=t=>t,Si=t=>Reflect.getPrototypeOf(t);function au(t,e,n){return function(...i){const s=this.__v_raw,r=oe(s),o=xn(r),l=t==="entries"||t===Symbol.iterator&&o,a=t==="keys"&&o,u=s[t](...i),c=n?ar:e?Vi:je;return!e&&We(r,"iterate",a?lr:un),{next(){const{value:h,done:p}=u.next();return p?{value:h,done:p}:{value:l?[c(h[0]),c(h[1])]:c(h),done:p}},[Symbol.iterator](){return this}}}}function xi(t){return function(...e){return t==="delete"?!1:t==="clear"?void 0:this}}function cu(t,e){const n={get(s){const r=this.__v_raw,o=oe(r),l=oe(s);t||(nt(s,l)&&We(o,"get",s),We(o,"get",l));const{has:a}=Si(o),u=e?ar:t?Vi:je;if(a.call(o,s))return u(r.get(s));if(a.call(o,l))return u(r.get(l));r!==o&&r.get(s)},get size(){const s=this.__v_raw;return!t&&We(oe(s),"iterate",un),Reflect.get(s,"size",s)},has(s){const r=this.__v_raw,o=oe(r),l=oe(s);return t||(nt(s,l)&&We(o,"has",s),We(o,"has",l)),s===l?r.has(s):r.has(s)||r.has(l)},forEach(s,r){const o=this,l=o.__v_raw,a=oe(l),u=e?ar:t?Vi:je;return!t&&We(a,"iterate",un),l.forEach((c,h)=>s.call(r,u(c),u(h),o))}};return ze(n,t?{add:xi("add"),set:xi("set"),delete:xi("delete"),clear:xi("clear")}:{add(s){!e&&!pt(s)&&!en(s)&&(s=oe(s));const r=oe(this);return Si(r).has.call(r,s)||(r.add(s),Dt(r,"add",s,s)),this},set(s,r){!e&&!pt(r)&&!en(r)&&(r=oe(r));const o=oe(this),{has:l,get:a}=Si(o);let u=l.call(o,s);u||(s=oe(s),u=l.call(o,s));const c=a.call(o,s);return o.set(s,r),u?nt(r,c)&&Dt(o,"set",s,r):Dt(o,"add",s,r),this},delete(s){const r=oe(this),{has:o,get:l}=Si(r);let a=o.call(r,s);a||(s=oe(s),a=o.call(r,s)),l&&l.call(r,s);const u=r.delete(s);return a&&Dt(r,"delete",s,void 0),u},clear(){const s=oe(this),r=s.size!==0,o=s.clear();return r&&Dt(s,"clear",void 0,void 0),o}}),["keys","values","entries",Symbol.iterator].forEach(s=>{n[s]=au(s,t,e)}),n}function Dr(t,e){const n=cu(t,e);return(i,s,r)=>s==="__v_isReactive"?!t:s==="__v_isReadonly"?t:s==="__v_raw"?i:Reflect.get(fe(n,s)&&s in i?n:i,s,r)}const uu={get:Dr(!1,!1)},du={get:Dr(!1,!0)},fu={get:Dr(!0,!1)};const sa=new WeakMap,ra=new WeakMap,oa=new WeakMap,hu=new WeakMap;function pu(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function gu(t){return t.__v_skip||!Object.isExtensible(t)?0:pu(Hc(t))}function ls(t){return en(t)?t:Mr(t,!1,ru,uu,sa)}function la(t){return Mr(t,!1,lu,du,ra)}function aa(t){return Mr(t,!0,ou,fu,oa)}function Mr(t,e,n,i,s){if(!Ee(t)||t.__v_raw&&!(e&&t.__v_isReactive))return t;const r=gu(t);if(r===0)return t;const o=s.get(t);if(o)return o;const l=new Proxy(t,r===2?i:n);return s.set(t,l),l}function Kt(t){return en(t)?Kt(t.__v_raw):!!(t&&t.__v_isReactive)}function en(t){return!!(t&&t.__v_isReadonly)}function pt(t){return!!(t&&t.__v_isShallow)}function Nr(t){return t?!!t.__v_raw:!1}function oe(t){const e=t&&t.__v_raw;return e?oe(e):t}function as(t){return!fe(t,"__v_skip")&&Object.isExtensible(t)&&Vl(t,"__v_skip",!0),t}const je=t=>Ee(t)?ls(t):t,Vi=t=>Ee(t)?aa(t):t;function Ae(t){return t?t.__v_isRef===!0:!1}function re(t){return vu(t,!1)}function vu(t,e){return Ae(t)?t:new mu(t,e)}class mu{constructor(e,n){this.dep=new rs,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=n?e:oe(e),this._value=n?e:je(e),this.__v_isShallow=n}get value(){return this.dep.track(),this._value}set value(e){const n=this._rawValue,i=this.__v_isShallow||pt(e)||en(e);e=i?e:oe(e),nt(e,n)&&(this._rawValue=e,this._value=i?e:je(e),this.dep.trigger())}}function L(t){return Ae(t)?t.value:t}const bu={get:(t,e,n)=>e==="__v_raw"?t:L(Reflect.get(t,e,n)),set:(t,e,n,i)=>{const s=t[e];return Ae(s)&&!Ae(n)?(s.value=n,!0):Reflect.set(t,e,n,i)}};function ca(t){return Kt(t)?t:new Proxy(t,bu)}class yu{constructor(e){this.__v_isRef=!0,this._value=void 0;const n=this.dep=new rs,{get:i,set:s}=e(n.track.bind(n),n.trigger.bind(n));this._get=i,this._set=s}get value(){return this._value=this._get()}set value(e){this._set(e)}}function Su(t){return new yu(t)}function xu(t){const e=q(t)?new Array(t.length):{};for(const n in t)e[n]=_u(t,n);return e}class wu{constructor(e,n,i){this._object=e,this._key=n,this._defaultValue=i,this.__v_isRef=!0,this._value=void 0}get value(){const e=this._object[this._key];return this._value=e===void 0?this._defaultValue:e}set value(e){this._object[this._key]=e}get dep(){return Kc(oe(this._object),this._key)}}function _u(t,e,n){const i=t[e];return Ae(i)?i:new wu(t,e,n)}class Cu{constructor(e,n,i){this.fn=e,this.setter=n,this._value=void 0,this.dep=new rs(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=si-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!n,this.isSSR=i}notify(){if(this.flags|=16,!(this.flags&8)&&Se!==this)return Jl(this,!0),!0}get value(){const e=this.dep.track();return Zl(this),e&&(e.version=this.dep.version),this._value}set value(e){this.setter&&this.setter(e)}}function ku(t,e,n=!1){let i,s;return Q(t)?i=t:(i=t.get,s=t.set),new Cu(i,s,n)}const wi={},Hi=new WeakMap;let cn;function Eu(t,e=!1,n=cn){if(n){let i=Hi.get(n);i||Hi.set(n,i=[]),i.push(t)}}function $u(t,e,n=ue){const{immediate:i,deep:s,once:r,scheduler:o,augmentJob:l,call:a}=n,u=C=>s?C:pt(C)||s===!1||s===0?Mt(C,1):Mt(C);let c,h,p,v,$=!1,k=!1;if(Ae(t)?(h=()=>t.value,$=pt(t)):Kt(t)?(h=()=>u(t),$=!0):q(t)?(k=!0,$=t.some(C=>Kt(C)||pt(C)),h=()=>t.map(C=>{if(Ae(C))return C.value;if(Kt(C))return u(C);if(Q(C))return a?a(C,2):C()})):Q(t)?e?h=a?()=>a(t,2):t:h=()=>{if(p){Bt();try{p()}finally{Vt()}}const C=cn;cn=c;try{return a?a(t,3,[v]):t(v)}finally{cn=C}}:h=yt,e&&s){const C=h,J=s===!0?1/0:s;h=()=>Mt(C(),J)}const E=Wl(),N=()=>{c.stop(),E&&E.active&&Or(E.effects,c)};if(r&&e){const C=e;e=(...J)=>{C(...J),N()}}let U=k?new Array(t.length).fill(wi):wi;const W=C=>{if(!(!(c.flags&1)||!c.dirty&&!C))if(e){const J=c.run();if(s||$||(k?J.some((Te,ce)=>nt(Te,U[ce])):nt(J,U))){p&&p();const Te=cn;cn=c;try{const ce=[J,U===wi?void 0:k&&U[0]===wi?[]:U,v];a?a(e,3,ce):e(...ce),U=J}finally{cn=Te}}}else c.run()};return l&&l(W),c=new Yl(h),c.scheduler=o?()=>o(W,!1):W,v=C=>Eu(C,!1,c),p=c.onStop=()=>{const C=Hi.get(c);if(C){if(a)a(C,4);else for(const J of C)J();Hi.delete(c)}},e?i?W(!0):U=c.run():o?o(W.bind(null,!0),!0):c.run(),N.pause=c.pause.bind(c),N.resume=c.resume.bind(c),N.stop=N,N}function Mt(t,e=1/0,n){if(e<=0||!Ee(t)||t.__v_skip||(n=n||new Set,n.has(t)))return t;if(n.add(t),e--,Ae(t))Mt(t.value,e,n);else if(q(t))for(let i=0;i<t.length;i++)Mt(t[i],e,n);else if(Nl(t)||xn(t))t.forEach(i=>{Mt(i,e,n)});else if(Bl(t)){for(const i in t)Mt(t[i],e,n);for(const i of Object.getOwnPropertySymbols(t))Object.prototype.propertyIsEnumerable.call(t,i)&&Mt(t[i],e,n)}return t}/**
* @vue/runtime-core v3.5.14
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function gi(t,e,n,i){try{return i?t(...i):t()}catch(s){cs(s,e,n)}}function Ot(t,e,n,i){if(Q(t)){const s=gi(t,e,n,i);return s&&Fl(s)&&s.catch(r=>{cs(r,e,n)}),s}if(q(t)){const s=[];for(let r=0;r<t.length;r++)s.push(Ot(t[r],e,n,i));return s}}function cs(t,e,n,i=!0){const s=e?e.vnode:null,{errorHandler:r,throwUnhandledErrorInProduction:o}=e&&e.appContext.config||ue;if(e){let l=e.parent;const a=e.proxy,u=`https://vuejs.org/error-reference/#runtime-${n}`;for(;l;){const c=l.ec;if(c){for(let h=0;h<c.length;h++)if(c[h](t,a,u)===!1)return}l=l.parent}if(r){Bt(),gi(r,null,10,[t,a,u]),Vt();return}}Iu(t,n,s,i,o)}function Iu(t,e,n,i=!0,s=!1){if(s)throw t;console.error(t)}const Ze=[];let $t=-1;const wn=[];let Xt=null,vn=0;const ua=Promise.resolve();let ji=null;function vi(t){const e=ji||ua;return t?e.then(this?t.bind(this):t):e}function Ou(t){let e=$t+1,n=Ze.length;for(;e<n;){const i=e+n>>>1,s=Ze[i],r=oi(s);r<t||r===t&&s.flags&2?e=i+1:n=i}return e}function Fr(t){if(!(t.flags&1)){const e=oi(t),n=Ze[Ze.length-1];!n||!(t.flags&2)&&e>=oi(n)?Ze.push(t):Ze.splice(Ou(e),0,t),t.flags|=1,da()}}function da(){ji||(ji=ua.then(pa))}function fa(t){q(t)?wn.push(...t):Xt&&t.id===-1?Xt.splice(vn+1,0,t):t.flags&1||(wn.push(t),t.flags|=1),da()}function Io(t,e,n=$t+1){for(;n<Ze.length;n++){const i=Ze[n];if(i&&i.flags&2){if(t&&i.id!==t.uid)continue;Ze.splice(n,1),n--,i.flags&4&&(i.flags&=-2),i(),i.flags&4||(i.flags&=-2)}}}function ha(t){if(wn.length){const e=[...new Set(wn)].sort((n,i)=>oi(n)-oi(i));if(wn.length=0,Xt){Xt.push(...e);return}for(Xt=e,vn=0;vn<Xt.length;vn++){const n=Xt[vn];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}Xt=null,vn=0}}const oi=t=>t.id==null?t.flags&2?-1:1/0:t.id;function pa(t){try{for($t=0;$t<Ze.length;$t++){const e=Ze[$t];e&&!(e.flags&8)&&(e.flags&4&&(e.flags&=-2),gi(e,e.i,e.i?15:14),e.flags&4||(e.flags&=-2))}}finally{for(;$t<Ze.length;$t++){const e=Ze[$t];e&&(e.flags&=-2)}$t=-1,Ze.length=0,ha(),ji=null,(Ze.length||wn.length)&&pa()}}let Fe=null,us=null;function Ui(t){const e=Fe;return Fe=t,us=t&&t.type.__scopeId||null,e}function Ru(t){us=t}function Au(){us=null}const Pu=t=>Me;function Me(t,e=Fe,n){if(!e||t._n)return t;const i=(...s)=>{i._d&&Lo(-1);const r=Ui(e);let o;try{o=t(...s)}finally{Ui(r),i._d&&Lo(1)}return o};return i._n=!0,i._c=!0,i._d=!0,i}function mi(t,e){if(Fe===null)return t;const n=vs(Fe),i=t.dirs||(t.dirs=[]);for(let s=0;s<e.length;s++){let[r,o,l,a=ue]=e[s];r&&(Q(r)&&(r={mounted:r,updated:r}),r.deep&&Mt(o),i.push({dir:r,instance:n,value:o,oldValue:void 0,arg:l,modifiers:a}))}return t}function on(t,e,n,i){const s=t.dirs,r=e&&e.dirs;for(let o=0;o<s.length;o++){const l=s[o];r&&(l.oldValue=r[o].value);let a=l.dir[i];a&&(Bt(),Ot(a,n,8,[t.el,l,t,e]),Vt())}}const Tu=Symbol("_vte"),Du=t=>t.__isTeleport;function Lr(t,e){t.shapeFlag&6&&t.component?(t.transition=e,Lr(t.component.subTree,e)):t.shapeFlag&128?(t.ssContent.transition=e.clone(t.ssContent),t.ssFallback.transition=e.clone(t.ssFallback)):t.transition=e}/*! #__NO_SIDE_EFFECTS__ */function Ne(t,e){return Q(t)?ze({name:t.name},e,{setup:t}):t}function ga(t){t.ids=[t.ids[0]+t.ids[2]+++"-",0,0]}function zi(t,e,n,i,s=!1){if(q(t)){t.forEach(($,k)=>zi($,e&&(q(e)?e[k]:e),n,i,s));return}if(_n(i)&&!s){i.shapeFlag&512&&i.type.__asyncResolved&&i.component.subTree.component&&zi(t,e,n,i.component.subTree);return}const r=i.shapeFlag&4?vs(i.component):i.el,o=s?null:r,{i:l,r:a}=t,u=e&&e.r,c=l.refs===ue?l.refs={}:l.refs,h=l.setupState,p=oe(h),v=h===ue?()=>!1:$=>fe(p,$);if(u!=null&&u!==a&&(Pe(u)?(c[u]=null,v(u)&&(h[u]=null)):Ae(u)&&(u.value=null)),Q(a))gi(a,l,12,[o,c]);else{const $=Pe(a),k=Ae(a);if($||k){const E=()=>{if(t.f){const N=$?v(a)?h[a]:c[a]:a.value;s?q(N)&&Or(N,r):q(N)?N.includes(r)||N.push(r):$?(c[a]=[r],v(a)&&(h[a]=c[a])):(a.value=[r],t.k&&(c[t.k]=a.value))}else $?(c[a]=o,v(a)&&(h[a]=o)):k&&(a.value=o,t.k&&(c[t.k]=o))};o?(E.id=-1,ot(E,n)):E()}}}is().requestIdleCallback;is().cancelIdleCallback;const _n=t=>!!t.type.__asyncLoader,va=t=>t.type.__isKeepAlive;function Mu(t,e){ma(t,"a",e)}function Nu(t,e){ma(t,"da",e)}function ma(t,e,n=Ve){const i=t.__wdc||(t.__wdc=()=>{let s=n;for(;s;){if(s.isDeactivated)return;s=s.parent}return t()});if(ds(e,i,n),n){let s=n.parent;for(;s&&s.parent;)va(s.parent.vnode)&&Fu(i,e,n,s),s=s.parent}}function Fu(t,e,n,i){const s=ds(e,t,i,!0);fs(()=>{Or(i[e],s)},n)}function ds(t,e,n=Ve,i=!1){if(n){const s=n[t]||(n[t]=[]),r=e.__weh||(e.__weh=(...o)=>{Bt();const l=bi(n),a=Ot(e,n,t,o);return l(),Vt(),a});return i?s.unshift(r):s.push(r),r}}const zt=t=>(e,n=Ve)=>{(!ci||t==="sp")&&ds(t,(...i)=>e(...i),n)},Lu=zt("bm"),Br=zt("m"),ba=zt("bu"),Bu=zt("u"),Vu=zt("bum"),fs=zt("um"),Hu=zt("sp"),ju=zt("rtg"),Uu=zt("rtc");function zu(t,e=Ve){ds("ec",t,e)}const Vr="components",qu="directives";function Hr(t,e){return jr(Vr,t,!0,e)||t}const ya=Symbol.for("v-ndc");function Oo(t){return Pe(t)?jr(Vr,t,!1)||t:t||ya}function Wu(t){return jr(qu,t)}function jr(t,e,n=!0,i=!1){const s=Fe||Ve;if(s){const r=s.type;if(t===Vr){const l=Td(r,!1);if(l&&(l===e||l===ut(e)||l===ns(ut(e))))return r}const o=Ro(s[t]||r[t],e)||Ro(s.appContext[t],e);return!o&&i?r:o}}function Ro(t,e){return t&&(t[e]||t[ut(e)]||t[ns(ut(e))])}function qt(t,e,n,i){let s;const r=n,o=q(t);if(o||Pe(t)){const l=o&&Kt(t);let a=!1,u=!1;l&&(a=!pt(t),u=en(t),t=os(t)),s=new Array(t.length);for(let c=0,h=t.length;c<h;c++)s[c]=e(a?u?Vi(je(t[c])):je(t[c]):t[c],c,void 0,r)}else if(typeof t=="number"){s=new Array(t);for(let l=0;l<t;l++)s[l]=e(l+1,l,void 0,r)}else if(Ee(t))if(t[Symbol.iterator])s=Array.from(t,(l,a)=>e(l,a,void 0,r));else{const l=Object.keys(t);s=new Array(l.length);for(let a=0,u=l.length;a<u;a++){const c=l[a];s[a]=e(t[c],c,a,r)}}else s=[];return s}function lt(t,e,n={},i,s){if(Fe.ce||Fe.parent&&_n(Fe.parent)&&Fe.parent.ce)return e!=="default"&&(n.name=e),m(),we(le,null,[se("slot",n,i)],64);let r=t[e];r&&r._c&&(r._d=!1),m();const o=r&&Sa(r(n)),l=n.key||o&&o.key,a=we(le,{key:(l&&!jt(l)?l:`_${e}`)+""},o||[],o&&t._===1?64:-2);return!s&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),r&&r._c&&(r._d=!0),a}function Sa(t){return t.some(e=>Wr(e)?!(e.type===Ht||e.type===le&&!Sa(e.children)):!0)?t:null}function li(t,e){const n={};for(const i in t)n[e&&/[A-Z]/.test(i)?`on:${i}`:Ii(i)]=t[i];return n}const cr=t=>t?Ha(t)?vs(t):cr(t.parent):null,Jn=ze(Object.create(null),{$:t=>t,$el:t=>t.vnode.el,$data:t=>t.data,$props:t=>t.props,$attrs:t=>t.attrs,$slots:t=>t.slots,$refs:t=>t.refs,$parent:t=>cr(t.parent),$root:t=>cr(t.root),$host:t=>t.ce,$emit:t=>t.emit,$options:t=>_a(t),$forceUpdate:t=>t.f||(t.f=()=>{Fr(t.update)}),$nextTick:t=>t.n||(t.n=vi.bind(t.proxy)),$watch:t=>md.bind(t)}),Ms=(t,e)=>t!==ue&&!t.__isScriptSetup&&fe(t,e),Yu={get({_:t},e){if(e==="__v_skip")return!0;const{ctx:n,setupState:i,data:s,props:r,accessCache:o,type:l,appContext:a}=t;let u;if(e[0]!=="$"){const v=o[e];if(v!==void 0)switch(v){case 1:return i[e];case 2:return s[e];case 4:return n[e];case 3:return r[e]}else{if(Ms(i,e))return o[e]=1,i[e];if(s!==ue&&fe(s,e))return o[e]=2,s[e];if((u=t.propsOptions[0])&&fe(u,e))return o[e]=3,r[e];if(n!==ue&&fe(n,e))return o[e]=4,n[e];ur&&(o[e]=0)}}const c=Jn[e];let h,p;if(c)return e==="$attrs"&&We(t.attrs,"get",""),c(t);if((h=l.__cssModules)&&(h=h[e]))return h;if(n!==ue&&fe(n,e))return o[e]=4,n[e];if(p=a.config.globalProperties,fe(p,e))return p[e]},set({_:t},e,n){const{data:i,setupState:s,ctx:r}=t;return Ms(s,e)?(s[e]=n,!0):i!==ue&&fe(i,e)?(i[e]=n,!0):fe(t.props,e)||e[0]==="$"&&e.slice(1)in t?!1:(r[e]=n,!0)},has({_:{data:t,setupState:e,accessCache:n,ctx:i,appContext:s,propsOptions:r}},o){let l;return!!n[o]||t!==ue&&fe(t,o)||Ms(e,o)||(l=r[0])&&fe(l,o)||fe(i,o)||fe(Jn,o)||fe(s.config.globalProperties,o)},defineProperty(t,e,n){return n.get!=null?t._.accessCache[e]=0:fe(n,"value")&&this.set(t,e,n.value,null),Reflect.defineProperty(t,e,n)}};function xa(){return Gu().slots}function Gu(){const t=Gr();return t.setupContext||(t.setupContext=Ua(t))}function qi(t){return q(t)?t.reduce((e,n)=>(e[n]=null,e),{}):t}function fn(t,e){return!t||!e?t||e:q(t)&&q(e)?t.concat(e):ze({},qi(t),qi(e))}let ur=!0;function Ju(t){const e=_a(t),n=t.proxy,i=t.ctx;ur=!1,e.beforeCreate&&Ao(e.beforeCreate,t,"bc");const{data:s,computed:r,methods:o,watch:l,provide:a,inject:u,created:c,beforeMount:h,mounted:p,beforeUpdate:v,updated:$,activated:k,deactivated:E,beforeDestroy:N,beforeUnmount:U,destroyed:W,unmounted:C,render:J,renderTracked:Te,renderTriggered:ce,errorCaptured:z,serverPrefetch:X,expose:B,inheritAttrs:pe,components:ne,directives:ge,filters:Je}=e;if(u&&Qu(u,i,null),o)for(const S in o){const b=o[S];Q(b)&&(i[S]=b.bind(n))}if(s){const S=s.call(n,n);Ee(S)&&(t.data=ls(S))}if(ur=!0,r)for(const S in r){const b=r[S],Ie=Q(b)?b.bind(n,n):Q(b.get)?b.get.bind(n,n):yt,Qe=!Q(b)&&Q(b.set)?b.set.bind(n):yt,Le=I({get:Ie,set:Qe});Object.defineProperty(i,S,{enumerable:!0,configurable:!0,get:()=>Le.value,set:Oe=>Le.value=Oe})}if(l)for(const S in l)wa(l[S],i,n,S);if(a){const S=Q(a)?a.call(n):a;Reflect.ownKeys(S).forEach(b=>{nd(b,S[b])})}c&&Ao(c,t,"c");function Z(S,b){q(b)?b.forEach(Ie=>S(Ie.bind(n))):b&&S(b.bind(n))}if(Z(Lu,h),Z(Br,p),Z(ba,v),Z(Bu,$),Z(Mu,k),Z(Nu,E),Z(zu,z),Z(Uu,Te),Z(ju,ce),Z(Vu,U),Z(fs,C),Z(Hu,X),q(B))if(B.length){const S=t.exposed||(t.exposed={});B.forEach(b=>{Object.defineProperty(S,b,{get:()=>n[b],set:Ie=>n[b]=Ie})})}else t.exposed||(t.exposed={});J&&t.render===yt&&(t.render=J),pe!=null&&(t.inheritAttrs=pe),ne&&(t.components=ne),ge&&(t.directives=ge),X&&ga(t)}function Qu(t,e,n=yt){q(t)&&(t=dr(t));for(const i in t){const s=t[i];let r;Ee(s)?"default"in s?r=Qn(s.from||i,s.default,!0):r=Qn(s.from||i):r=Qn(s),Ae(r)?Object.defineProperty(e,i,{enumerable:!0,configurable:!0,get:()=>r.value,set:o=>r.value=o}):e[i]=r}}function Ao(t,e,n){Ot(q(t)?t.map(i=>i.bind(e.proxy)):t.bind(e.proxy),e,n)}function wa(t,e,n,i){let s=i.includes(".")?Ma(n,i):()=>n[i];if(Pe(t)){const r=e[t];Q(r)&&Nt(s,r)}else if(Q(t))Nt(s,t.bind(n));else if(Ee(t))if(q(t))t.forEach(r=>wa(r,e,n,i));else{const r=Q(t.handler)?t.handler.bind(n):e[t.handler];Q(r)&&Nt(s,r,t)}}function _a(t){const e=t.type,{mixins:n,extends:i}=e,{mixins:s,optionsCache:r,config:{optionMergeStrategies:o}}=t.appContext,l=r.get(e);let a;return l?a=l:!s.length&&!n&&!i?a=e:(a={},s.length&&s.forEach(u=>Wi(a,u,o,!0)),Wi(a,e,o)),Ee(e)&&r.set(e,a),a}function Wi(t,e,n,i=!1){const{mixins:s,extends:r}=e;r&&Wi(t,r,n,!0),s&&s.forEach(o=>Wi(t,o,n,!0));for(const o in e)if(!(i&&o==="expose")){const l=Xu[o]||n&&n[o];t[o]=l?l(t[o],e[o]):e[o]}return t}const Xu={data:Po,props:To,emits:To,methods:qn,computed:qn,beforeCreate:Xe,created:Xe,beforeMount:Xe,mounted:Xe,beforeUpdate:Xe,updated:Xe,beforeDestroy:Xe,beforeUnmount:Xe,destroyed:Xe,unmounted:Xe,activated:Xe,deactivated:Xe,errorCaptured:Xe,serverPrefetch:Xe,components:qn,directives:qn,watch:Ku,provide:Po,inject:Zu};function Po(t,e){return e?t?function(){return ze(Q(t)?t.call(this,this):t,Q(e)?e.call(this,this):e)}:e:t}function Zu(t,e){return qn(dr(t),dr(e))}function dr(t){if(q(t)){const e={};for(let n=0;n<t.length;n++)e[t[n]]=t[n];return e}return t}function Xe(t,e){return t?[...new Set([].concat(t,e))]:e}function qn(t,e){return t?ze(Object.create(null),t,e):e}function To(t,e){return t?q(t)&&q(e)?[...new Set([...t,...e])]:ze(Object.create(null),qi(t),qi(e??{})):e}function Ku(t,e){if(!t)return e;if(!e)return t;const n=ze(Object.create(null),t);for(const i in e)n[i]=Xe(t[i],e[i]);return n}function Ca(){return{app:null,config:{isNativeTag:Bc,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let ed=0;function td(t,e){return function(i,s=null){Q(i)||(i=ze({},i)),s!=null&&!Ee(s)&&(s=null);const r=Ca(),o=new WeakSet,l=[];let a=!1;const u=r.app={_uid:ed++,_component:i,_props:s,_container:null,_context:r,_instance:null,version:Md,get config(){return r.config},set config(c){},use(c,...h){return o.has(c)||(c&&Q(c.install)?(o.add(c),c.install(u,...h)):Q(c)&&(o.add(c),c(u,...h))),u},mixin(c){return r.mixins.includes(c)||r.mixins.push(c),u},component(c,h){return h?(r.components[c]=h,u):r.components[c]},directive(c,h){return h?(r.directives[c]=h,u):r.directives[c]},mount(c,h,p){if(!a){const v=u._ceVNode||se(i,s);return v.appContext=r,p===!0?p="svg":p===!1&&(p=void 0),t(v,c,p),a=!0,u._container=c,c.__vue_app__=u,vs(v.component)}},onUnmount(c){l.push(c)},unmount(){a&&(Ot(l,u._instance,16),t(null,u._container),delete u._container.__vue_app__)},provide(c,h){return r.provides[c]=h,u},runWithContext(c){const h=dn;dn=u;try{return c()}finally{dn=h}}};return u}}let dn=null;function nd(t,e){if(Ve){let n=Ve.provides;const i=Ve.parent&&Ve.parent.provides;i===n&&(n=Ve.provides=Object.create(i)),n[t]=e}}function Qn(t,e,n=!1){const i=Ve||Fe;if(i||dn){const s=dn?dn._context.provides:i?i.parent==null?i.vnode.appContext&&i.vnode.appContext.provides:i.parent.provides:void 0;if(s&&t in s)return s[t];if(arguments.length>1)return n&&Q(e)?e.call(i&&i.proxy):e}}function id(){return!!(Ve||Fe||dn)}const ka={},Ea=()=>Object.create(ka),$a=t=>Object.getPrototypeOf(t)===ka;function sd(t,e,n,i=!1){const s={},r=Ea();t.propsDefaults=Object.create(null),Ia(t,e,s,r);for(const o in t.propsOptions[0])o in s||(s[o]=void 0);n?t.props=i?s:la(s):t.type.props?t.props=s:t.props=r,t.attrs=r}function rd(t,e,n,i){const{props:s,attrs:r,vnode:{patchFlag:o}}=t,l=oe(s),[a]=t.propsOptions;let u=!1;if((i||o>0)&&!(o&16)){if(o&8){const c=t.vnode.dynamicProps;for(let h=0;h<c.length;h++){let p=c[h];if(ps(t.emitsOptions,p))continue;const v=e[p];if(a)if(fe(r,p))v!==r[p]&&(r[p]=v,u=!0);else{const $=ut(p);s[$]=fr(a,l,$,v,t,!1)}else v!==r[p]&&(r[p]=v,u=!0)}}}else{Ia(t,e,s,r)&&(u=!0);let c;for(const h in l)(!e||!fe(e,h)&&((c=Ut(h))===h||!fe(e,c)))&&(a?n&&(n[h]!==void 0||n[c]!==void 0)&&(s[h]=fr(a,l,h,void 0,t,!0)):delete s[h]);if(r!==l)for(const h in r)(!e||!fe(e,h))&&(delete r[h],u=!0)}u&&Dt(t.attrs,"set","")}function Ia(t,e,n,i){const[s,r]=t.propsOptions;let o=!1,l;if(e)for(let a in e){if(Wn(a))continue;const u=e[a];let c;s&&fe(s,c=ut(a))?!r||!r.includes(c)?n[c]=u:(l||(l={}))[c]=u:ps(t.emitsOptions,a)||(!(a in i)||u!==i[a])&&(i[a]=u,o=!0)}if(r){const a=oe(n),u=l||ue;for(let c=0;c<r.length;c++){const h=r[c];n[h]=fr(s,a,h,u[h],t,!fe(u,h))}}return o}function fr(t,e,n,i,s,r){const o=t[n];if(o!=null){const l=fe(o,"default");if(l&&i===void 0){const a=o.default;if(o.type!==Function&&!o.skipFactory&&Q(a)){const{propsDefaults:u}=s;if(n in u)i=u[n];else{const c=bi(s);i=u[n]=a.call(null,e),c()}}else i=a;s.ce&&s.ce._setProp(n,i)}o[0]&&(r&&!l?i=!1:o[1]&&(i===""||i===Ut(n))&&(i=!0))}return i}const od=new WeakMap;function Oa(t,e,n=!1){const i=n?od:e.propsCache,s=i.get(t);if(s)return s;const r=t.props,o={},l=[];let a=!1;if(!Q(t)){const c=h=>{a=!0;const[p,v]=Oa(h,e,!0);ze(o,p),v&&l.push(...v)};!n&&e.mixins.length&&e.mixins.forEach(c),t.extends&&c(t.extends),t.mixins&&t.mixins.forEach(c)}if(!r&&!a)return Ee(t)&&i.set(t,Sn),Sn;if(q(r))for(let c=0;c<r.length;c++){const h=ut(r[c]);Do(h)&&(o[h]=ue)}else if(r)for(const c in r){const h=ut(c);if(Do(h)){const p=r[c],v=o[h]=q(p)||Q(p)?{type:p}:ze({},p),$=v.type;let k=!1,E=!0;if(q($))for(let N=0;N<$.length;++N){const U=$[N],W=Q(U)&&U.name;if(W==="Boolean"){k=!0;break}else W==="String"&&(E=!1)}else k=Q($)&&$.name==="Boolean";v[0]=k,v[1]=E,(k||fe(v,"default"))&&l.push(h)}}const u=[o,l];return Ee(t)&&i.set(t,u),u}function Do(t){return t[0]!=="$"&&!Wn(t)}const Ur=t=>t[0]==="_"||t==="$stable",zr=t=>q(t)?t.map(It):[It(t)],ld=(t,e,n)=>{if(e._n)return e;const i=Me((...s)=>zr(e(...s)),n);return i._c=!1,i},Ra=(t,e,n)=>{const i=t._ctx;for(const s in t){if(Ur(s))continue;const r=t[s];if(Q(r))e[s]=ld(s,r,i);else if(r!=null){const o=zr(r);e[s]=()=>o}}},Aa=(t,e)=>{const n=zr(e);t.slots.default=()=>n},Pa=(t,e,n)=>{for(const i in e)(n||!Ur(i))&&(t[i]=e[i])},ad=(t,e,n)=>{const i=t.slots=Ea();if(t.vnode.shapeFlag&32){const s=e._;s?(Pa(i,e,n),n&&Vl(i,"_",s,!0)):Ra(e,i)}else e&&Aa(t,e)},cd=(t,e,n)=>{const{vnode:i,slots:s}=t;let r=!0,o=ue;if(i.shapeFlag&32){const l=e._;l?n&&l===1?r=!1:Pa(s,e,n):(r=!e.$stable,Ra(e,s)),o=e}else e&&(Aa(t,e),o={default:1});if(r)for(const l in s)!Ur(l)&&o[l]==null&&delete s[l]},ot=_d;function ud(t){return dd(t)}function dd(t,e){const n=is();n.__VUE__=!0;const{insert:i,remove:s,patchProp:r,createElement:o,createText:l,createComment:a,setText:u,setElementText:c,parentNode:h,nextSibling:p,setScopeId:v=yt,insertStaticContent:$}=t,k=(d,f,g,w=null,y=null,x=null,T=void 0,A=null,O=!!f.dynamicChildren)=>{if(d===f)return;d&&!Ln(d,f)&&(w=ee(d),Oe(d,y,x,!0),d=null),f.patchFlag===-2&&(O=!1,f.dynamicChildren=null);const{type:_,ref:H,shapeFlag:D}=f;switch(_){case gs:E(d,f,g,w);break;case Ht:N(d,f,g,w);break;case Ri:d==null&&U(f,g,w,T);break;case le:ne(d,f,g,w,y,x,T,A,O);break;default:D&1?J(d,f,g,w,y,x,T,A,O):D&6?ge(d,f,g,w,y,x,T,A,O):(D&64||D&128)&&_.process(d,f,g,w,y,x,T,A,O,Gt)}H!=null&&y&&zi(H,d&&d.ref,x,f||d,!f)},E=(d,f,g,w)=>{if(d==null)i(f.el=l(f.children),g,w);else{const y=f.el=d.el;f.children!==d.children&&u(y,f.children)}},N=(d,f,g,w)=>{d==null?i(f.el=a(f.children||""),g,w):f.el=d.el},U=(d,f,g,w)=>{[d.el,d.anchor]=$(d.children,f,g,w,d.el,d.anchor)},W=({el:d,anchor:f},g,w)=>{let y;for(;d&&d!==f;)y=p(d),i(d,g,w),d=y;i(f,g,w)},C=({el:d,anchor:f})=>{let g;for(;d&&d!==f;)g=p(d),s(d),d=g;s(f)},J=(d,f,g,w,y,x,T,A,O)=>{f.type==="svg"?T="svg":f.type==="math"&&(T="mathml"),d==null?Te(f,g,w,y,x,T,A,O):X(d,f,y,x,T,A,O)},Te=(d,f,g,w,y,x,T,A)=>{let O,_;const{props:H,shapeFlag:D,transition:V,dirs:Y}=d;if(O=d.el=o(d.type,x,H&&H.is,H),D&8?c(O,d.children):D&16&&z(d.children,O,null,w,y,Ns(d,x),T,A),Y&&on(d,null,w,"created"),ce(O,d,d.scopeId,T,w),H){for(const be in H)be!=="value"&&!Wn(be)&&r(O,be,null,H[be],x,w);"value"in H&&r(O,"value",null,H.value,x),(_=H.onVnodeBeforeMount)&&Et(_,w,d)}Y&&on(d,null,w,"beforeMount");const te=fd(y,V);te&&V.beforeEnter(O),i(O,f,g),((_=H&&H.onVnodeMounted)||te||Y)&&ot(()=>{_&&Et(_,w,d),te&&V.enter(O),Y&&on(d,null,w,"mounted")},y)},ce=(d,f,g,w,y)=>{if(g&&v(d,g),w)for(let x=0;x<w.length;x++)v(d,w[x]);if(y){let x=y.subTree;if(f===x||La(x.type)&&(x.ssContent===f||x.ssFallback===f)){const T=y.vnode;ce(d,T,T.scopeId,T.slotScopeIds,y.parent)}}},z=(d,f,g,w,y,x,T,A,O=0)=>{for(let _=O;_<d.length;_++){const H=d[_]=A?Zt(d[_]):It(d[_]);k(null,H,f,g,w,y,x,T,A)}},X=(d,f,g,w,y,x,T)=>{const A=f.el=d.el;let{patchFlag:O,dynamicChildren:_,dirs:H}=f;O|=d.patchFlag&16;const D=d.props||ue,V=f.props||ue;let Y;if(g&&ln(g,!1),(Y=V.onVnodeBeforeUpdate)&&Et(Y,g,f,d),H&&on(f,d,g,"beforeUpdate"),g&&ln(g,!0),(D.innerHTML&&V.innerHTML==null||D.textContent&&V.textContent==null)&&c(A,""),_?B(d.dynamicChildren,_,A,g,w,Ns(f,y),x):T||b(d,f,A,null,g,w,Ns(f,y),x,!1),O>0){if(O&16)pe(A,D,V,g,y);else if(O&2&&D.class!==V.class&&r(A,"class",null,V.class,y),O&4&&r(A,"style",D.style,V.style,y),O&8){const te=f.dynamicProps;for(let be=0;be<te.length;be++){const ve=te[be],st=D[ve],tt=V[ve];(tt!==st||ve==="value")&&r(A,ve,st,tt,y,g)}}O&1&&d.children!==f.children&&c(A,f.children)}else!T&&_==null&&pe(A,D,V,g,y);((Y=V.onVnodeUpdated)||H)&&ot(()=>{Y&&Et(Y,g,f,d),H&&on(f,d,g,"updated")},w)},B=(d,f,g,w,y,x,T)=>{for(let A=0;A<f.length;A++){const O=d[A],_=f[A],H=O.el&&(O.type===le||!Ln(O,_)||O.shapeFlag&70)?h(O.el):g;k(O,_,H,null,w,y,x,T,!0)}},pe=(d,f,g,w,y)=>{if(f!==g){if(f!==ue)for(const x in f)!Wn(x)&&!(x in g)&&r(d,x,f[x],null,y,w);for(const x in g){if(Wn(x))continue;const T=g[x],A=f[x];T!==A&&x!=="value"&&r(d,x,A,T,y,w)}"value"in g&&r(d,"value",f.value,g.value,y)}},ne=(d,f,g,w,y,x,T,A,O)=>{const _=f.el=d?d.el:l(""),H=f.anchor=d?d.anchor:l("");let{patchFlag:D,dynamicChildren:V,slotScopeIds:Y}=f;Y&&(A=A?A.concat(Y):Y),d==null?(i(_,g,w),i(H,g,w),z(f.children||[],g,H,y,x,T,A,O)):D>0&&D&64&&V&&d.dynamicChildren?(B(d.dynamicChildren,V,g,y,x,T,A),(f.key!=null||y&&f===y.subTree)&&Ta(d,f,!0)):b(d,f,g,H,y,x,T,A,O)},ge=(d,f,g,w,y,x,T,A,O)=>{f.slotScopeIds=A,d==null?f.shapeFlag&512?y.ctx.activate(f,g,w,T,O):Je(f,g,w,y,x,T,O):dt(d,f,O)},Je=(d,f,g,w,y,x,T)=>{const A=d.component=Od(d,w,y);if(va(d)&&(A.ctx.renderer=Gt),Rd(A,!1,T),A.asyncDep){if(y&&y.registerDep(A,Z,T),!d.el){const O=A.subTree=se(Ht);N(null,O,f,g)}}else Z(A,d,f,g,y,x,T)},dt=(d,f,g)=>{const w=f.component=d.component;if(xd(d,f,g))if(w.asyncDep&&!w.asyncResolved){S(w,f,g);return}else w.next=f,w.update();else f.el=d.el,w.vnode=f},Z=(d,f,g,w,y,x,T)=>{const A=()=>{if(d.isMounted){let{next:D,bu:V,u:Y,parent:te,vnode:be}=d;{const Ct=Da(d);if(Ct){D&&(D.el=be.el,S(d,D,T)),Ct.asyncDep.then(()=>{d.isUnmounted||A()});return}}let ve=D,st;ln(d,!1),D?(D.el=be.el,S(d,D,T)):D=be,V&&Oi(V),(st=D.props&&D.props.onVnodeBeforeUpdate)&&Et(st,te,D,be),ln(d,!0);const tt=No(d),_t=d.subTree;d.subTree=tt,k(_t,tt,h(_t.el),ee(_t),d,y,x),D.el=tt.el,ve===null&&wd(d,tt.el),Y&&ot(Y,y),(st=D.props&&D.props.onVnodeUpdated)&&ot(()=>Et(st,te,D,be),y)}else{let D;const{el:V,props:Y}=f,{bm:te,m:be,parent:ve,root:st,type:tt}=d,_t=_n(f);ln(d,!1),te&&Oi(te),!_t&&(D=Y&&Y.onVnodeBeforeMount)&&Et(D,ve,f),ln(d,!0);{st.ce&&st.ce._injectChildStyle(tt);const Ct=d.subTree=No(d);k(null,Ct,g,w,d,y,x),f.el=Ct.el}if(be&&ot(be,y),!_t&&(D=Y&&Y.onVnodeMounted)){const Ct=f;ot(()=>Et(D,ve,Ct),y)}(f.shapeFlag&256||ve&&_n(ve.vnode)&&ve.vnode.shapeFlag&256)&&d.a&&ot(d.a,y),d.isMounted=!0,f=g=w=null}};d.scope.on();const O=d.effect=new Yl(A);d.scope.off();const _=d.update=O.run.bind(O),H=d.job=O.runIfDirty.bind(O);H.i=d,H.id=d.uid,O.scheduler=()=>Fr(H),ln(d,!0),_()},S=(d,f,g)=>{f.component=d;const w=d.vnode.props;d.vnode=f,d.next=null,rd(d,f.props,w,g),cd(d,f.children,g),Bt(),Io(d),Vt()},b=(d,f,g,w,y,x,T,A,O=!1)=>{const _=d&&d.children,H=d?d.shapeFlag:0,D=f.children,{patchFlag:V,shapeFlag:Y}=f;if(V>0){if(V&128){Qe(_,D,g,w,y,x,T,A,O);return}else if(V&256){Ie(_,D,g,w,y,x,T,A,O);return}}Y&8?(H&16&&ie(_,y,x),D!==_&&c(g,D)):H&16?Y&16?Qe(_,D,g,w,y,x,T,A,O):ie(_,y,x,!0):(H&8&&c(g,""),Y&16&&z(D,g,w,y,x,T,A,O))},Ie=(d,f,g,w,y,x,T,A,O)=>{d=d||Sn,f=f||Sn;const _=d.length,H=f.length,D=Math.min(_,H);let V;for(V=0;V<D;V++){const Y=f[V]=O?Zt(f[V]):It(f[V]);k(d[V],Y,g,null,y,x,T,A,O)}_>H?ie(d,y,x,!0,!1,D):z(f,g,w,y,x,T,A,O,D)},Qe=(d,f,g,w,y,x,T,A,O)=>{let _=0;const H=f.length;let D=d.length-1,V=H-1;for(;_<=D&&_<=V;){const Y=d[_],te=f[_]=O?Zt(f[_]):It(f[_]);if(Ln(Y,te))k(Y,te,g,null,y,x,T,A,O);else break;_++}for(;_<=D&&_<=V;){const Y=d[D],te=f[V]=O?Zt(f[V]):It(f[V]);if(Ln(Y,te))k(Y,te,g,null,y,x,T,A,O);else break;D--,V--}if(_>D){if(_<=V){const Y=V+1,te=Y<H?f[Y].el:w;for(;_<=V;)k(null,f[_]=O?Zt(f[_]):It(f[_]),g,te,y,x,T,A,O),_++}}else if(_>V)for(;_<=D;)Oe(d[_],y,x,!0),_++;else{const Y=_,te=_,be=new Map;for(_=te;_<=V;_++){const rt=f[_]=O?Zt(f[_]):It(f[_]);rt.key!=null&&be.set(rt.key,_)}let ve,st=0;const tt=V-te+1;let _t=!1,Ct=0;const Mn=new Array(tt);for(_=0;_<tt;_++)Mn[_]=0;for(_=Y;_<=D;_++){const rt=d[_];if(st>=tt){Oe(rt,y,x,!0);continue}let kt;if(rt.key!=null)kt=be.get(rt.key);else for(ve=te;ve<=V;ve++)if(Mn[ve-te]===0&&Ln(rt,f[ve])){kt=ve;break}kt===void 0?Oe(rt,y,x,!0):(Mn[kt-te]=_+1,kt>=Ct?Ct=kt:_t=!0,k(rt,f[kt],g,null,y,x,T,A,O),st++)}const _o=_t?hd(Mn):Sn;for(ve=_o.length-1,_=tt-1;_>=0;_--){const rt=te+_,kt=f[rt],Co=rt+1<H?f[rt+1].el:w;Mn[_]===0?k(null,kt,g,Co,y,x,T,A,O):_t&&(ve<0||_!==_o[ve]?Le(kt,g,Co,2):ve--)}}},Le=(d,f,g,w,y=null)=>{const{el:x,type:T,transition:A,children:O,shapeFlag:_}=d;if(_&6){Le(d.component.subTree,f,g,w);return}if(_&128){d.suspense.move(f,g,w);return}if(_&64){T.move(d,f,g,Gt);return}if(T===le){i(x,f,g);for(let D=0;D<O.length;D++)Le(O[D],f,g,w);i(d.anchor,f,g);return}if(T===Ri){W(d,f,g);return}if(w!==2&&_&1&&A)if(w===0)A.beforeEnter(x),i(x,f,g),ot(()=>A.enter(x),y);else{const{leave:D,delayLeave:V,afterLeave:Y}=A,te=()=>{d.ctx.isUnmounted?s(x):i(x,f,g)},be=()=>{D(x,()=>{te(),Y&&Y()})};V?V(x,te,be):be()}else i(x,f,g)},Oe=(d,f,g,w=!1,y=!1)=>{const{type:x,props:T,ref:A,children:O,dynamicChildren:_,shapeFlag:H,patchFlag:D,dirs:V,cacheIndex:Y}=d;if(D===-2&&(y=!1),A!=null&&(Bt(),zi(A,null,g,d,!0),Vt()),Y!=null&&(f.renderCache[Y]=void 0),H&256){f.ctx.deactivate(d);return}const te=H&1&&V,be=!_n(d);let ve;if(be&&(ve=T&&T.onVnodeBeforeUnmount)&&Et(ve,f,d),H&6)G(d.component,g,w);else{if(H&128){d.suspense.unmount(g,w);return}te&&on(d,null,f,"beforeUnmount"),H&64?d.type.remove(d,f,g,Gt,w):_&&!_.hasOnce&&(x!==le||D>0&&D&64)?ie(_,f,g,!1,!0):(x===le&&D&384||!y&&H&16)&&ie(O,f,g),w&&yi(d)}(be&&(ve=T&&T.onVnodeUnmounted)||te)&&ot(()=>{ve&&Et(ve,f,d),te&&on(d,null,f,"unmounted")},g)},yi=d=>{const{type:f,el:g,anchor:w,transition:y}=d;if(f===le){ft(g,w);return}if(f===Ri){C(d);return}const x=()=>{s(g),y&&!y.persisted&&y.afterLeave&&y.afterLeave()};if(d.shapeFlag&1&&y&&!y.persisted){const{leave:T,delayLeave:A}=y,O=()=>T(g,x);A?A(d.el,x,O):O()}else x()},ft=(d,f)=>{let g;for(;d!==f;)g=p(d),s(d),d=g;s(f)},G=(d,f,g)=>{const{bum:w,scope:y,job:x,subTree:T,um:A,m:O,a:_,parent:H,slots:{__:D}}=d;Mo(O),Mo(_),w&&Oi(w),H&&q(D)&&D.forEach(V=>{H.renderCache[V]=void 0}),y.stop(),x&&(x.flags|=8,Oe(T,d,f,g)),A&&ot(A,f),ot(()=>{d.isUnmounted=!0},f),f&&f.pendingBranch&&!f.isUnmounted&&d.asyncDep&&!d.asyncResolved&&d.suspenseId===f.pendingId&&(f.deps--,f.deps===0&&f.resolve())},ie=(d,f,g,w=!1,y=!1,x=0)=>{for(let T=x;T<d.length;T++)Oe(d[T],f,g,w,y)},ee=d=>{if(d.shapeFlag&6)return ee(d.component.subTree);if(d.shapeFlag&128)return d.suspense.next();const f=p(d.anchor||d.el),g=f&&f[Tu];return g?p(g):f};let Ce=!1;const Yt=(d,f,g)=>{d==null?f._vnode&&Oe(f._vnode,null,null,!0):k(f._vnode||null,d,f,null,null,null,g),f._vnode=d,Ce||(Ce=!0,Io(),ha(),Ce=!1)},Gt={p:k,um:Oe,m:Le,r:yi,mt:Je,mc:z,pc:b,pbc:B,n:ee,o:t};return{render:Yt,hydrate:void 0,createApp:td(Yt)}}function Ns({type:t,props:e},n){return n==="svg"&&t==="foreignObject"||n==="mathml"&&t==="annotation-xml"&&e&&e.encoding&&e.encoding.includes("html")?void 0:n}function ln({effect:t,job:e},n){n?(t.flags|=32,e.flags|=4):(t.flags&=-33,e.flags&=-5)}function fd(t,e){return(!t||t&&!t.pendingBranch)&&e&&!e.persisted}function Ta(t,e,n=!1){const i=t.children,s=e.children;if(q(i)&&q(s))for(let r=0;r<i.length;r++){const o=i[r];let l=s[r];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=s[r]=Zt(s[r]),l.el=o.el),!n&&l.patchFlag!==-2&&Ta(o,l)),l.type===gs&&(l.el=o.el),l.type===Ht&&!l.el&&(l.el=o.el)}}function hd(t){const e=t.slice(),n=[0];let i,s,r,o,l;const a=t.length;for(i=0;i<a;i++){const u=t[i];if(u!==0){if(s=n[n.length-1],t[s]<u){e[i]=s,n.push(i);continue}for(r=0,o=n.length-1;r<o;)l=r+o>>1,t[n[l]]<u?r=l+1:o=l;u<t[n[r]]&&(r>0&&(e[i]=n[r-1]),n[r]=i)}}for(r=n.length,o=n[r-1];r-- >0;)n[r]=o,o=e[o];return n}function Da(t){const e=t.subTree.component;if(e)return e.asyncDep&&!e.asyncResolved?e:Da(e)}function Mo(t){if(t)for(let e=0;e<t.length;e++)t[e].flags|=8}const pd=Symbol.for("v-scx"),gd=()=>Qn(pd);function vd(t,e){return qr(t,null,{flush:"sync"})}function Nt(t,e,n){return qr(t,e,n)}function qr(t,e,n=ue){const{immediate:i,deep:s,flush:r,once:o}=n,l=ze({},n),a=e&&i||!e&&r!=="post";let u;if(ci){if(r==="sync"){const v=gd();u=v.__watcherHandles||(v.__watcherHandles=[])}else if(!a){const v=()=>{};return v.stop=yt,v.resume=yt,v.pause=yt,v}}const c=Ve;l.call=(v,$,k)=>Ot(v,c,$,k);let h=!1;r==="post"?l.scheduler=v=>{ot(v,c&&c.suspense)}:r!=="sync"&&(h=!0,l.scheduler=(v,$)=>{$?v():Fr(v)}),l.augmentJob=v=>{e&&(v.flags|=4),h&&(v.flags|=2,c&&(v.id=c.uid,v.i=c))};const p=$u(t,e,l);return ci&&(u?u.push(p):a&&p()),p}function md(t,e,n){const i=this.proxy,s=Pe(t)?t.includes(".")?Ma(i,t):()=>i[t]:t.bind(i,i);let r;Q(e)?r=e:(r=e.handler,n=e);const o=bi(this),l=qr(s,r.bind(i),n);return o(),l}function Ma(t,e){const n=e.split(".");return()=>{let i=t;for(let s=0;s<n.length&&i;s++)i=i[n[s]];return i}}function hs(t,e,n=ue){const i=Gr(),s=ut(e),r=Ut(e),o=Na(t,s),l=Su((a,u)=>{let c,h=ue,p;return vd(()=>{const v=t[s];nt(c,v)&&(c=v,u())}),{get(){return a(),n.get?n.get(c):c},set(v){const $=n.set?n.set(v):v;if(!nt($,c)&&!(h!==ue&&nt(v,h)))return;const k=i.vnode.props;k&&(e in k||s in k||r in k)&&(`onUpdate:${e}`in k||`onUpdate:${s}`in k||`onUpdate:${r}`in k)||(c=v,u()),i.emit(`update:${e}`,$),nt(v,$)&&nt(v,h)&&!nt($,p)&&u(),h=v,p=$}}});return l[Symbol.iterator]=()=>{let a=0;return{next(){return a<2?{value:a++?o||ue:l,done:!1}:{done:!0}}}},l}const Na=(t,e)=>e==="modelValue"||e==="model-value"?t.modelModifiers:t[`${e}Modifiers`]||t[`${ut(e)}Modifiers`]||t[`${Ut(e)}Modifiers`];function bd(t,e,...n){if(t.isUnmounted)return;const i=t.vnode.props||ue;let s=n;const r=e.startsWith("update:"),o=r&&Na(i,e.slice(7));o&&(o.trim&&(s=n.map(c=>Pe(c)?c.trim():c)),o.number&&(s=n.map(rr)));let l,a=i[l=Ii(e)]||i[l=Ii(ut(e))];!a&&r&&(a=i[l=Ii(Ut(e))]),a&&Ot(a,t,6,s);const u=i[l+"Once"];if(u){if(!t.emitted)t.emitted={};else if(t.emitted[l])return;t.emitted[l]=!0,Ot(u,t,6,s)}}function Fa(t,e,n=!1){const i=e.emitsCache,s=i.get(t);if(s!==void 0)return s;const r=t.emits;let o={},l=!1;if(!Q(t)){const a=u=>{const c=Fa(u,e,!0);c&&(l=!0,ze(o,c))};!n&&e.mixins.length&&e.mixins.forEach(a),t.extends&&a(t.extends),t.mixins&&t.mixins.forEach(a)}return!r&&!l?(Ee(t)&&i.set(t,null),null):(q(r)?r.forEach(a=>o[a]=null):ze(o,r),Ee(t)&&i.set(t,o),o)}function ps(t,e){return!t||!Ki(e)?!1:(e=e.slice(2).replace(/Once$/,""),fe(t,e[0].toLowerCase()+e.slice(1))||fe(t,Ut(e))||fe(t,e))}function No(t){const{type:e,vnode:n,proxy:i,withProxy:s,propsOptions:[r],slots:o,attrs:l,emit:a,render:u,renderCache:c,props:h,data:p,setupState:v,ctx:$,inheritAttrs:k}=t,E=Ui(t);let N,U;try{if(n.shapeFlag&4){const C=s||i,J=C;N=It(u.call(J,C,c,h,v,p,$)),U=l}else{const C=e;N=It(C.length>1?C(h,{attrs:l,slots:o,emit:a}):C(h,null)),U=e.props?l:yd(l)}}catch(C){Xn.length=0,cs(C,t,1),N=se(Ht)}let W=N;if(U&&k!==!1){const C=Object.keys(U),{shapeFlag:J}=W;C.length&&J&7&&(r&&C.some(Ir)&&(U=Sd(U,r)),W=$n(W,U,!1,!0))}return n.dirs&&(W=$n(W,null,!1,!0),W.dirs=W.dirs?W.dirs.concat(n.dirs):n.dirs),n.transition&&Lr(W,n.transition),N=W,Ui(E),N}const yd=t=>{let e;for(const n in t)(n==="class"||n==="style"||Ki(n))&&((e||(e={}))[n]=t[n]);return e},Sd=(t,e)=>{const n={};for(const i in t)(!Ir(i)||!(i.slice(9)in e))&&(n[i]=t[i]);return n};function xd(t,e,n){const{props:i,children:s,component:r}=t,{props:o,children:l,patchFlag:a}=e,u=r.emitsOptions;if(e.dirs||e.transition)return!0;if(n&&a>=0){if(a&1024)return!0;if(a&16)return i?Fo(i,o,u):!!o;if(a&8){const c=e.dynamicProps;for(let h=0;h<c.length;h++){const p=c[h];if(o[p]!==i[p]&&!ps(u,p))return!0}}}else return(s||l)&&(!l||!l.$stable)?!0:i===o?!1:i?o?Fo(i,o,u):!0:!!o;return!1}function Fo(t,e,n){const i=Object.keys(e);if(i.length!==Object.keys(t).length)return!0;for(let s=0;s<i.length;s++){const r=i[s];if(e[r]!==t[r]&&!ps(n,r))return!0}return!1}function wd({vnode:t,parent:e},n){for(;e;){const i=e.subTree;if(i.suspense&&i.suspense.activeBranch===t&&(i.el=t.el),i===t)(t=e.vnode).el=n,e=e.parent;else break}}const La=t=>t.__isSuspense;function _d(t,e){e&&e.pendingBranch?q(t)?e.effects.push(...t):e.effects.push(t):fa(t)}const le=Symbol.for("v-fgt"),gs=Symbol.for("v-txt"),Ht=Symbol.for("v-cmt"),Ri=Symbol.for("v-stc"),Xn=[];let at=null;function m(t=!1){Xn.push(at=t?null:[])}function Cd(){Xn.pop(),at=Xn[Xn.length-1]||null}let ai=1;function Lo(t,e=!1){ai+=t,t<0&&at&&e&&(at.hasOnce=!0)}function Ba(t){return t.dynamicChildren=ai>0?at||Sn:null,Cd(),ai>0&&at&&at.push(t),t}function R(t,e,n,i,s,r){return Ba(M(t,e,n,i,s,r,!0))}function we(t,e,n,i,s){return Ba(se(t,e,n,i,s,!0))}function Wr(t){return t?t.__v_isVNode===!0:!1}function Ln(t,e){return t.type===e.type&&t.key===e.key}const Va=({key:t})=>t??null,Ai=({ref:t,ref_key:e,ref_for:n})=>(typeof t=="number"&&(t=""+t),t!=null?Pe(t)||Ae(t)||Q(t)?{i:Fe,r:t,k:e,f:!!n}:t:null);function M(t,e=null,n=null,i=0,s=null,r=t===le?0:1,o=!1,l=!1){const a={__v_isVNode:!0,__v_skip:!0,type:t,props:e,key:e&&Va(e),ref:e&&Ai(e),scopeId:us,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:i,dynamicProps:s,dynamicChildren:null,appContext:null,ctx:Fe};return l?(Yr(a,n),r&128&&t.normalize(a)):n&&(a.shapeFlag|=Pe(n)?8:16),ai>0&&!o&&at&&(a.patchFlag>0||r&6)&&a.patchFlag!==32&&at.push(a),a}const se=kd;function kd(t,e=null,n=null,i=0,s=null,r=!1){if((!t||t===ya)&&(t=Ht),Wr(t)){const l=$n(t,e,!0);return n&&Yr(l,n),ai>0&&!r&&at&&(l.shapeFlag&6?at[at.indexOf(t)]=l:at.push(l)),l.patchFlag=-2,l}if(Dd(t)&&(t=t.__vccOpts),e){e=Ed(e);let{class:l,style:a}=e;l&&!Pe(l)&&(e.class=De(l)),Ee(a)&&(Nr(a)&&!q(a)&&(a=ze({},a)),e.style=ss(a))}const o=Pe(t)?1:La(t)?128:Du(t)?64:Ee(t)?4:Q(t)?2:0;return M(t,e,n,i,s,o,r,!0)}function Ed(t){return t?Nr(t)||$a(t)?ze({},t):t:null}function $n(t,e,n=!1,i=!1){const{props:s,ref:r,patchFlag:o,children:l,transition:a}=t,u=e?In(s||{},e):s,c={__v_isVNode:!0,__v_skip:!0,type:t.type,props:u,key:u&&Va(u),ref:e&&e.ref?n&&r?q(r)?r.concat(Ai(e)):[r,Ai(e)]:Ai(e):r,scopeId:t.scopeId,slotScopeIds:t.slotScopeIds,children:l,target:t.target,targetStart:t.targetStart,targetAnchor:t.targetAnchor,staticCount:t.staticCount,shapeFlag:t.shapeFlag,patchFlag:e&&t.type!==le?o===-1?16:o|16:o,dynamicProps:t.dynamicProps,dynamicChildren:t.dynamicChildren,appContext:t.appContext,dirs:t.dirs,transition:a,component:t.component,suspense:t.suspense,ssContent:t.ssContent&&$n(t.ssContent),ssFallback:t.ssFallback&&$n(t.ssFallback),el:t.el,anchor:t.anchor,ctx:t.ctx,ce:t.ce};return a&&i&&Lr(c,a.clone(c)),c}function ye(t=" ",e=0){return se(gs,null,t,e)}function K(t="",e=!1){return e?(m(),we(Ht,null,t)):se(Ht,null,t)}function It(t){return t==null||typeof t=="boolean"?se(Ht):q(t)?se(le,null,t.slice()):Wr(t)?Zt(t):se(gs,null,String(t))}function Zt(t){return t.el===null&&t.patchFlag!==-1||t.memo?t:$n(t)}function Yr(t,e){let n=0;const{shapeFlag:i}=t;if(e==null)e=null;else if(q(e))n=16;else if(typeof e=="object")if(i&65){const s=e.default;s&&(s._c&&(s._d=!1),Yr(t,s()),s._c&&(s._d=!0));return}else{n=32;const s=e._;!s&&!$a(e)?e._ctx=Fe:s===3&&Fe&&(Fe.slots._===1?e._=1:(e._=2,t.patchFlag|=1024))}else Q(e)?(e={default:e,_ctx:Fe},n=32):(e=String(e),i&64?(n=16,e=[ye(e)]):n=8);t.children=e,t.shapeFlag|=n}function In(...t){const e={};for(let n=0;n<t.length;n++){const i=t[n];for(const s in i)if(s==="class")e.class!==i.class&&(e.class=De([e.class,i.class]));else if(s==="style")e.style=ss([e.style,i.style]);else if(Ki(s)){const r=e[s],o=i[s];o&&r!==o&&!(q(r)&&r.includes(o))&&(e[s]=r?[].concat(r,o):o)}else s!==""&&(e[s]=i[s])}return e}function Et(t,e,n,i=null){Ot(t,e,7,[n,i])}const $d=Ca();let Id=0;function Od(t,e,n){const i=t.type,s=(e?e.appContext:t.appContext)||$d,r={uid:Id++,vnode:t,type:i,parent:e,appContext:s,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new zl(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:e?e.provides:Object.create(s.provides),ids:e?e.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Oa(i,s),emitsOptions:Fa(i,s),emit:null,emitted:null,propsDefaults:ue,inheritAttrs:i.inheritAttrs,ctx:ue,data:ue,props:ue,attrs:ue,slots:ue,refs:ue,setupState:ue,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return r.ctx={_:r},r.root=e?e.root:r,r.emit=bd.bind(null,r),t.ce&&t.ce(r),r}let Ve=null;const Gr=()=>Ve||Fe;let Yi,hr;{const t=is(),e=(n,i)=>{let s;return(s=t[n])||(s=t[n]=[]),s.push(i),r=>{s.length>1?s.forEach(o=>o(r)):s[0](r)}};Yi=e("__VUE_INSTANCE_SETTERS__",n=>Ve=n),hr=e("__VUE_SSR_SETTERS__",n=>ci=n)}const bi=t=>{const e=Ve;return Yi(t),t.scope.on(),()=>{t.scope.off(),Yi(e)}},Bo=()=>{Ve&&Ve.scope.off(),Yi(null)};function Ha(t){return t.vnode.shapeFlag&4}let ci=!1;function Rd(t,e=!1,n=!1){e&&hr(e);const{props:i,children:s}=t.vnode,r=Ha(t);sd(t,i,r,e),ad(t,s,n||e);const o=r?Ad(t,e):void 0;return e&&hr(!1),o}function Ad(t,e){const n=t.type;t.accessCache=Object.create(null),t.proxy=new Proxy(t.ctx,Yu);const{setup:i}=n;if(i){Bt();const s=t.setupContext=i.length>1?Ua(t):null,r=bi(t),o=gi(i,t,0,[t.props,s]),l=Fl(o);if(Vt(),r(),(l||t.sp)&&!_n(t)&&ga(t),l){if(o.then(Bo,Bo),e)return o.then(a=>{Vo(t,a)}).catch(a=>{cs(a,t,0)});t.asyncDep=o}else Vo(t,o)}else ja(t)}function Vo(t,e,n){Q(e)?t.type.__ssrInlineRender?t.ssrRender=e:t.render=e:Ee(e)&&(t.setupState=ca(e)),ja(t)}function ja(t,e,n){const i=t.type;t.render||(t.render=i.render||yt);{const s=bi(t);Bt();try{Ju(t)}finally{Vt(),s()}}}const Pd={get(t,e){return We(t,"get",""),t[e]}};function Ua(t){const e=n=>{t.exposed=n||{}};return{attrs:new Proxy(t.attrs,Pd),slots:t.slots,emit:t.emit,expose:e}}function vs(t){return t.exposed?t.exposeProxy||(t.exposeProxy=new Proxy(ca(as(t.exposed)),{get(e,n){if(n in e)return e[n];if(n in Jn)return Jn[n](t)},has(e,n){return n in e||n in Jn}})):t.proxy}function Td(t,e=!0){return Q(t)?t.displayName||t.name:t.name||e&&t.__name}function Dd(t){return Q(t)&&"__vccOpts"in t}const I=(t,e)=>ku(t,e,ci),Md="3.5.14";/**
* @vue/runtime-dom v3.5.14
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let pr;const Ho=typeof window<"u"&&window.trustedTypes;if(Ho)try{pr=Ho.createPolicy("vue",{createHTML:t=>t})}catch{}const za=pr?t=>pr.createHTML(t):t=>t,Nd="http://www.w3.org/2000/svg",Fd="http://www.w3.org/1998/Math/MathML",Tt=typeof document<"u"?document:null,jo=Tt&&Tt.createElement("template"),Ld={insert:(t,e,n)=>{e.insertBefore(t,n||null)},remove:t=>{const e=t.parentNode;e&&e.removeChild(t)},createElement:(t,e,n,i)=>{const s=e==="svg"?Tt.createElementNS(Nd,t):e==="mathml"?Tt.createElementNS(Fd,t):n?Tt.createElement(t,{is:n}):Tt.createElement(t);return t==="select"&&i&&i.multiple!=null&&s.setAttribute("multiple",i.multiple),s},createText:t=>Tt.createTextNode(t),createComment:t=>Tt.createComment(t),setText:(t,e)=>{t.nodeValue=e},setElementText:(t,e)=>{t.textContent=e},parentNode:t=>t.parentNode,nextSibling:t=>t.nextSibling,querySelector:t=>Tt.querySelector(t),setScopeId(t,e){t.setAttribute(e,"")},insertStaticContent(t,e,n,i,s,r){const o=n?n.previousSibling:e.lastChild;if(s&&(s===r||s.nextSibling))for(;e.insertBefore(s.cloneNode(!0),n),!(s===r||!(s=s.nextSibling)););else{jo.innerHTML=za(i==="svg"?`<svg>${t}</svg>`:i==="mathml"?`<math>${t}</math>`:t);const l=jo.content;if(i==="svg"||i==="mathml"){const a=l.firstChild;for(;a.firstChild;)l.appendChild(a.firstChild);l.removeChild(a)}e.insertBefore(l,n)}return[o?o.nextSibling:e.firstChild,n?n.previousSibling:e.lastChild]}},Bd=Symbol("_vtc");function Vd(t,e,n){const i=t[Bd];i&&(e=(e?[e,...i]:[...i]).join(" ")),e==null?t.removeAttribute("class"):n?t.setAttribute("class",e):t.className=e}const Gi=Symbol("_vod"),qa=Symbol("_vsh"),Jr={beforeMount(t,{value:e},{transition:n}){t[Gi]=t.style.display==="none"?"":t.style.display,n&&e?n.beforeEnter(t):Bn(t,e)},mounted(t,{value:e},{transition:n}){n&&e&&n.enter(t)},updated(t,{value:e,oldValue:n},{transition:i}){!e!=!n&&(i?e?(i.beforeEnter(t),Bn(t,!0),i.enter(t)):i.leave(t,()=>{Bn(t,!1)}):Bn(t,e))},beforeUnmount(t,{value:e}){Bn(t,e)}};function Bn(t,e){t.style.display=e?t[Gi]:"none",t[qa]=!e}const Wa=Symbol("");function Ya(t){const e=Gr();if(!e)return;const n=e.ut=(s=t(e.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${e.uid}"]`)).forEach(r=>Ji(r,s))},i=()=>{const s=t(e.proxy);e.ce?Ji(e.ce,s):gr(e.subTree,s),n(s)};ba(()=>{fa(i)}),Br(()=>{Nt(i,yt,{flush:"post"});const s=new MutationObserver(i);s.observe(e.subTree.el.parentNode,{childList:!0}),fs(()=>s.disconnect())})}function gr(t,e){if(t.shapeFlag&128){const n=t.suspense;t=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push(()=>{gr(n.activeBranch,e)})}for(;t.component;)t=t.component.subTree;if(t.shapeFlag&1&&t.el)Ji(t.el,e);else if(t.type===le)t.children.forEach(n=>gr(n,e));else if(t.type===Ri){let{el:n,anchor:i}=t;for(;n&&(Ji(n,e),n!==i);)n=n.nextSibling}}function Ji(t,e){if(t.nodeType===1){const n=t.style;let i="";for(const s in e)n.setProperty(`--${s}`,e[s]),i+=`--${s}: ${e[s]};`;n[Wa]=i}}const Hd=/(^|;)\s*display\s*:/;function jd(t,e,n){const i=t.style,s=Pe(n);let r=!1;if(n&&!s){if(e)if(Pe(e))for(const o of e.split(";")){const l=o.slice(0,o.indexOf(":")).trim();n[l]==null&&Pi(i,l,"")}else for(const o in e)n[o]==null&&Pi(i,o,"");for(const o in n)o==="display"&&(r=!0),Pi(i,o,n[o])}else if(s){if(e!==n){const o=i[Wa];o&&(n+=";"+o),i.cssText=n,r=Hd.test(n)}}else e&&t.removeAttribute("style");Gi in t&&(t[Gi]=r?i.display:"",t[qa]&&(i.display="none"))}const Uo=/\s*!important$/;function Pi(t,e,n){if(q(n))n.forEach(i=>Pi(t,e,i));else if(n==null&&(n=""),e.startsWith("--"))t.setProperty(e,n);else{const i=Ud(t,e);Uo.test(n)?t.setProperty(Ut(i),n.replace(Uo,""),"important"):t[i]=n}}const zo=["Webkit","Moz","ms"],Fs={};function Ud(t,e){const n=Fs[e];if(n)return n;let i=ut(e);if(i!=="filter"&&i in t)return Fs[e]=i;i=ns(i);for(let s=0;s<zo.length;s++){const r=zo[s]+i;if(r in t)return Fs[e]=r}return e}const qo="http://www.w3.org/1999/xlink";function Wo(t,e,n,i,s,r=Jc(e)){i&&e.startsWith("xlink:")?n==null?t.removeAttributeNS(qo,e.slice(6,e.length)):t.setAttributeNS(qo,e,n):n==null||r&&!Hl(n)?t.removeAttribute(e):t.setAttribute(e,r?"":jt(n)?String(n):n)}function Yo(t,e,n,i,s){if(e==="innerHTML"||e==="textContent"){n!=null&&(t[e]=e==="innerHTML"?za(n):n);return}const r=t.tagName;if(e==="value"&&r!=="PROGRESS"&&!r.includes("-")){const l=r==="OPTION"?t.getAttribute("value")||"":t.value,a=n==null?t.type==="checkbox"?"on":"":String(n);(l!==a||!("_value"in t))&&(t.value=a),n==null&&t.removeAttribute(e),t._value=n;return}let o=!1;if(n===""||n==null){const l=typeof t[e];l==="boolean"?n=Hl(n):n==null&&l==="string"?(n="",o=!0):l==="number"&&(n=0,o=!0)}try{t[e]=n}catch{}o&&t.removeAttribute(s||e)}function mn(t,e,n,i){t.addEventListener(e,n,i)}function zd(t,e,n,i){t.removeEventListener(e,n,i)}const Go=Symbol("_vei");function qd(t,e,n,i,s=null){const r=t[Go]||(t[Go]={}),o=r[e];if(i&&o)o.value=i;else{const[l,a]=Wd(e);if(i){const u=r[e]=Jd(i,s);mn(t,l,u,a)}else o&&(zd(t,l,o,a),r[e]=void 0)}}const Jo=/(?:Once|Passive|Capture)$/;function Wd(t){let e;if(Jo.test(t)){e={};let i;for(;i=t.match(Jo);)t=t.slice(0,t.length-i[0].length),e[i[0].toLowerCase()]=!0}return[t[2]===":"?t.slice(3):Ut(t.slice(2)),e]}let Ls=0;const Yd=Promise.resolve(),Gd=()=>Ls||(Yd.then(()=>Ls=0),Ls=Date.now());function Jd(t,e){const n=i=>{if(!i._vts)i._vts=Date.now();else if(i._vts<=n.attached)return;Ot(Qd(i,n.value),e,5,[i])};return n.value=t,n.attached=Gd(),n}function Qd(t,e){if(q(e)){const n=t.stopImmediatePropagation;return t.stopImmediatePropagation=()=>{n.call(t),t._stopped=!0},e.map(i=>s=>!s._stopped&&i&&i(s))}else return e}const Qo=t=>t.charCodeAt(0)===111&&t.charCodeAt(1)===110&&t.charCodeAt(2)>96&&t.charCodeAt(2)<123,Xd=(t,e,n,i,s,r)=>{const o=s==="svg";e==="class"?Vd(t,i,o):e==="style"?jd(t,n,i):Ki(e)?Ir(e)||qd(t,e,n,i,r):(e[0]==="."?(e=e.slice(1),!0):e[0]==="^"?(e=e.slice(1),!1):Zd(t,e,i,o))?(Yo(t,e,i),!t.tagName.includes("-")&&(e==="value"||e==="checked"||e==="selected")&&Wo(t,e,i,o,r,e!=="value")):t._isVueCE&&(/[A-Z]/.test(e)||!Pe(i))?Yo(t,ut(e),i,r,e):(e==="true-value"?t._trueValue=i:e==="false-value"&&(t._falseValue=i),Wo(t,e,i,o))};function Zd(t,e,n,i){if(i)return!!(e==="innerHTML"||e==="textContent"||e in t&&Qo(e)&&Q(n));if(e==="spellcheck"||e==="draggable"||e==="translate"||e==="autocorrect"||e==="form"||e==="list"&&t.tagName==="INPUT"||e==="type"&&t.tagName==="TEXTAREA")return!1;if(e==="width"||e==="height"){const s=t.tagName;if(s==="IMG"||s==="VIDEO"||s==="CANVAS"||s==="SOURCE")return!1}return Qo(e)&&Pe(n)?!1:e in t}const Xo=t=>{const e=t.props["onUpdate:modelValue"]||!1;return q(e)?n=>Oi(e,n):e};function Kd(t){t.target.composing=!0}function Zo(t){const e=t.target;e.composing&&(e.composing=!1,e.dispatchEvent(new Event("input")))}const Bs=Symbol("_assign"),ef={created(t,{modifiers:{lazy:e,trim:n,number:i}},s){t[Bs]=Xo(s);const r=i||s.props&&s.props.type==="number";mn(t,e?"change":"input",o=>{if(o.target.composing)return;let l=t.value;n&&(l=l.trim()),r&&(l=rr(l)),t[Bs](l)}),n&&mn(t,"change",()=>{t.value=t.value.trim()}),e||(mn(t,"compositionstart",Kd),mn(t,"compositionend",Zo),mn(t,"change",Zo))},mounted(t,{value:e}){t.value=e??""},beforeUpdate(t,{value:e,oldValue:n,modifiers:{lazy:i,trim:s,number:r}},o){if(t[Bs]=Xo(o),t.composing)return;const l=(r||t.type==="number")&&!/^0\d/.test(t.value)?rr(t.value):t.value,a=e??"";l!==a&&(document.activeElement===t&&t.type!=="range"&&(i&&e===n||s&&t.value.trim()===a)||(t.value=a))}},tf=["ctrl","shift","alt","meta"],nf={stop:t=>t.stopPropagation(),prevent:t=>t.preventDefault(),self:t=>t.target!==t.currentTarget,ctrl:t=>!t.ctrlKey,shift:t=>!t.shiftKey,alt:t=>!t.altKey,meta:t=>!t.metaKey,left:t=>"button"in t&&t.button!==0,middle:t=>"button"in t&&t.button!==1,right:t=>"button"in t&&t.button!==2,exact:(t,e)=>tf.some(n=>t[`${n}Key`]&&!e.includes(n))},Qi=(t,e)=>{const n=t._withMods||(t._withMods={}),i=e.join(".");return n[i]||(n[i]=(s,...r)=>{for(let o=0;o<e.length;o++){const l=nf[e[o]];if(l&&l(s,e))return}return t(s,...r)})},sf={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},ui=(t,e)=>{const n=t._withKeys||(t._withKeys={}),i=e.join(".");return n[i]||(n[i]=s=>{if(!("key"in s))return;const r=Ut(s.key);if(e.some(o=>o===r||sf[o]===r))return t(s)})},rf=ze({patchProp:Xd},Ld);let Ko;function of(){return Ko||(Ko=ud(rf))}const lf=(...t)=>{const e=of().createApp(...t),{mount:n}=e;return e.mount=i=>{const s=cf(i);if(!s)return;const r=e._component;!Q(r)&&!r.render&&!r.template&&(r.template=s.innerHTML),s.nodeType===1&&(s.textContent="");const o=n(s,!1,af(s));return s instanceof Element&&(s.removeAttribute("v-cloak"),s.setAttribute("data-v-app","")),o},e};function af(t){if(t instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&t instanceof MathMLElement)return"mathml"}function cf(t){return Pe(t)?document.querySelector(t):t}function uf(){var t=window.navigator.userAgent,e=t.indexOf("MSIE ");if(e>0)return parseInt(t.substring(e+5,t.indexOf(".",e)),10);var n=t.indexOf("Trident/");if(n>0){var i=t.indexOf("rv:");return parseInt(t.substring(i+3,t.indexOf(".",i)),10)}var s=t.indexOf("Edge/");return s>0?parseInt(t.substring(s+5,t.indexOf(".",s)),10):-1}let Ti;function vr(){vr.init||(vr.init=!0,Ti=uf()!==-1)}var ms={name:"ResizeObserver",props:{emitOnMount:{type:Boolean,default:!1},ignoreWidth:{type:Boolean,default:!1},ignoreHeight:{type:Boolean,default:!1}},emits:["notify"],mounted(){vr(),vi(()=>{this._w=this.$el.offsetWidth,this._h=this.$el.offsetHeight,this.emitOnMount&&this.emitSize()});const t=document.createElement("object");this._resizeObject=t,t.setAttribute("aria-hidden","true"),t.setAttribute("tabindex",-1),t.onload=this.addResizeHandlers,t.type="text/html",Ti&&this.$el.appendChild(t),t.data="about:blank",Ti||this.$el.appendChild(t)},beforeUnmount(){this.removeResizeHandlers()},methods:{compareAndNotify(){(!this.ignoreWidth&&this._w!==this.$el.offsetWidth||!this.ignoreHeight&&this._h!==this.$el.offsetHeight)&&(this._w=this.$el.offsetWidth,this._h=this.$el.offsetHeight,this.emitSize())},emitSize(){this.$emit("notify",{width:this._w,height:this._h})},addResizeHandlers(){this._resizeObject.contentDocument.defaultView.addEventListener("resize",this.compareAndNotify),this.compareAndNotify()},removeResizeHandlers(){this._resizeObject&&this._resizeObject.onload&&(!Ti&&this._resizeObject.contentDocument&&this._resizeObject.contentDocument.defaultView.removeEventListener("resize",this.compareAndNotify),this.$el.removeChild(this._resizeObject),this._resizeObject.onload=null,this._resizeObject=null)}}};const df=Pu();Ru("data-v-b329ee4c");const ff={class:"resize-observer",tabindex:"-1"};Au();const hf=df((t,e,n,i,s,r)=>(m(),we("div",ff)));ms.render=hf;ms.__scopeId="data-v-b329ee4c";ms.__file="src/components/ResizeObserver.vue";function Di(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Di=function(e){return typeof e}:Di=function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Di(t)}function pf(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function gf(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function vf(t,e,n){return e&&gf(t.prototype,e),t}function el(t){return mf(t)||bf(t)||yf(t)||Sf()}function mf(t){if(Array.isArray(t))return mr(t)}function bf(t){if(typeof Symbol<"u"&&Symbol.iterator in Object(t))return Array.from(t)}function yf(t,e){if(t){if(typeof t=="string")return mr(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);if(n==="Object"&&t.constructor&&(n=t.constructor.name),n==="Map"||n==="Set")return Array.from(t);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return mr(t,e)}}function mr(t,e){(e==null||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function Sf(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function xf(t){var e;return typeof t=="function"?e={callback:t}:e=t,e}function wf(t,e){var n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},i,s,r,o=function(a){for(var u=arguments.length,c=new Array(u>1?u-1:0),h=1;h<u;h++)c[h-1]=arguments[h];if(r=c,!(i&&a===s)){var p=n.leading;typeof p=="function"&&(p=p(a,s)),(!i||a!==s)&&p&&t.apply(void 0,[a].concat(el(r))),s=a,clearTimeout(i),i=setTimeout(function(){t.apply(void 0,[a].concat(el(r))),i=0},e)}};return o._clear=function(){clearTimeout(i),i=null},o}function Ga(t,e){if(t===e)return!0;if(Di(t)==="object"){for(var n in t)if(!Ga(t[n],e[n]))return!1;return!0}return!1}var _f=function(){function t(e,n,i){pf(this,t),this.el=e,this.observer=null,this.frozen=!1,this.createObserver(n,i)}return vf(t,[{key:"createObserver",value:function(n,i){var s=this;if(this.observer&&this.destroyObserver(),!this.frozen){if(this.options=xf(n),this.callback=function(l,a){s.options.callback(l,a),l&&s.options.once&&(s.frozen=!0,s.destroyObserver())},this.callback&&this.options.throttle){var r=this.options.throttleOptions||{},o=r.leading;this.callback=wf(this.callback,this.options.throttle,{leading:function(a){return o==="both"||o==="visible"&&a||o==="hidden"&&!a}})}this.oldResult=void 0,this.observer=new IntersectionObserver(function(l){var a=l[0];if(l.length>1){var u=l.find(function(h){return h.isIntersecting});u&&(a=u)}if(s.callback){var c=a.isIntersecting&&a.intersectionRatio>=s.threshold;if(c===s.oldResult)return;s.oldResult=c,s.callback(c,a)}},this.options.intersection),vi(function(){s.observer&&s.observer.observe(s.el)})}}},{key:"destroyObserver",value:function(){this.observer&&(this.observer.disconnect(),this.observer=null),this.callback&&this.callback._clear&&(this.callback._clear(),this.callback=null)}},{key:"threshold",get:function(){return this.options.intersection&&typeof this.options.intersection.threshold=="number"?this.options.intersection.threshold:0}}]),t}();function Ja(t,e,n){var i=e.value;if(i)if(typeof IntersectionObserver>"u")console.warn("[vue-observe-visibility] IntersectionObserver API is not available in your browser. Please install this polyfill: https://github.com/w3c/IntersectionObserver/tree/master/polyfill");else{var s=new _f(t,i,n);t._vue_visibilityState=s}}function Cf(t,e,n){var i=e.value,s=e.oldValue;if(!Ga(i,s)){var r=t._vue_visibilityState;if(!i){Qa(t);return}r?r.createObserver(i,n):Ja(t,{value:i},n)}}function Qa(t){var e=t._vue_visibilityState;e&&(e.destroyObserver(),delete t._vue_visibilityState)}var kf={beforeMount:Ja,updated:Cf,unmounted:Qa},Ef={itemsLimit:1e3},$f=/(auto|scroll)/;function Xa(t,e){return t.parentNode===null?e:Xa(t.parentNode,e.concat([t]))}var Vs=function(e,n){return getComputedStyle(e,null).getPropertyValue(n)},If=function(e){return Vs(e,"overflow")+Vs(e,"overflow-y")+Vs(e,"overflow-x")},Of=function(e){return $f.test(If(e))};function tl(t){if(t instanceof HTMLElement||t instanceof SVGElement){for(var e=Xa(t.parentNode,[]),n=0;n<e.length;n+=1)if(Of(e[n]))return e[n];return document.scrollingElement||document.documentElement}}function br(t){"@babel/helpers - typeof";return br=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},br(t)}var Rf={items:{type:Array,required:!0},keyField:{type:String,default:"id"},direction:{type:String,default:"vertical",validator:function(e){return["vertical","horizontal"].includes(e)}},listTag:{type:String,default:"div"},itemTag:{type:String,default:"div"}};function Af(){return this.items.length&&br(this.items[0])!=="object"}var yr=!1;if(typeof window<"u"){yr=!1;try{var Pf=Object.defineProperty({},"passive",{get:function(){yr=!0}});window.addEventListener("test",null,Pf)}catch{}}let Tf=0;var Qr={name:"RecycleScroller",components:{ResizeObserver:ms},directives:{ObserveVisibility:kf},props:{...Rf,itemSize:{type:Number,default:null},gridItems:{type:Number,default:void 0},itemSecondarySize:{type:Number,default:void 0},minItemSize:{type:[Number,String],default:null},sizeField:{type:String,default:"size"},typeField:{type:String,default:"type"},buffer:{type:Number,default:200},pageMode:{type:Boolean,default:!1},prerender:{type:Number,default:0},emitUpdate:{type:Boolean,default:!1},updateInterval:{type:Number,default:0},skipHover:{type:Boolean,default:!1},listTag:{type:String,default:"div"},itemTag:{type:String,default:"div"},listClass:{type:[String,Object,Array],default:""},itemClass:{type:[String,Object,Array],default:""}},emits:["resize","visible","hidden","update","scroll-start","scroll-end"],data(){return{pool:[],totalSize:0,ready:!1,hoverKey:null}},computed:{sizes(){if(this.itemSize===null){const t={"-1":{accumulator:0}},e=this.items,n=this.sizeField,i=this.minItemSize;let s=1e4,r=0,o;for(let l=0,a=e.length;l<a;l++)o=e[l][n]||i,o<s&&(s=o),r+=o,t[l]={accumulator:r,size:o};return this.$_computedMinItemSize=s,t}return[]},simpleArray:Af,itemIndexByKey(){const{keyField:t,items:e}=this,n={};for(let i=0,s=e.length;i<s;i++)n[e[i][t]]=i;return n}},watch:{items(){this.updateVisibleItems(!0)},pageMode(){this.applyPageMode(),this.updateVisibleItems(!1)},sizes:{handler(){this.updateVisibleItems(!1)},deep:!0},gridItems(){this.updateVisibleItems(!0)},itemSecondarySize(){this.updateVisibleItems(!0)}},created(){this.$_startIndex=0,this.$_endIndex=0,this.$_views=new Map,this.$_unusedViews=new Map,this.$_scrollDirty=!1,this.$_lastUpdateScrollPosition=0,this.prerender&&(this.$_prerender=!0,this.updateVisibleItems(!1)),this.gridItems&&!this.itemSize&&console.error("[vue-recycle-scroller] You must provide an itemSize when using gridItems")},mounted(){this.applyPageMode(),this.$nextTick(()=>{this.$_prerender=!1,this.updateVisibleItems(!0),this.ready=!0})},activated(){const t=this.$_lastUpdateScrollPosition;typeof t=="number"&&this.$nextTick(()=>{this.scrollToPosition(t)})},beforeUnmount(){this.removeListeners()},methods:{addView(t,e,n,i,s){const r=as({id:Tf++,index:e,used:!0,key:i,type:s}),o=la({item:n,position:0,nr:r});return t.push(o),o},unuseView(t,e=!1){const n=this.$_unusedViews,i=t.nr.type;let s=n.get(i);s||(s=[],n.set(i,s)),s.push(t),e||(t.nr.used=!1,t.position=-9999)},handleResize(){this.$emit("resize"),this.ready&&this.updateVisibleItems(!1)},handleScroll(t){if(!this.$_scrollDirty){if(this.$_scrollDirty=!0,this.$_updateTimeout)return;const e=()=>requestAnimationFrame(()=>{this.$_scrollDirty=!1;const{continuous:n}=this.updateVisibleItems(!1,!0);n||(clearTimeout(this.$_refreshTimout),this.$_refreshTimout=setTimeout(this.handleScroll,this.updateInterval+100))});e(),this.updateInterval&&(this.$_updateTimeout=setTimeout(()=>{this.$_updateTimeout=0,this.$_scrollDirty&&e()},this.updateInterval))}},handleVisibilityChange(t,e){this.ready&&(t||e.boundingClientRect.width!==0||e.boundingClientRect.height!==0?(this.$emit("visible"),requestAnimationFrame(()=>{this.updateVisibleItems(!1)})):this.$emit("hidden"))},updateVisibleItems(t,e=!1){const n=this.itemSize,i=this.gridItems||1,s=this.itemSecondarySize||n,r=this.$_computedMinItemSize,o=this.typeField,l=this.simpleArray?null:this.keyField,a=this.items,u=a.length,c=this.sizes,h=this.$_views,p=this.$_unusedViews,v=this.pool,$=this.itemIndexByKey;let k,E,N,U,W;if(!u)k=E=U=W=N=0;else if(this.$_prerender)k=U=0,E=W=Math.min(this.prerender,a.length),N=null;else{const B=this.getScroll();if(e){let ge=B.start-this.$_lastUpdateScrollPosition;if(ge<0&&(ge=-ge),n===null&&ge<r||ge<n)return{continuous:!0}}this.$_lastUpdateScrollPosition=B.start;const pe=this.buffer;B.start-=pe,B.end+=pe;let ne=0;if(this.$refs.before&&(ne=this.$refs.before.scrollHeight,B.start-=ne),this.$refs.after){const ge=this.$refs.after.scrollHeight;B.end+=ge}if(n===null){let ge,Je=0,dt=u-1,Z=~~(u/2),S;do S=Z,ge=c[Z].accumulator,ge<B.start?Je=Z:Z<u-1&&c[Z+1].accumulator>B.start&&(dt=Z),Z=~~((Je+dt)/2);while(Z!==S);for(Z<0&&(Z=0),k=Z,N=c[u-1].accumulator,E=Z;E<u&&c[E].accumulator<B.end;E++);for(E===-1?E=a.length-1:(E++,E>u&&(E=u)),U=k;U<u&&ne+c[U].accumulator<B.start;U++);for(W=U;W<u&&ne+c[W].accumulator<B.end;W++);}else{k=~~(B.start/n*i);const ge=k%i;k-=ge,E=Math.ceil(B.end/n*i),U=Math.max(0,Math.floor((B.start-ne)/n*i)),W=Math.floor((B.end-ne)/n*i),k<0&&(k=0),E>u&&(E=u),U<0&&(U=0),W>u&&(W=u),N=Math.ceil(u/i)*n}}E-k>Ef.itemsLimit&&this.itemsLimitError(),this.totalSize=N;let C;const J=k<=this.$_endIndex&&E>=this.$_startIndex;if(J)for(let B=0,pe=v.length;B<pe;B++)C=v[B],C.nr.used&&(t&&(C.nr.index=$[C.item[l]]),(C.nr.index==null||C.nr.index<k||C.nr.index>=E)&&this.unuseView(C));const Te=J?null:new Map;let ce,z,X;for(let B=k;B<E;B++){ce=a[B];const pe=l?ce[l]:ce;if(pe==null)throw new Error(`Key is ${pe} on item (keyField is '${l}')`);if(C=h.get(pe),!n&&!c[B].size){C&&this.unuseView(C);continue}z=ce[o];let ne=p.get(z),ge=!1;if(!C)J?ne&&ne.length?C=ne.pop():C=this.addView(v,B,ce,pe,z):(X=Te.get(z)||0,(!ne||X>=ne.length)&&(C=this.addView(v,B,ce,pe,z),this.unuseView(C,!0),ne=p.get(z)),C=ne[X],Te.set(z,X+1)),h.delete(C.nr.key),C.nr.used=!0,C.nr.index=B,C.nr.key=pe,C.nr.type=z,h.set(pe,C),ge=!0;else if(!C.nr.used&&(C.nr.used=!0,ge=!0,ne)){const Je=ne.indexOf(C);Je!==-1&&ne.splice(Je,1)}C.item=ce,ge&&(B===a.length-1&&this.$emit("scroll-end"),B===0&&this.$emit("scroll-start")),n===null?(C.position=c[B-1].accumulator,C.offset=0):(C.position=Math.floor(B/i)*n,C.offset=B%i*s)}return this.$_startIndex=k,this.$_endIndex=E,this.emitUpdate&&this.$emit("update",k,E,U,W),clearTimeout(this.$_sortTimer),this.$_sortTimer=setTimeout(this.sortViews,this.updateInterval+300),{continuous:J}},getListenerTarget(){let t=tl(this.$el);return window.document&&(t===window.document.documentElement||t===window.document.body)&&(t=window),t},getScroll(){const{$el:t,direction:e}=this,n=e==="vertical";let i;if(this.pageMode){const s=t.getBoundingClientRect(),r=n?s.height:s.width;let o=-(n?s.top:s.left),l=n?window.innerHeight:window.innerWidth;o<0&&(l+=o,o=0),o+l>r&&(l=r-o),i={start:o,end:o+l}}else n?i={start:t.scrollTop,end:t.scrollTop+t.clientHeight}:i={start:t.scrollLeft,end:t.scrollLeft+t.clientWidth};return i},applyPageMode(){this.pageMode?this.addListeners():this.removeListeners()},addListeners(){this.listenerTarget=this.getListenerTarget(),this.listenerTarget.addEventListener("scroll",this.handleScroll,yr?{passive:!0}:!1),this.listenerTarget.addEventListener("resize",this.handleResize)},removeListeners(){this.listenerTarget&&(this.listenerTarget.removeEventListener("scroll",this.handleScroll),this.listenerTarget.removeEventListener("resize",this.handleResize),this.listenerTarget=null)},scrollToItem(t){let e;const n=this.gridItems||1;this.itemSize===null?e=t>0?this.sizes[t-1].accumulator:0:e=Math.floor(t/n)*this.itemSize,this.scrollToPosition(e)},scrollToPosition(t){const e=this.direction==="vertical"?{scroll:"scrollTop",start:"top"}:{scroll:"scrollLeft",start:"left"};let n,i,s;if(this.pageMode){const r=tl(this.$el),o=r.tagName==="HTML"?0:r[e.scroll],l=r.getBoundingClientRect(),u=this.$el.getBoundingClientRect()[e.start]-l[e.start];n=r,i=e.scroll,s=t+o+u}else n=this.$el,i=e.scroll,s=t;n[i]=s},itemsLimitError(){throw setTimeout(()=>{console.log("It seems the scroller element isn't scrolling, so it tries to render all the items at once.","Scroller:",this.$el),console.log("Make sure the scroller has a fixed height (or width) and 'overflow-y' (or 'overflow-x') set to 'auto' so it can scroll correctly and only render the items visible in the scroll viewport.")}),new Error("Rendered items limit reached")},sortViews(){this.pool.sort((t,e)=>t.nr.index-e.nr.index)}}};const Df={key:0,ref:"before",class:"vue-recycle-scroller__slot"},Mf={key:1,ref:"after",class:"vue-recycle-scroller__slot"};function Nf(t,e,n,i,s,r){const o=Hr("ResizeObserver"),l=Wu("observe-visibility");return mi((m(),R("div",{class:De(["vue-recycle-scroller",{ready:s.ready,"page-mode":n.pageMode,[`direction-${t.direction}`]:!0}]),onScrollPassive:e[0]||(e[0]=(...a)=>r.handleScroll&&r.handleScroll(...a))},[t.$slots.before?(m(),R("div",Df,[lt(t.$slots,"before")],512)):K("v-if",!0),(m(),we(Oo(n.listTag),{ref:"wrapper",style:ss({[t.direction==="vertical"?"minHeight":"minWidth"]:s.totalSize+"px"}),class:De(["vue-recycle-scroller__item-wrapper",n.listClass])},{default:Me(()=>[(m(!0),R(le,null,qt(s.pool,a=>(m(),we(Oo(n.itemTag),In({key:a.nr.id,style:s.ready?{transform:`translate${t.direction==="vertical"?"Y":"X"}(${a.position}px) translate${t.direction==="vertical"?"X":"Y"}(${a.offset}px)`,width:n.gridItems?`${t.direction==="vertical"&&n.itemSecondarySize||n.itemSize}px`:void 0,height:n.gridItems?`${t.direction==="horizontal"&&n.itemSecondarySize||n.itemSize}px`:void 0}:null,class:["vue-recycle-scroller__item-view",[n.itemClass,{hover:!n.skipHover&&s.hoverKey===a.nr.key}]]},li(n.skipHover?{}:{mouseenter:()=>{s.hoverKey=a.nr.key},mouseleave:()=>{s.hoverKey=null}})),{default:Me(()=>[lt(t.$slots,"default",{item:a.item,index:a.nr.index,active:a.nr.used})]),_:2},1040,["style","class"]))),128)),lt(t.$slots,"empty")]),_:3},8,["style","class"])),t.$slots.after?(m(),R("div",Mf,[lt(t.$slots,"after")],512)):K("v-if",!0),se(o,{onNotify:r.handleResize},null,8,["onNotify"])],34)),[[l,r.handleVisibilityChange]])}Qr.render=Nf;Qr.__file="src/components/RecycleScroller.vue";/*!
 * pinia v2.3.1
 * (c) 2025 Eduardo San Martin Morote
 * @license MIT
 */let Za;const bs=t=>Za=t,Ka=Symbol();function Sr(t){return t&&typeof t=="object"&&Object.prototype.toString.call(t)==="[object Object]"&&typeof t.toJSON!="function"}var Zn;(function(t){t.direct="direct",t.patchObject="patch object",t.patchFunction="patch function"})(Zn||(Zn={}));function Ff(){const t=ql(!0),e=t.run(()=>re({}));let n=[],i=[];const s=as({install(r){bs(s),s._a=r,r.provide(Ka,s),r.config.globalProperties.$pinia=s,i.forEach(o=>n.push(o)),i=[]},use(r){return this._a?n.push(r):i.push(r),this},_p:n,_a:null,_e:t,_s:new Map,state:e});return s}const ec=()=>{};function nl(t,e,n,i=ec){t.push(e);const s=()=>{const r=t.indexOf(e);r>-1&&(t.splice(r,1),i())};return!n&&Wl()&&Qc(s),s}function gn(t,...e){t.slice().forEach(n=>{n(...e)})}const Lf=t=>t(),il=Symbol(),Hs=Symbol();function xr(t,e){t instanceof Map&&e instanceof Map?e.forEach((n,i)=>t.set(i,n)):t instanceof Set&&e instanceof Set&&e.forEach(t.add,t);for(const n in e){if(!e.hasOwnProperty(n))continue;const i=e[n],s=t[n];Sr(s)&&Sr(i)&&t.hasOwnProperty(n)&&!Ae(i)&&!Kt(i)?t[n]=xr(s,i):t[n]=i}return t}const Bf=Symbol();function Vf(t){return!Sr(t)||!t.hasOwnProperty(Bf)}const{assign:Jt}=Object;function Hf(t){return!!(Ae(t)&&t.effect)}function jf(t,e,n,i){const{state:s,actions:r,getters:o}=e,l=n.state.value[t];let a;function u(){l||(n.state.value[t]=s?s():{});const c=xu(n.state.value[t]);return Jt(c,r,Object.keys(o||{}).reduce((h,p)=>(h[p]=as(I(()=>{bs(n);const v=n._s.get(t);return o[p].call(v,v)})),h),{}))}return a=tc(t,u,e,n,i,!0),a}function tc(t,e,n={},i,s,r){let o;const l=Jt({actions:{}},n),a={deep:!0};let u,c,h=[],p=[],v;const $=i.state.value[t];!r&&!$&&(i.state.value[t]={}),re({});let k;function E(z){let X;u=c=!1,typeof z=="function"?(z(i.state.value[t]),X={type:Zn.patchFunction,storeId:t,events:v}):(xr(i.state.value[t],z),X={type:Zn.patchObject,payload:z,storeId:t,events:v});const B=k=Symbol();vi().then(()=>{k===B&&(u=!0)}),c=!0,gn(h,X,i.state.value[t])}const N=r?function(){const{state:X}=n,B=X?X():{};this.$patch(pe=>{Jt(pe,B)})}:ec;function U(){o.stop(),h=[],p=[],i._s.delete(t)}const W=(z,X="")=>{if(il in z)return z[Hs]=X,z;const B=function(){bs(i);const pe=Array.from(arguments),ne=[],ge=[];function Je(S){ne.push(S)}function dt(S){ge.push(S)}gn(p,{args:pe,name:B[Hs],store:J,after:Je,onError:dt});let Z;try{Z=z.apply(this&&this.$id===t?this:J,pe)}catch(S){throw gn(ge,S),S}return Z instanceof Promise?Z.then(S=>(gn(ne,S),S)).catch(S=>(gn(ge,S),Promise.reject(S))):(gn(ne,Z),Z)};return B[il]=!0,B[Hs]=X,B},C={_p:i,$id:t,$onAction:nl.bind(null,p),$patch:E,$reset:N,$subscribe(z,X={}){const B=nl(h,z,X.detached,()=>pe()),pe=o.run(()=>Nt(()=>i.state.value[t],ne=>{(X.flush==="sync"?c:u)&&z({storeId:t,type:Zn.direct,events:v},ne)},Jt({},a,X)));return B},$dispose:U},J=ls(C);i._s.set(t,J);const ce=(i._a&&i._a.runWithContext||Lf)(()=>i._e.run(()=>(o=ql()).run(()=>e({action:W}))));for(const z in ce){const X=ce[z];if(Ae(X)&&!Hf(X)||Kt(X))r||($&&Vf(X)&&(Ae(X)?X.value=$[z]:xr(X,$[z])),i.state.value[t][z]=X);else if(typeof X=="function"){const B=W(X,z);ce[z]=B,l.actions[z]=X}}return Jt(J,ce),Jt(oe(J),ce),Object.defineProperty(J,"$state",{get:()=>i.state.value[t],set:z=>{E(X=>{Jt(X,z)})}}),i._p.forEach(z=>{Jt(J,o.run(()=>z({store:J,app:i._a,pinia:i,options:l})))}),$&&r&&n.hydrate&&n.hydrate(J.$state,$),u=!0,c=!0,J}/*! #__NO_SIDE_EFFECTS__ */function nc(t,e,n){let i,s;const r=typeof e=="function";typeof t=="string"?(i=t,s=r?n:e):(s=t,i=t.id);function o(l,a){const u=id();return l=l||(u?Qn(Ka,null):null),l&&bs(l),l=Za,l._s.has(i)||(r?tc(i,e,s,l):jf(i,s,l)),l._s.get(i)}return o.$id=i,o}const tn=function(){if(typeof globalThis<"u")return globalThis;if(typeof global<"u")return global;if(typeof self<"u")return self;if(typeof window<"u")return window;try{return new Function("return this")()}catch{return{}}}();tn.trustedTypes===void 0&&(tn.trustedTypes={createPolicy:(t,e)=>e});const ic={configurable:!1,enumerable:!1,writable:!1};tn.FAST===void 0&&Reflect.defineProperty(tn,"FAST",Object.assign({value:Object.create(null)},ic));const di=tn.FAST;if(di.getById===void 0){const t=Object.create(null);Reflect.defineProperty(di,"getById",Object.assign({value(e,n){let i=t[e];return i===void 0&&(i=n?t[e]=n():null),i}},ic))}const Kn=Object.freeze([]);function sc(){const t=new WeakMap;return function(e){let n=t.get(e);if(n===void 0){let i=Reflect.getPrototypeOf(e);for(;n===void 0&&i!==null;)n=t.get(i),i=Reflect.getPrototypeOf(i);n=n===void 0?[]:n.slice(0),t.set(e,n)}return n}}const js=tn.FAST.getById(1,()=>{const t=[],e=[];function n(){if(e.length)throw e.shift()}function i(o){try{o.call()}catch(l){e.push(l),setTimeout(n,0)}}function s(){let l=0;for(;l<t.length;)if(i(t[l]),l++,l>1024){for(let a=0,u=t.length-l;a<u;a++)t[a]=t[a+l];t.length-=l,l=0}t.length=0}function r(o){t.length<1&&tn.requestAnimationFrame(s),t.push(o)}return Object.freeze({enqueue:r,process:s})}),rc=tn.trustedTypes.createPolicy("fast-html",{createHTML:t=>t});let Us=rc;const ei=`fast-${Math.random().toString(36).substring(2,8)}`,oc=`${ei}{`,Xr=`}${ei}`,he=Object.freeze({supportsAdoptedStyleSheets:Array.isArray(document.adoptedStyleSheets)&&"replace"in CSSStyleSheet.prototype,setHTMLPolicy(t){if(Us!==rc)throw new Error("The HTML policy can only be set once.");Us=t},createHTML(t){return Us.createHTML(t)},isMarker(t){return t&&t.nodeType===8&&t.data.startsWith(ei)},extractDirectiveIndexFromMarker(t){return parseInt(t.data.replace(`${ei}:`,""))},createInterpolationPlaceholder(t){return`${oc}${t}${Xr}`},createCustomAttributePlaceholder(t,e){return`${t}="${this.createInterpolationPlaceholder(e)}"`},createBlockPlaceholder(t){return`<!--${ei}:${t}-->`},queueUpdate:js.enqueue,processUpdates:js.process,nextUpdate(){return new Promise(js.enqueue)},setAttribute(t,e,n){n==null?t.removeAttribute(e):t.setAttribute(e,n)},setBooleanAttribute(t,e,n){n?t.setAttribute(e,""):t.removeAttribute(e)},removeChildNodes(t){for(let e=t.firstChild;e!==null;e=t.firstChild)t.removeChild(e)},createTemplateWalker(t){return document.createTreeWalker(t,133,null,!1)}});class wr{constructor(e,n){this.sub1=void 0,this.sub2=void 0,this.spillover=void 0,this.source=e,this.sub1=n}has(e){return this.spillover===void 0?this.sub1===e||this.sub2===e:this.spillover.indexOf(e)!==-1}subscribe(e){const n=this.spillover;if(n===void 0){if(this.has(e))return;if(this.sub1===void 0){this.sub1=e;return}if(this.sub2===void 0){this.sub2=e;return}this.spillover=[this.sub1,this.sub2,e],this.sub1=void 0,this.sub2=void 0}else n.indexOf(e)===-1&&n.push(e)}unsubscribe(e){const n=this.spillover;if(n===void 0)this.sub1===e?this.sub1=void 0:this.sub2===e&&(this.sub2=void 0);else{const i=n.indexOf(e);i!==-1&&n.splice(i,1)}}notify(e){const n=this.spillover,i=this.source;if(n===void 0){const s=this.sub1,r=this.sub2;s!==void 0&&s.handleChange(i,e),r!==void 0&&r.handleChange(i,e)}else for(let s=0,r=n.length;s<r;++s)n[s].handleChange(i,e)}}class lc{constructor(e){this.subscribers={},this.sourceSubscribers=null,this.source=e}notify(e){var n;const i=this.subscribers[e];i!==void 0&&i.notify(e),(n=this.sourceSubscribers)===null||n===void 0||n.notify(e)}subscribe(e,n){var i;if(n){let s=this.subscribers[n];s===void 0&&(this.subscribers[n]=s=new wr(this.source)),s.subscribe(e)}else this.sourceSubscribers=(i=this.sourceSubscribers)!==null&&i!==void 0?i:new wr(this.source),this.sourceSubscribers.subscribe(e)}unsubscribe(e,n){var i;if(n){const s=this.subscribers[n];s!==void 0&&s.unsubscribe(e)}else(i=this.sourceSubscribers)===null||i===void 0||i.unsubscribe(e)}}const de=di.getById(2,()=>{const t=/(:|&&|\|\||if)/,e=new WeakMap,n=he.queueUpdate;let i,s=u=>{throw new Error("Must call enableArrayObservation before observing arrays.")};function r(u){let c=u.$fastController||e.get(u);return c===void 0&&(Array.isArray(u)?c=s(u):e.set(u,c=new lc(u))),c}const o=sc();class l{constructor(c){this.name=c,this.field=`_${c}`,this.callback=`${c}Changed`}getValue(c){return i!==void 0&&i.watch(c,this.name),c[this.field]}setValue(c,h){const p=this.field,v=c[p];if(v!==h){c[p]=h;const $=c[this.callback];typeof $=="function"&&$.call(c,v,h),r(c).notify(this.name)}}}class a extends wr{constructor(c,h,p=!1){super(c,h),this.binding=c,this.isVolatileBinding=p,this.needsRefresh=!0,this.needsQueue=!0,this.first=this,this.last=null,this.propertySource=void 0,this.propertyName=void 0,this.notifier=void 0,this.next=void 0}observe(c,h){this.needsRefresh&&this.last!==null&&this.disconnect();const p=i;i=this.needsRefresh?this:void 0,this.needsRefresh=this.isVolatileBinding;const v=this.binding(c,h);return i=p,v}disconnect(){if(this.last!==null){let c=this.first;for(;c!==void 0;)c.notifier.unsubscribe(this,c.propertyName),c=c.next;this.last=null,this.needsRefresh=this.needsQueue=!0}}watch(c,h){const p=this.last,v=r(c),$=p===null?this.first:{};if($.propertySource=c,$.propertyName=h,$.notifier=v,v.subscribe(this,h),p!==null){if(!this.needsRefresh){let k;i=void 0,k=p.propertySource[p.propertyName],i=this,c===k&&(this.needsRefresh=!0)}p.next=$}this.last=$}handleChange(){this.needsQueue&&(this.needsQueue=!1,n(this))}call(){this.last!==null&&(this.needsQueue=!0,this.notify(this))}records(){let c=this.first;return{next:()=>{const h=c;return h===void 0?{value:void 0,done:!0}:(c=c.next,{value:h,done:!1})},[Symbol.iterator]:function(){return this}}}}return Object.freeze({setArrayObserverFactory(u){s=u},getNotifier:r,track(u,c){i!==void 0&&i.watch(u,c)},trackVolatile(){i!==void 0&&(i.needsRefresh=!0)},notify(u,c){r(u).notify(c)},defineProperty(u,c){typeof c=="string"&&(c=new l(c)),o(u).push(c),Reflect.defineProperty(u,c.name,{enumerable:!0,get:function(){return c.getValue(this)},set:function(h){c.setValue(this,h)}})},getAccessors:o,binding(u,c,h=this.isVolatileBinding(u)){return new a(u,c,h)},isVolatileBinding(u){return t.test(u.toString())}})});function ae(t,e){de.defineProperty(t,e)}function Uf(t,e,n){return Object.assign({},n,{get:function(){return de.trackVolatile(),n.get.apply(this)}})}const sl=di.getById(3,()=>{let t=null;return{get(){return t},set(e){t=e}}});class fi{constructor(){this.index=0,this.length=0,this.parent=null,this.parentContext=null}get event(){return sl.get()}get isEven(){return this.index%2===0}get isOdd(){return this.index%2!==0}get isFirst(){return this.index===0}get isInMiddle(){return!this.isFirst&&!this.isLast}get isLast(){return this.index===this.length-1}static setEvent(e){sl.set(e)}}de.defineProperty(fi.prototype,"index");de.defineProperty(fi.prototype,"length");const ti=Object.seal(new fi);class Zr{constructor(){this.targetIndex=0}}class ac extends Zr{constructor(){super(...arguments),this.createPlaceholder=he.createInterpolationPlaceholder}}class cc extends Zr{constructor(e,n,i){super(),this.name=e,this.behavior=n,this.options=i}createPlaceholder(e){return he.createCustomAttributePlaceholder(this.name,e)}createBehavior(e){return new this.behavior(e,this.options)}}function zf(t,e){this.source=t,this.context=e,this.bindingObserver===null&&(this.bindingObserver=de.binding(this.binding,this,this.isBindingVolatile)),this.updateTarget(this.bindingObserver.observe(t,e))}function qf(t,e){this.source=t,this.context=e,this.target.addEventListener(this.targetName,this)}function Wf(){this.bindingObserver.disconnect(),this.source=null,this.context=null}function Yf(){this.bindingObserver.disconnect(),this.source=null,this.context=null;const t=this.target.$fastView;t!==void 0&&t.isComposed&&(t.unbind(),t.needsBindOnly=!0)}function Gf(){this.target.removeEventListener(this.targetName,this),this.source=null,this.context=null}function Jf(t){he.setAttribute(this.target,this.targetName,t)}function Qf(t){he.setBooleanAttribute(this.target,this.targetName,t)}function Xf(t){if(t==null&&(t=""),t.create){this.target.textContent="";let e=this.target.$fastView;e===void 0?e=t.create():this.target.$fastTemplate!==t&&(e.isComposed&&(e.remove(),e.unbind()),e=t.create()),e.isComposed?e.needsBindOnly&&(e.needsBindOnly=!1,e.bind(this.source,this.context)):(e.isComposed=!0,e.bind(this.source,this.context),e.insertBefore(this.target),this.target.$fastView=e,this.target.$fastTemplate=t)}else{const e=this.target.$fastView;e!==void 0&&e.isComposed&&(e.isComposed=!1,e.remove(),e.needsBindOnly?e.needsBindOnly=!1:e.unbind()),this.target.textContent=t}}function Zf(t){this.target[this.targetName]=t}function Kf(t){const e=this.classVersions||Object.create(null),n=this.target;let i=this.version||0;if(t!=null&&t.length){const s=t.split(/\s+/);for(let r=0,o=s.length;r<o;++r){const l=s[r];l!==""&&(e[l]=i,n.classList.add(l))}}if(this.classVersions=e,this.version=i+1,i!==0){i-=1;for(const s in e)e[s]===i&&n.classList.remove(s)}}class Kr extends ac{constructor(e){super(),this.binding=e,this.bind=zf,this.unbind=Wf,this.updateTarget=Jf,this.isBindingVolatile=de.isVolatileBinding(this.binding)}get targetName(){return this.originalTargetName}set targetName(e){if(this.originalTargetName=e,e!==void 0)switch(e[0]){case":":if(this.cleanedTargetName=e.substr(1),this.updateTarget=Zf,this.cleanedTargetName==="innerHTML"){const n=this.binding;this.binding=(i,s)=>he.createHTML(n(i,s))}break;case"?":this.cleanedTargetName=e.substr(1),this.updateTarget=Qf;break;case"@":this.cleanedTargetName=e.substr(1),this.bind=qf,this.unbind=Gf;break;default:this.cleanedTargetName=e,e==="class"&&(this.updateTarget=Kf);break}}targetAtContent(){this.updateTarget=Xf,this.unbind=Yf}createBehavior(e){return new eh(e,this.binding,this.isBindingVolatile,this.bind,this.unbind,this.updateTarget,this.cleanedTargetName)}}class eh{constructor(e,n,i,s,r,o,l){this.source=null,this.context=null,this.bindingObserver=null,this.target=e,this.binding=n,this.isBindingVolatile=i,this.bind=s,this.unbind=r,this.updateTarget=o,this.targetName=l}handleChange(){this.updateTarget(this.bindingObserver.observe(this.source,this.context))}handleEvent(e){fi.setEvent(e);const n=this.binding(this.source,this.context);fi.setEvent(null),n!==!0&&e.preventDefault()}}let zs=null;class eo{addFactory(e){e.targetIndex=this.targetIndex,this.behaviorFactories.push(e)}captureContentBinding(e){e.targetAtContent(),this.addFactory(e)}reset(){this.behaviorFactories=[],this.targetIndex=-1}release(){zs=this}static borrow(e){const n=zs||new eo;return n.directives=e,n.reset(),zs=null,n}}function th(t){if(t.length===1)return t[0];let e;const n=t.length,i=t.map(o=>typeof o=="string"?()=>o:(e=o.targetName||e,o.binding)),s=(o,l)=>{let a="";for(let u=0;u<n;++u)a+=i[u](o,l);return a},r=new Kr(s);return r.targetName=e,r}const nh=Xr.length;function uc(t,e){const n=e.split(oc);if(n.length===1)return null;const i=[];for(let s=0,r=n.length;s<r;++s){const o=n[s],l=o.indexOf(Xr);let a;if(l===-1)a=o;else{const u=parseInt(o.substring(0,l));i.push(t.directives[u]),a=o.substring(l+nh)}a!==""&&i.push(a)}return i}function rl(t,e,n=!1){const i=e.attributes;for(let s=0,r=i.length;s<r;++s){const o=i[s],l=o.value,a=uc(t,l);let u=null;a===null?n&&(u=new Kr(()=>l),u.targetName=o.name):u=th(a),u!==null&&(e.removeAttributeNode(o),s--,r--,t.addFactory(u))}}function ih(t,e,n){const i=uc(t,e.textContent);if(i!==null){let s=e;for(let r=0,o=i.length;r<o;++r){const l=i[r],a=r===0?e:s.parentNode.insertBefore(document.createTextNode(""),s.nextSibling);typeof l=="string"?a.textContent=l:(a.textContent=" ",t.captureContentBinding(l)),s=a,t.targetIndex++,a!==e&&n.nextNode()}t.targetIndex--}}function sh(t,e){const n=t.content;document.adoptNode(n);const i=eo.borrow(e);rl(i,t,!0);const s=i.behaviorFactories;i.reset();const r=he.createTemplateWalker(n);let o;for(;o=r.nextNode();)switch(i.targetIndex++,o.nodeType){case 1:rl(i,o);break;case 3:ih(i,o,r);break;case 8:he.isMarker(o)&&i.addFactory(e[he.extractDirectiveIndexFromMarker(o)])}let l=0;(he.isMarker(n.firstChild)||n.childNodes.length===1&&e.length)&&(n.insertBefore(document.createComment(""),n.firstChild),l=-1);const a=i.behaviorFactories;return i.release(),{fragment:n,viewBehaviorFactories:a,hostBehaviorFactories:s,targetOffset:l}}const qs=document.createRange();class rh{constructor(e,n){this.fragment=e,this.behaviors=n,this.source=null,this.context=null,this.firstChild=e.firstChild,this.lastChild=e.lastChild}appendTo(e){e.appendChild(this.fragment)}insertBefore(e){if(this.fragment.hasChildNodes())e.parentNode.insertBefore(this.fragment,e);else{const n=this.lastChild;if(e.previousSibling===n)return;const i=e.parentNode;let s=this.firstChild,r;for(;s!==n;)r=s.nextSibling,i.insertBefore(s,e),s=r;i.insertBefore(n,e)}}remove(){const e=this.fragment,n=this.lastChild;let i=this.firstChild,s;for(;i!==n;)s=i.nextSibling,e.appendChild(i),i=s;e.appendChild(n)}dispose(){const e=this.firstChild.parentNode,n=this.lastChild;let i=this.firstChild,s;for(;i!==n;)s=i.nextSibling,e.removeChild(i),i=s;e.removeChild(n);const r=this.behaviors,o=this.source;for(let l=0,a=r.length;l<a;++l)r[l].unbind(o)}bind(e,n){const i=this.behaviors;if(this.source!==e)if(this.source!==null){const s=this.source;this.source=e,this.context=n;for(let r=0,o=i.length;r<o;++r){const l=i[r];l.unbind(s),l.bind(e,n)}}else{this.source=e,this.context=n;for(let s=0,r=i.length;s<r;++s)i[s].bind(e,n)}}unbind(){if(this.source===null)return;const e=this.behaviors,n=this.source;for(let i=0,s=e.length;i<s;++i)e[i].unbind(n);this.source=null}static disposeContiguousBatch(e){if(e.length!==0){qs.setStartBefore(e[0].firstChild),qs.setEndAfter(e[e.length-1].lastChild),qs.deleteContents();for(let n=0,i=e.length;n<i;++n){const s=e[n],r=s.behaviors,o=s.source;for(let l=0,a=r.length;l<a;++l)r[l].unbind(o)}}}}class ol{constructor(e,n){this.behaviorCount=0,this.hasHostBehaviors=!1,this.fragment=null,this.targetOffset=0,this.viewBehaviorFactories=null,this.hostBehaviorFactories=null,this.html=e,this.directives=n}create(e){if(this.fragment===null){let u;const c=this.html;if(typeof c=="string"){u=document.createElement("template"),u.innerHTML=he.createHTML(c);const p=u.content.firstElementChild;p!==null&&p.tagName==="TEMPLATE"&&(u=p)}else u=c;const h=sh(u,this.directives);this.fragment=h.fragment,this.viewBehaviorFactories=h.viewBehaviorFactories,this.hostBehaviorFactories=h.hostBehaviorFactories,this.targetOffset=h.targetOffset,this.behaviorCount=this.viewBehaviorFactories.length+this.hostBehaviorFactories.length,this.hasHostBehaviors=this.hostBehaviorFactories.length>0}const n=this.fragment.cloneNode(!0),i=this.viewBehaviorFactories,s=new Array(this.behaviorCount),r=he.createTemplateWalker(n);let o=0,l=this.targetOffset,a=r.nextNode();for(let u=i.length;o<u;++o){const c=i[o],h=c.targetIndex;for(;a!==null;)if(l===h){s[o]=c.createBehavior(a);break}else a=r.nextNode(),l++}if(this.hasHostBehaviors){const u=this.hostBehaviorFactories;for(let c=0,h=u.length;c<h;++c,++o)s[o]=u[c].createBehavior(e)}return new rh(n,s)}render(e,n,i){typeof n=="string"&&(n=document.getElementById(n)),i===void 0&&(i=n);const s=this.create(i);return s.bind(e,ti),s.appendTo(n),s}}const oh=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;function ct(t,...e){const n=[];let i="";for(let s=0,r=t.length-1;s<r;++s){const o=t[s];let l=e[s];if(i+=o,l instanceof ol){const a=l;l=()=>a}if(typeof l=="function"&&(l=new Kr(l)),l instanceof ac){const a=oh.exec(o);a!==null&&(l.targetName=a[2])}l instanceof Zr?(i+=l.createPlaceholder(n.length),n.push(l)):i+=l}return i+=t[t.length-1],new ol(i,n)}class it{constructor(){this.targets=new WeakSet}addStylesTo(e){this.targets.add(e)}removeStylesFrom(e){this.targets.delete(e)}isAttachedTo(e){return this.targets.has(e)}withBehaviors(...e){return this.behaviors=this.behaviors===null?e:this.behaviors.concat(e),this}}it.create=(()=>{if(he.supportsAdoptedStyleSheets){const t=new Map;return e=>new lh(e,t)}return t=>new uh(t)})();function to(t){return t.map(e=>e instanceof it?to(e.styles):[e]).reduce((e,n)=>e.concat(n),[])}function dc(t){return t.map(e=>e instanceof it?e.behaviors:null).reduce((e,n)=>n===null?e:(e===null&&(e=[]),e.concat(n)),null)}const fc=Symbol("prependToAdoptedStyleSheets");function hc(t){const e=[],n=[];return t.forEach(i=>(i[fc]?e:n).push(i)),{prepend:e,append:n}}let pc=(t,e)=>{const{prepend:n,append:i}=hc(e);t.adoptedStyleSheets=[...n,...t.adoptedStyleSheets,...i]},gc=(t,e)=>{t.adoptedStyleSheets=t.adoptedStyleSheets.filter(n=>e.indexOf(n)===-1)};if(he.supportsAdoptedStyleSheets)try{document.adoptedStyleSheets.push(),document.adoptedStyleSheets.splice(),pc=(t,e)=>{const{prepend:n,append:i}=hc(e);t.adoptedStyleSheets.splice(0,0,...n),t.adoptedStyleSheets.push(...i)},gc=(t,e)=>{for(const n of e){const i=t.adoptedStyleSheets.indexOf(n);i!==-1&&t.adoptedStyleSheets.splice(i,1)}}}catch{}class lh extends it{constructor(e,n){super(),this.styles=e,this.styleSheetCache=n,this._styleSheets=void 0,this.behaviors=dc(e)}get styleSheets(){if(this._styleSheets===void 0){const e=this.styles,n=this.styleSheetCache;this._styleSheets=to(e).map(i=>{if(i instanceof CSSStyleSheet)return i;let s=n.get(i);return s===void 0&&(s=new CSSStyleSheet,s.replaceSync(i),n.set(i,s)),s})}return this._styleSheets}addStylesTo(e){pc(e,this.styleSheets),super.addStylesTo(e)}removeStylesFrom(e){gc(e,this.styleSheets),super.removeStylesFrom(e)}}let ah=0;function ch(){return`fast-style-class-${++ah}`}class uh extends it{constructor(e){super(),this.styles=e,this.behaviors=null,this.behaviors=dc(e),this.styleSheets=to(e),this.styleClass=ch()}addStylesTo(e){const n=this.styleSheets,i=this.styleClass;e=this.normalizeTarget(e);for(let s=0;s<n.length;s++){const r=document.createElement("style");r.innerHTML=n[s],r.className=i,e.append(r)}super.addStylesTo(e)}removeStylesFrom(e){e=this.normalizeTarget(e);const n=e.querySelectorAll(`.${this.styleClass}`);for(let i=0,s=n.length;i<s;++i)e.removeChild(n[i]);super.removeStylesFrom(e)}isAttachedTo(e){return super.isAttachedTo(this.normalizeTarget(e))}normalizeTarget(e){return e===document?document.body:e}}const Xi=Object.freeze({locate:sc()}),vc={toView(t){return t?"true":"false"},fromView(t){return!(t==null||t==="false"||t===!1||t===0)}},ys={toView(t){if(t==null)return null;const e=t*1;return isNaN(e)?null:e.toString()},fromView(t){if(t==null)return null;const e=t*1;return isNaN(e)?null:e}};class Zi{constructor(e,n,i=n.toLowerCase(),s="reflect",r){this.guards=new Set,this.Owner=e,this.name=n,this.attribute=i,this.mode=s,this.converter=r,this.fieldName=`_${n}`,this.callbackName=`${n}Changed`,this.hasCallback=this.callbackName in e.prototype,s==="boolean"&&r===void 0&&(this.converter=vc)}setValue(e,n){const i=e[this.fieldName],s=this.converter;s!==void 0&&(n=s.fromView(n)),i!==n&&(e[this.fieldName]=n,this.tryReflectToAttribute(e),this.hasCallback&&e[this.callbackName](i,n),e.$fastController.notify(this.name))}getValue(e){return de.track(e,this.name),e[this.fieldName]}onAttributeChangedCallback(e,n){this.guards.has(e)||(this.guards.add(e),this.setValue(e,n),this.guards.delete(e))}tryReflectToAttribute(e){const n=this.mode,i=this.guards;i.has(e)||n==="fromView"||he.queueUpdate(()=>{i.add(e);const s=e[this.fieldName];switch(n){case"reflect":const r=this.converter;he.setAttribute(e,this.attribute,r!==void 0?r.toView(s):s);break;case"boolean":he.setBooleanAttribute(e,this.attribute,s);break}i.delete(e)})}static collect(e,...n){const i=[];n.push(Xi.locate(e));for(let s=0,r=n.length;s<r;++s){const o=n[s];if(o!==void 0)for(let l=0,a=o.length;l<a;++l){const u=o[l];typeof u=="string"?i.push(new Zi(e,u)):i.push(new Zi(e,u.property,u.attribute,u.mode,u.converter))}}return i}}function j(t,e){let n;function i(s,r){arguments.length>1&&(n.property=r),Xi.locate(s.constructor).push(n)}if(arguments.length>1){n={},i(t,e);return}return n=t===void 0?{}:t,i}const ll={mode:"open"},al={},_r=di.getById(4,()=>{const t=new Map;return Object.freeze({register(e){return t.has(e.type)?!1:(t.set(e.type,e),!0)},getByType(e){return t.get(e)}})});class Ss{constructor(e,n=e.definition){typeof n=="string"&&(n={name:n}),this.type=e,this.name=n.name,this.template=n.template;const i=Zi.collect(e,n.attributes),s=new Array(i.length),r={},o={};for(let l=0,a=i.length;l<a;++l){const u=i[l];s[l]=u.attribute,r[u.name]=u,o[u.attribute]=u}this.attributes=i,this.observedAttributes=s,this.propertyLookup=r,this.attributeLookup=o,this.shadowOptions=n.shadowOptions===void 0?ll:n.shadowOptions===null?void 0:Object.assign(Object.assign({},ll),n.shadowOptions),this.elementOptions=n.elementOptions===void 0?al:Object.assign(Object.assign({},al),n.elementOptions),this.styles=n.styles===void 0?void 0:Array.isArray(n.styles)?it.create(n.styles):n.styles instanceof it?n.styles:it.create([n.styles])}get isDefined(){return!!_r.getByType(this.type)}define(e=customElements){const n=this.type;if(_r.register(this)){const i=this.attributes,s=n.prototype;for(let r=0,o=i.length;r<o;++r)de.defineProperty(s,i[r]);Reflect.defineProperty(n,"observedAttributes",{value:this.observedAttributes,enumerable:!0})}return e.get(this.name)||e.define(this.name,n,this.elementOptions),this}}Ss.forType=_r.getByType;const mc=new WeakMap,dh={bubbles:!0,composed:!0,cancelable:!0};function Ws(t){return t.shadowRoot||mc.get(t)||null}class no extends lc{constructor(e,n){super(e),this.boundObservables=null,this.behaviors=null,this.needsInitialization=!0,this._template=null,this._styles=null,this._isConnected=!1,this.$fastController=this,this.view=null,this.element=e,this.definition=n;const i=n.shadowOptions;if(i!==void 0){const r=e.attachShadow(i);i.mode==="closed"&&mc.set(e,r)}const s=de.getAccessors(e);if(s.length>0){const r=this.boundObservables=Object.create(null);for(let o=0,l=s.length;o<l;++o){const a=s[o].name,u=e[a];u!==void 0&&(delete e[a],r[a]=u)}}}get isConnected(){return de.track(this,"isConnected"),this._isConnected}setIsConnected(e){this._isConnected=e,de.notify(this,"isConnected")}get template(){return this._template}set template(e){this._template!==e&&(this._template=e,this.needsInitialization||this.renderTemplate(e))}get styles(){return this._styles}set styles(e){this._styles!==e&&(this._styles!==null&&this.removeStyles(this._styles),this._styles=e,!this.needsInitialization&&e!==null&&this.addStyles(e))}addStyles(e){const n=Ws(this.element)||this.element.getRootNode();if(e instanceof HTMLStyleElement)n.append(e);else if(!e.isAttachedTo(n)){const i=e.behaviors;e.addStylesTo(n),i!==null&&this.addBehaviors(i)}}removeStyles(e){const n=Ws(this.element)||this.element.getRootNode();if(e instanceof HTMLStyleElement)n.removeChild(e);else if(e.isAttachedTo(n)){const i=e.behaviors;e.removeStylesFrom(n),i!==null&&this.removeBehaviors(i)}}addBehaviors(e){const n=this.behaviors||(this.behaviors=new Map),i=e.length,s=[];for(let r=0;r<i;++r){const o=e[r];n.has(o)?n.set(o,n.get(o)+1):(n.set(o,1),s.push(o))}if(this._isConnected){const r=this.element;for(let o=0;o<s.length;++o)s[o].bind(r,ti)}}removeBehaviors(e,n=!1){const i=this.behaviors;if(i===null)return;const s=e.length,r=[];for(let o=0;o<s;++o){const l=e[o];if(i.has(l)){const a=i.get(l)-1;a===0||n?i.delete(l)&&r.push(l):i.set(l,a)}}if(this._isConnected){const o=this.element;for(let l=0;l<r.length;++l)r[l].unbind(o)}}onConnectedCallback(){if(this._isConnected)return;const e=this.element;this.needsInitialization?this.finishInitialization():this.view!==null&&this.view.bind(e,ti);const n=this.behaviors;if(n!==null)for(const[i]of n)i.bind(e,ti);this.setIsConnected(!0)}onDisconnectedCallback(){if(!this._isConnected)return;this.setIsConnected(!1);const e=this.view;e!==null&&e.unbind();const n=this.behaviors;if(n!==null){const i=this.element;for(const[s]of n)s.unbind(i)}}onAttributeChangedCallback(e,n,i){const s=this.definition.attributeLookup[e];s!==void 0&&s.onAttributeChangedCallback(this.element,i)}emit(e,n,i){return this._isConnected?this.element.dispatchEvent(new CustomEvent(e,Object.assign(Object.assign({detail:n},dh),i))):!1}finishInitialization(){const e=this.element,n=this.boundObservables;if(n!==null){const s=Object.keys(n);for(let r=0,o=s.length;r<o;++r){const l=s[r];e[l]=n[l]}this.boundObservables=null}const i=this.definition;this._template===null&&(this.element.resolveTemplate?this._template=this.element.resolveTemplate():i.template&&(this._template=i.template||null)),this._template!==null&&this.renderTemplate(this._template),this._styles===null&&(this.element.resolveStyles?this._styles=this.element.resolveStyles():i.styles&&(this._styles=i.styles||null)),this._styles!==null&&this.addStyles(this._styles),this.needsInitialization=!1}renderTemplate(e){const n=this.element,i=Ws(n)||n;this.view!==null?(this.view.dispose(),this.view=null):this.needsInitialization||he.removeChildNodes(i),e&&(this.view=e.render(n,i,n))}static forCustomElement(e){const n=e.$fastController;if(n!==void 0)return n;const i=Ss.forType(e.constructor);if(i===void 0)throw new Error("Missing FASTElement definition.");return e.$fastController=new no(e,i)}}function cl(t){return class extends t{constructor(){super(),no.forCustomElement(this)}$emit(e,n,i){return this.$fastController.emit(e,n,i)}connectedCallback(){this.$fastController.onConnectedCallback()}disconnectedCallback(){this.$fastController.onDisconnectedCallback()}attributeChangedCallback(e,n,i){this.$fastController.onAttributeChangedCallback(e,n,i)}}}const xs=Object.assign(cl(HTMLElement),{from(t){return cl(t)},define(t,e){return new Ss(t,e).define().type}});class bc{createCSS(){return""}createBehavior(){}}function fh(t,e){const n=[];let i="";const s=[];for(let r=0,o=t.length-1;r<o;++r){i+=t[r];let l=e[r];if(l instanceof bc){const a=l.createBehavior();l=l.createCSS(),a&&s.push(a)}l instanceof it||l instanceof CSSStyleSheet?(i.trim()!==""&&(n.push(i),i=""),n.push(l)):i+=l}return i+=t[t.length-1],i.trim()!==""&&n.push(i),{styles:n,behaviors:s}}function Rt(t,...e){const{styles:n,behaviors:i}=fh(t,e),s=it.create(n);return i.length&&s.withBehaviors(...i),s}class hh{constructor(e,n){this.target=e,this.propertyName=n}bind(e){e[this.propertyName]=this.target}unbind(){}}function xt(t){return new cc("fast-ref",hh,t)}const yc=t=>typeof t=="function",ph=()=>null;function ul(t){return t===void 0?ph:yc(t)?t:()=>t}function Sc(t,e,n){const i=yc(t)?t:()=>t,s=ul(e),r=ul(n);return(o,l)=>i(o,l)?s(o,l):r(o,l)}class gh{constructor(e,n){this.target=e,this.options=n,this.source=null}bind(e){const n=this.options.property;this.shouldUpdate=de.getAccessors(e).some(i=>i.name===n),this.source=e,this.updateTarget(this.computeNodes()),this.shouldUpdate&&this.observe()}unbind(){this.updateTarget(Kn),this.source=null,this.shouldUpdate&&this.disconnect()}handleEvent(){this.updateTarget(this.computeNodes())}computeNodes(){let e=this.getNodes();return this.options.filter!==void 0&&(e=e.filter(this.options.filter)),e}updateTarget(e){this.source[this.options.property]=e}}class vh extends gh{constructor(e,n){super(e,n)}observe(){this.target.addEventListener("slotchange",this)}disconnect(){this.target.removeEventListener("slotchange",this)}getNodes(){return this.target.assignedNodes(this.options)}}function ws(t){return typeof t=="string"&&(t={property:t}),new cc("fast-slotted",vh,t)}class io{handleStartContentChange(){this.startContainer.classList.toggle("start",this.start.assignedNodes().length>0)}handleEndContentChange(){this.endContainer.classList.toggle("end",this.end.assignedNodes().length>0)}}const so=(t,e)=>ct`
    <span
        part="end"
        ${xt("endContainer")}
        class=${n=>e.end?"end":void 0}
    >
        <slot name="end" ${xt("end")} @slotchange="${n=>n.handleEndContentChange()}">
            ${e.end||""}
        </slot>
    </span>
`,ro=(t,e)=>ct`
    <span
        part="start"
        ${xt("startContainer")}
        class="${n=>e.start?"start":void 0}"
    >
        <slot
            name="start"
            ${xt("start")}
            @slotchange="${n=>n.handleStartContentChange()}"
        >
            ${e.start||""}
        </slot>
    </span>
`;ct`
    <span part="end" ${xt("endContainer")}>
        <slot
            name="end"
            ${xt("end")}
            @slotchange="${t=>t.handleEndContentChange()}"
        ></slot>
    </span>
`;ct`
    <span part="start" ${xt("startContainer")}>
        <slot
            name="start"
            ${xt("start")}
            @slotchange="${t=>t.handleStartContentChange()}"
        ></slot>
    </span>
`;/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function P(t,e,n,i){var s=arguments.length,r=s<3?e:i===null?i=Object.getOwnPropertyDescriptor(e,n):i,o;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")r=Reflect.decorate(t,e,n,i);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(r=(s<3?o(r):s>3?o(e,n,r):o(e,n))||r);return s>3&&r&&Object.defineProperty(e,n,r),r}const Ys=new Map;"metadata"in Reflect||(Reflect.metadata=function(t,e){return function(n){Reflect.defineMetadata(t,e,n)}},Reflect.defineMetadata=function(t,e,n){let i=Ys.get(n);i===void 0&&Ys.set(n,i=new Map),i.set(t,e)},Reflect.getOwnMetadata=function(t,e){const n=Ys.get(e);if(n!==void 0)return n.get(t)});class mh{constructor(e,n){this.container=e,this.key=n}instance(e){return this.registerResolver(0,e)}singleton(e){return this.registerResolver(1,e)}transient(e){return this.registerResolver(2,e)}callback(e){return this.registerResolver(3,e)}cachedCallback(e){return this.registerResolver(3,wc(e))}aliasTo(e){return this.registerResolver(5,e)}registerResolver(e,n){const{container:i,key:s}=this;return this.container=this.key=void 0,i.registerResolver(s,new ht(s,e,n))}}function Vn(t){const e=t.slice(),n=Object.keys(t),i=n.length;let s;for(let r=0;r<i;++r)s=n[r],_c(s)||(e[s]=t[s]);return e}const bh=Object.freeze({none(t){throw Error(`${t.toString()} not registered, did you forget to add @singleton()?`)},singleton(t){return new ht(t,1,t)},transient(t){return new ht(t,2,t)}}),Gs=Object.freeze({default:Object.freeze({parentLocator:()=>null,responsibleForOwnerRequests:!1,defaultResolver:bh.singleton})}),dl=new Map;function fl(t){return e=>Reflect.getOwnMetadata(t,e)}let hl=null;const ke=Object.freeze({createContainer(t){return new ni(null,Object.assign({},Gs.default,t))},findResponsibleContainer(t){const e=t.$$container$$;return e&&e.responsibleForOwnerRequests?e:ke.findParentContainer(t)},findParentContainer(t){const e=new CustomEvent(xc,{bubbles:!0,composed:!0,cancelable:!0,detail:{container:void 0}});return t.dispatchEvent(e),e.detail.container||ke.getOrCreateDOMContainer()},getOrCreateDOMContainer(t,e){return t?t.$$container$$||new ni(t,Object.assign({},Gs.default,e,{parentLocator:ke.findParentContainer})):hl||(hl=new ni(null,Object.assign({},Gs.default,e,{parentLocator:()=>null})))},getDesignParamtypes:fl("design:paramtypes"),getAnnotationParamtypes:fl("di:paramtypes"),getOrCreateAnnotationParamTypes(t){let e=this.getAnnotationParamtypes(t);return e===void 0&&Reflect.defineMetadata("di:paramtypes",e=[],t),e},getDependencies(t){let e=dl.get(t);if(e===void 0){const n=t.inject;if(n===void 0){const i=ke.getDesignParamtypes(t),s=ke.getAnnotationParamtypes(t);if(i===void 0)if(s===void 0){const r=Object.getPrototypeOf(t);typeof r=="function"&&r!==Function.prototype?e=Vn(ke.getDependencies(r)):e=[]}else e=Vn(s);else if(s===void 0)e=Vn(i);else{e=Vn(i);let r=s.length,o;for(let u=0;u<r;++u)o=s[u],o!==void 0&&(e[u]=o);const l=Object.keys(s);r=l.length;let a;for(let u=0;u<r;++u)a=l[u],_c(a)||(e[a]=s[a])}}else e=Vn(n);dl.set(t,e)}return e},defineProperty(t,e,n,i=!1){const s=`$di_${e}`;Reflect.defineProperty(t,e,{get:function(){let r=this[s];if(r===void 0&&(r=(this instanceof HTMLElement?ke.findResponsibleContainer(this):ke.getOrCreateDOMContainer()).get(n),this[s]=r,i&&this instanceof xs)){const l=this.$fastController,a=()=>{const c=ke.findResponsibleContainer(this).get(n),h=this[s];c!==h&&(this[s]=r,l.notify(e))};l.subscribe({handleChange:a},"isConnected")}return r}})},createInterface(t,e){const n=typeof t=="function"?t:e,i=typeof t=="string"?t:t&&"friendlyName"in t&&t.friendlyName||ml,s=typeof t=="string"?!1:t&&"respectConnection"in t&&t.respectConnection||!1,r=function(o,l,a){if(o==null||new.target!==void 0)throw new Error(`No registration for interface: '${r.friendlyName}'`);if(l)ke.defineProperty(o,l,r,s);else{const u=ke.getOrCreateAnnotationParamTypes(o);u[a]=r}};return r.$isInterface=!0,r.friendlyName=i??"(anonymous)",n!=null&&(r.register=function(o,l){return n(new mh(o,l??r))}),r.toString=function(){return`InterfaceSymbol<${r.friendlyName}>`},r},inject(...t){return function(e,n,i){if(typeof i=="number"){const s=ke.getOrCreateAnnotationParamTypes(e),r=t[0];r!==void 0&&(s[i]=r)}else if(n)ke.defineProperty(e,n,t[0]);else{const s=i?ke.getOrCreateAnnotationParamTypes(i.value):ke.getOrCreateAnnotationParamTypes(e);let r;for(let o=0;o<t.length;++o)r=t[o],r!==void 0&&(s[o]=r)}}},transient(t){return t.register=function(n){return hi.transient(t,t).register(n)},t.registerInRequestor=!1,t},singleton(t,e=Sh){return t.register=function(i){return hi.singleton(t,t).register(i)},t.registerInRequestor=e.scoped,t}}),yh=ke.createInterface("Container");ke.inject;const Sh={scoped:!1};class ht{constructor(e,n,i){this.key=e,this.strategy=n,this.state=i,this.resolving=!1}get $isResolver(){return!0}register(e){return e.registerResolver(this.key,this)}resolve(e,n){switch(this.strategy){case 0:return this.state;case 1:{if(this.resolving)throw new Error(`Cyclic dependency found: ${this.state.name}`);return this.resolving=!0,this.state=e.getFactory(this.state).construct(n),this.strategy=0,this.resolving=!1,this.state}case 2:{const i=e.getFactory(this.state);if(i===null)throw new Error(`Resolver for ${String(this.key)} returned a null factory`);return i.construct(n)}case 3:return this.state(e,n,this);case 4:return this.state[0].resolve(e,n);case 5:return n.get(this.state);default:throw new Error(`Invalid resolver strategy specified: ${this.strategy}.`)}}getFactory(e){var n,i,s;switch(this.strategy){case 1:case 2:return e.getFactory(this.state);case 5:return(s=(i=(n=e.getResolver(this.state))===null||n===void 0?void 0:n.getFactory)===null||i===void 0?void 0:i.call(n,e))!==null&&s!==void 0?s:null;default:return null}}}function pl(t){return this.get(t)}function xh(t,e){return e(t)}class wh{constructor(e,n){this.Type=e,this.dependencies=n,this.transformers=null}construct(e,n){let i;return n===void 0?i=new this.Type(...this.dependencies.map(pl,e)):i=new this.Type(...this.dependencies.map(pl,e),...n),this.transformers==null?i:this.transformers.reduce(xh,i)}registerTransformer(e){(this.transformers||(this.transformers=[])).push(e)}}const _h={$isResolver:!0,resolve(t,e){return e}};function Mi(t){return typeof t.register=="function"}function Ch(t){return Mi(t)&&typeof t.registerInRequestor=="boolean"}function gl(t){return Ch(t)&&t.registerInRequestor}function kh(t){return t.prototype!==void 0}const Eh=new Set(["Array","ArrayBuffer","Boolean","DataView","Date","Error","EvalError","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Number","Object","Promise","RangeError","ReferenceError","RegExp","Set","SharedArrayBuffer","String","SyntaxError","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","URIError","WeakMap","WeakSet"]),xc="__DI_LOCATE_PARENT__",Js=new Map;class ni{constructor(e,n){this.owner=e,this.config=n,this._parent=void 0,this.registerDepth=0,this.context=null,e!==null&&(e.$$container$$=this),this.resolvers=new Map,this.resolvers.set(yh,_h),e instanceof Node&&e.addEventListener(xc,i=>{i.composedPath()[0]!==this.owner&&(i.detail.container=this,i.stopImmediatePropagation())})}get parent(){return this._parent===void 0&&(this._parent=this.config.parentLocator(this.owner)),this._parent}get depth(){return this.parent===null?0:this.parent.depth+1}get responsibleForOwnerRequests(){return this.config.responsibleForOwnerRequests}registerWithContext(e,...n){return this.context=e,this.register(...n),this.context=null,this}register(...e){if(++this.registerDepth===100)throw new Error("Unable to autoregister dependency");let n,i,s,r,o;const l=this.context;for(let a=0,u=e.length;a<u;++a)if(n=e[a],!!bl(n))if(Mi(n))n.register(this,l);else if(kh(n))hi.singleton(n,n).register(this);else for(i=Object.keys(n),r=0,o=i.length;r<o;++r)s=n[i[r]],bl(s)&&(Mi(s)?s.register(this,l):this.register(s));return--this.registerDepth,this}registerResolver(e,n){_i(e);const i=this.resolvers,s=i.get(e);return s==null?i.set(e,n):s instanceof ht&&s.strategy===4?s.state.push(n):i.set(e,new ht(e,4,[s,n])),n}registerTransformer(e,n){const i=this.getResolver(e);if(i==null)return!1;if(i.getFactory){const s=i.getFactory(this);return s==null?!1:(s.registerTransformer(n),!0)}return!1}getResolver(e,n=!0){if(_i(e),e.resolve!==void 0)return e;let i=this,s;for(;i!=null;)if(s=i.resolvers.get(e),s==null){if(i.parent==null){const r=gl(e)?this:i;return n?this.jitRegister(e,r):null}i=i.parent}else return s;return null}has(e,n=!1){return this.resolvers.has(e)?!0:n&&this.parent!=null?this.parent.has(e,!0):!1}get(e){if(_i(e),e.$isResolver)return e.resolve(this,this);let n=this,i;for(;n!=null;)if(i=n.resolvers.get(e),i==null){if(n.parent==null){const s=gl(e)?this:n;return i=this.jitRegister(e,s),i.resolve(n,this)}n=n.parent}else return i.resolve(n,this);throw new Error(`Unable to resolve key: ${String(e)}`)}getAll(e,n=!1){_i(e);const i=this;let s=i,r;if(n){let o=Kn;for(;s!=null;)r=s.resolvers.get(e),r!=null&&(o=o.concat(vl(r,s,i))),s=s.parent;return o}else for(;s!=null;)if(r=s.resolvers.get(e),r==null){if(s=s.parent,s==null)return Kn}else return vl(r,s,i);return Kn}getFactory(e){let n=Js.get(e);if(n===void 0){if($h(e))throw new Error(`${e.name} is a native function and therefore cannot be safely constructed by DI. If this is intentional, please use a callback or cachedCallback resolver.`);Js.set(e,n=new wh(e,ke.getDependencies(e)))}return n}registerFactory(e,n){Js.set(e,n)}createChild(e){return new ni(null,Object.assign({},this.config,e,{parentLocator:()=>this}))}jitRegister(e,n){if(typeof e!="function")throw new Error(`Attempted to jitRegister something that is not a constructor: '${e}'. Did you forget to register this dependency?`);if(Eh.has(e.name))throw new Error(`Attempted to jitRegister an intrinsic type: ${e.name}. Did you forget to add @inject(Key)`);if(Mi(e)){const i=e.register(n);if(!(i instanceof Object)||i.resolve==null){const s=n.resolvers.get(e);if(s!=null)return s;throw new Error("A valid resolver was not returned from the static register method")}return i}else{if(e.$isInterface)throw new Error(`Attempted to jitRegister an interface: ${e.friendlyName}`);{const i=this.config.defaultResolver(e,n);return n.resolvers.set(e,i),i}}}}const Qs=new WeakMap;function wc(t){return function(e,n,i){if(Qs.has(i))return Qs.get(i);const s=t(e,n,i);return Qs.set(i,s),s}}const hi=Object.freeze({instance(t,e){return new ht(t,0,e)},singleton(t,e){return new ht(t,1,e)},transient(t,e){return new ht(t,2,e)},callback(t,e){return new ht(t,3,e)},cachedCallback(t,e){return new ht(t,3,wc(e))},aliasTo(t,e){return new ht(e,5,t)}});function _i(t){if(t==null)throw new Error("key/value cannot be null or undefined. Are you trying to inject/register something that doesn't exist with DI?")}function vl(t,e,n){if(t instanceof ht&&t.strategy===4){const i=t.state;let s=i.length;const r=new Array(s);for(;s--;)r[s]=i[s].resolve(e,n);return r}return[t.resolve(e,n)]}const ml="(anonymous)";function bl(t){return typeof t=="object"&&t!==null||typeof t=="function"}const $h=function(){const t=new WeakMap;let e=!1,n="",i=0;return function(s){return e=t.get(s),e===void 0&&(n=s.toString(),i=n.length,e=i>=29&&i<=100&&n.charCodeAt(i-1)===125&&n.charCodeAt(i-2)<=32&&n.charCodeAt(i-3)===93&&n.charCodeAt(i-4)===101&&n.charCodeAt(i-5)===100&&n.charCodeAt(i-6)===111&&n.charCodeAt(i-7)===99&&n.charCodeAt(i-8)===32&&n.charCodeAt(i-9)===101&&n.charCodeAt(i-10)===118&&n.charCodeAt(i-11)===105&&n.charCodeAt(i-12)===116&&n.charCodeAt(i-13)===97&&n.charCodeAt(i-14)===110&&n.charCodeAt(i-15)===88,t.set(s,e)),e}}(),Ci={};function _c(t){switch(typeof t){case"number":return t>=0&&(t|0)===t;case"string":{const e=Ci[t];if(e!==void 0)return e;const n=t.length;if(n===0)return Ci[t]=!1;let i=0;for(let s=0;s<n;++s)if(i=t.charCodeAt(s),s===0&&i===48&&n>1||i<48||i>57)return Ci[t]=!1;return Ci[t]=!0}default:return!1}}function yl(t){return`${t.toLowerCase()}:presentation`}const ki=new Map,Cc=Object.freeze({define(t,e,n){const i=yl(t);ki.get(i)===void 0?ki.set(i,e):ki.set(i,!1),n.register(hi.instance(i,e))},forTag(t,e){const n=yl(t),i=ki.get(n);return i===!1?ke.findResponsibleContainer(e).get(n):i||null}});class Ih{constructor(e,n){this.template=e||null,this.styles=n===void 0?null:Array.isArray(n)?it.create(n):n instanceof it?n:it.create([n])}applyTo(e){const n=e.$fastController;n.template===null&&(n.template=this.template),n.styles===null&&(n.styles=this.styles)}}class vt extends xs{constructor(){super(...arguments),this._presentation=void 0}get $presentation(){return this._presentation===void 0&&(this._presentation=Cc.forTag(this.tagName,this)),this._presentation}templateChanged(){this.template!==void 0&&(this.$fastController.template=this.template)}stylesChanged(){this.styles!==void 0&&(this.$fastController.styles=this.styles)}connectedCallback(){this.$presentation!==null&&this.$presentation.applyTo(this),super.connectedCallback()}static compose(e){return(n={})=>new Oh(this===vt?class extends vt{}:this,e,n)}}P([ae],vt.prototype,"template",void 0);P([ae],vt.prototype,"styles",void 0);function Hn(t,e,n){return typeof t=="function"?t(e,n):t}class Oh{constructor(e,n,i){this.type=e,this.elementDefinition=n,this.overrideDefinition=i,this.definition=Object.assign(Object.assign({},this.elementDefinition),this.overrideDefinition)}register(e,n){const i=this.definition,s=this.overrideDefinition,o=`${i.prefix||n.elementPrefix}-${i.baseName}`;n.tryDefineElement({name:o,type:this.type,baseClass:this.elementDefinition.baseClass,callback:l=>{const a=new Ih(Hn(i.template,l,i),Hn(i.styles,l,i));l.definePresentation(a);let u=Hn(i.shadowOptions,l,i);l.shadowRootMode&&(u?s.shadowOptions||(u.mode=l.shadowRootMode):u!==null&&(u={mode:l.shadowRootMode})),l.defineElement({elementOptions:Hn(i.elementOptions,l,i),shadowOptions:u,attributes:Hn(i.attributes,l,i)})}})}}function sn(t,...e){const n=Xi.locate(t);e.forEach(i=>{Object.getOwnPropertyNames(i.prototype).forEach(r=>{r!=="constructor"&&Object.defineProperty(t.prototype,r,Object.getOwnPropertyDescriptor(i.prototype,r))}),Xi.locate(i).forEach(r=>n.push(r))})}const Rh={horizontal:"horizontal"};function Ah(t,e){let n=t.length;for(;n--;)if(e(t[n],n,t))return n;return-1}function Ph(){return!!(typeof window<"u"&&window.document&&window.document.createElement)}function Th(...t){return t.every(e=>e instanceof HTMLElement)}function Dh(){const t=document.querySelector('meta[property="csp-nonce"]');return t?t.getAttribute("content"):null}let an;function Mh(){if(typeof an=="boolean")return an;if(!Ph())return an=!1,an;const t=document.createElement("style"),e=Dh();e!==null&&t.setAttribute("nonce",e),document.head.appendChild(t);try{t.sheet.insertRule("foo:focus-visible {color:inherit}",0),an=!0}catch{an=!1}finally{document.head.removeChild(t)}return an}var Sl;(function(t){t[t.alt=18]="alt",t[t.arrowDown=40]="arrowDown",t[t.arrowLeft=37]="arrowLeft",t[t.arrowRight=39]="arrowRight",t[t.arrowUp=38]="arrowUp",t[t.back=8]="back",t[t.backSlash=220]="backSlash",t[t.break=19]="break",t[t.capsLock=20]="capsLock",t[t.closeBracket=221]="closeBracket",t[t.colon=186]="colon",t[t.colon2=59]="colon2",t[t.comma=188]="comma",t[t.ctrl=17]="ctrl",t[t.delete=46]="delete",t[t.end=35]="end",t[t.enter=13]="enter",t[t.equals=187]="equals",t[t.equals2=61]="equals2",t[t.equals3=107]="equals3",t[t.escape=27]="escape",t[t.forwardSlash=191]="forwardSlash",t[t.function1=112]="function1",t[t.function10=121]="function10",t[t.function11=122]="function11",t[t.function12=123]="function12",t[t.function2=113]="function2",t[t.function3=114]="function3",t[t.function4=115]="function4",t[t.function5=116]="function5",t[t.function6=117]="function6",t[t.function7=118]="function7",t[t.function8=119]="function8",t[t.function9=120]="function9",t[t.home=36]="home",t[t.insert=45]="insert",t[t.menu=93]="menu",t[t.minus=189]="minus",t[t.minus2=109]="minus2",t[t.numLock=144]="numLock",t[t.numPad0=96]="numPad0",t[t.numPad1=97]="numPad1",t[t.numPad2=98]="numPad2",t[t.numPad3=99]="numPad3",t[t.numPad4=100]="numPad4",t[t.numPad5=101]="numPad5",t[t.numPad6=102]="numPad6",t[t.numPad7=103]="numPad7",t[t.numPad8=104]="numPad8",t[t.numPad9=105]="numPad9",t[t.numPadDivide=111]="numPadDivide",t[t.numPadDot=110]="numPadDot",t[t.numPadMinus=109]="numPadMinus",t[t.numPadMultiply=106]="numPadMultiply",t[t.numPadPlus=107]="numPadPlus",t[t.openBracket=219]="openBracket",t[t.pageDown=34]="pageDown",t[t.pageUp=33]="pageUp",t[t.period=190]="period",t[t.print=44]="print",t[t.quote=222]="quote",t[t.scrollLock=145]="scrollLock",t[t.shift=16]="shift",t[t.space=32]="space",t[t.tab=9]="tab",t[t.tilde=192]="tilde",t[t.windowsLeft=91]="windowsLeft",t[t.windowsOpera=219]="windowsOpera",t[t.windowsRight=92]="windowsRight"})(Sl||(Sl={}));const oo="ArrowDown";const lo="ArrowUp",ao="Enter",co="Escape",uo="Home",fo="End";const _s=" ",ho="Tab";function Ei(t,e,n=0){return[e,n]=[e,n].sort((i,s)=>i-s),e<=t&&t<n}let Nh=0;function kc(t=""){return`${t}${Nh++}`}class $e{}P([j({attribute:"aria-atomic"})],$e.prototype,"ariaAtomic",void 0);P([j({attribute:"aria-busy"})],$e.prototype,"ariaBusy",void 0);P([j({attribute:"aria-controls"})],$e.prototype,"ariaControls",void 0);P([j({attribute:"aria-current"})],$e.prototype,"ariaCurrent",void 0);P([j({attribute:"aria-describedby"})],$e.prototype,"ariaDescribedby",void 0);P([j({attribute:"aria-details"})],$e.prototype,"ariaDetails",void 0);P([j({attribute:"aria-disabled"})],$e.prototype,"ariaDisabled",void 0);P([j({attribute:"aria-errormessage"})],$e.prototype,"ariaErrormessage",void 0);P([j({attribute:"aria-flowto"})],$e.prototype,"ariaFlowto",void 0);P([j({attribute:"aria-haspopup"})],$e.prototype,"ariaHaspopup",void 0);P([j({attribute:"aria-hidden"})],$e.prototype,"ariaHidden",void 0);P([j({attribute:"aria-invalid"})],$e.prototype,"ariaInvalid",void 0);P([j({attribute:"aria-keyshortcuts"})],$e.prototype,"ariaKeyshortcuts",void 0);P([j({attribute:"aria-label"})],$e.prototype,"ariaLabel",void 0);P([j({attribute:"aria-labelledby"})],$e.prototype,"ariaLabelledby",void 0);P([j({attribute:"aria-live"})],$e.prototype,"ariaLive",void 0);P([j({attribute:"aria-owns"})],$e.prototype,"ariaOwns",void 0);P([j({attribute:"aria-relevant"})],$e.prototype,"ariaRelevant",void 0);P([j({attribute:"aria-roledescription"})],$e.prototype,"ariaRoledescription",void 0);const Fh=(t,e)=>ct`
    <button
        class="control"
        part="control"
        ?autofocus="${n=>n.autofocus}"
        ?disabled="${n=>n.disabled}"
        form="${n=>n.formId}"
        formaction="${n=>n.formaction}"
        formenctype="${n=>n.formenctype}"
        formmethod="${n=>n.formmethod}"
        formnovalidate="${n=>n.formnovalidate}"
        formtarget="${n=>n.formtarget}"
        name="${n=>n.name}"
        type="${n=>n.type}"
        value="${n=>n.value}"
        aria-atomic="${n=>n.ariaAtomic}"
        aria-busy="${n=>n.ariaBusy}"
        aria-controls="${n=>n.ariaControls}"
        aria-current="${n=>n.ariaCurrent}"
        aria-describedby="${n=>n.ariaDescribedby}"
        aria-details="${n=>n.ariaDetails}"
        aria-disabled="${n=>n.ariaDisabled}"
        aria-errormessage="${n=>n.ariaErrormessage}"
        aria-expanded="${n=>n.ariaExpanded}"
        aria-flowto="${n=>n.ariaFlowto}"
        aria-haspopup="${n=>n.ariaHaspopup}"
        aria-hidden="${n=>n.ariaHidden}"
        aria-invalid="${n=>n.ariaInvalid}"
        aria-keyshortcuts="${n=>n.ariaKeyshortcuts}"
        aria-label="${n=>n.ariaLabel}"
        aria-labelledby="${n=>n.ariaLabelledby}"
        aria-live="${n=>n.ariaLive}"
        aria-owns="${n=>n.ariaOwns}"
        aria-pressed="${n=>n.ariaPressed}"
        aria-relevant="${n=>n.ariaRelevant}"
        aria-roledescription="${n=>n.ariaRoledescription}"
        ${xt("control")}
    >
        ${ro(t,e)}
        <span class="content" part="content">
            <slot ${ws("defaultSlottedContent")}></slot>
        </span>
        ${so(t,e)}
    </button>
`,xl="form-associated-proxy",wl="ElementInternals",_l=wl in window&&"setFormValue"in window[wl].prototype,Cl=new WeakMap;function po(t){const e=class extends t{constructor(...n){super(...n),this.dirtyValue=!1,this.disabled=!1,this.proxyEventsToBlock=["change","click"],this.proxyInitialized=!1,this.required=!1,this.initialValue=this.initialValue||"",this.elementInternals||(this.formResetCallback=this.formResetCallback.bind(this))}static get formAssociated(){return _l}get validity(){return this.elementInternals?this.elementInternals.validity:this.proxy.validity}get form(){return this.elementInternals?this.elementInternals.form:this.proxy.form}get validationMessage(){return this.elementInternals?this.elementInternals.validationMessage:this.proxy.validationMessage}get willValidate(){return this.elementInternals?this.elementInternals.willValidate:this.proxy.willValidate}get labels(){if(this.elementInternals)return Object.freeze(Array.from(this.elementInternals.labels));if(this.proxy instanceof HTMLElement&&this.proxy.ownerDocument&&this.id){const n=this.proxy.labels,i=Array.from(this.proxy.getRootNode().querySelectorAll(`[for='${this.id}']`)),s=n?i.concat(Array.from(n)):i;return Object.freeze(s)}else return Kn}valueChanged(n,i){this.dirtyValue=!0,this.proxy instanceof HTMLElement&&(this.proxy.value=this.value),this.currentValue=this.value,this.setFormValue(this.value),this.validate()}currentValueChanged(){this.value=this.currentValue}initialValueChanged(n,i){this.dirtyValue||(this.value=this.initialValue,this.dirtyValue=!1)}disabledChanged(n,i){this.proxy instanceof HTMLElement&&(this.proxy.disabled=this.disabled),he.queueUpdate(()=>this.classList.toggle("disabled",this.disabled))}nameChanged(n,i){this.proxy instanceof HTMLElement&&(this.proxy.name=this.name)}requiredChanged(n,i){this.proxy instanceof HTMLElement&&(this.proxy.required=this.required),he.queueUpdate(()=>this.classList.toggle("required",this.required)),this.validate()}get elementInternals(){if(!_l)return null;let n=Cl.get(this);return n||(n=this.attachInternals(),Cl.set(this,n)),n}connectedCallback(){super.connectedCallback(),this.addEventListener("keypress",this._keypressHandler),this.value||(this.value=this.initialValue,this.dirtyValue=!1),this.elementInternals||(this.attachProxy(),this.form&&this.form.addEventListener("reset",this.formResetCallback))}disconnectedCallback(){super.disconnectedCallback(),this.proxyEventsToBlock.forEach(n=>this.proxy.removeEventListener(n,this.stopPropagation)),!this.elementInternals&&this.form&&this.form.removeEventListener("reset",this.formResetCallback)}checkValidity(){return this.elementInternals?this.elementInternals.checkValidity():this.proxy.checkValidity()}reportValidity(){return this.elementInternals?this.elementInternals.reportValidity():this.proxy.reportValidity()}setValidity(n,i,s){this.elementInternals?this.elementInternals.setValidity(n,i,s):typeof i=="string"&&this.proxy.setCustomValidity(i)}formDisabledCallback(n){this.disabled=n}formResetCallback(){this.value=this.initialValue,this.dirtyValue=!1}attachProxy(){var n;this.proxyInitialized||(this.proxyInitialized=!0,this.proxy.style.display="none",this.proxyEventsToBlock.forEach(i=>this.proxy.addEventListener(i,this.stopPropagation)),this.proxy.disabled=this.disabled,this.proxy.required=this.required,typeof this.name=="string"&&(this.proxy.name=this.name),typeof this.value=="string"&&(this.proxy.value=this.value),this.proxy.setAttribute("slot",xl),this.proxySlot=document.createElement("slot"),this.proxySlot.setAttribute("name",xl)),(n=this.shadowRoot)===null||n===void 0||n.appendChild(this.proxySlot),this.appendChild(this.proxy)}detachProxy(){var n;this.removeChild(this.proxy),(n=this.shadowRoot)===null||n===void 0||n.removeChild(this.proxySlot)}validate(n){this.proxy instanceof HTMLElement&&this.setValidity(this.proxy.validity,this.proxy.validationMessage,n)}setFormValue(n,i){this.elementInternals&&this.elementInternals.setFormValue(n,i||n)}_keypressHandler(n){switch(n.key){case ao:if(this.form instanceof HTMLFormElement){const i=this.form.querySelector("[type=submit]");i==null||i.click()}break}}stopPropagation(n){n.stopPropagation()}};return j({mode:"boolean"})(e.prototype,"disabled"),j({mode:"fromView",attribute:"value"})(e.prototype,"initialValue"),j({attribute:"current-value"})(e.prototype,"currentValue"),j(e.prototype,"name"),j({mode:"boolean"})(e.prototype,"required"),ae(e.prototype,"value"),e}function Lh(t){class e extends po(t){}class n extends e{constructor(...s){super(s),this.dirtyChecked=!1,this.checkedAttribute=!1,this.checked=!1,this.dirtyChecked=!1}checkedAttributeChanged(){this.defaultChecked=this.checkedAttribute}defaultCheckedChanged(){this.dirtyChecked||(this.checked=this.defaultChecked,this.dirtyChecked=!1)}checkedChanged(s,r){this.dirtyChecked||(this.dirtyChecked=!0),this.currentChecked=this.checked,this.updateForm(),this.proxy instanceof HTMLInputElement&&(this.proxy.checked=this.checked),s!==void 0&&this.$emit("change"),this.validate()}currentCheckedChanged(s,r){this.checked=this.currentChecked}updateForm(){const s=this.checked?this.value:null;this.setFormValue(s,s)}connectedCallback(){super.connectedCallback(),this.updateForm()}formResetCallback(){super.formResetCallback(),this.checked=!!this.checkedAttribute,this.dirtyChecked=!1}}return j({attribute:"checked",mode:"boolean"})(n.prototype,"checkedAttribute"),j({attribute:"current-checked",converter:vc})(n.prototype,"currentChecked"),ae(n.prototype,"defaultChecked"),ae(n.prototype,"checked"),n}class Bh extends vt{}class Vh extends po(Bh){constructor(){super(...arguments),this.proxy=document.createElement("input")}}let wt=class extends Vh{constructor(){super(...arguments),this.handleClick=e=>{var n;this.disabled&&((n=this.defaultSlottedContent)===null||n===void 0?void 0:n.length)<=1&&e.stopPropagation()},this.handleSubmission=()=>{if(!this.form)return;const e=this.proxy.isConnected;e||this.attachProxy(),typeof this.form.requestSubmit=="function"?this.form.requestSubmit(this.proxy):this.proxy.click(),e||this.detachProxy()},this.handleFormReset=()=>{var e;(e=this.form)===null||e===void 0||e.reset()},this.handleUnsupportedDelegatesFocus=()=>{var e;window.ShadowRoot&&!window.ShadowRoot.prototype.hasOwnProperty("delegatesFocus")&&(!((e=this.$fastController.definition.shadowOptions)===null||e===void 0)&&e.delegatesFocus)&&(this.focus=()=>{this.control.focus()})}}formactionChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formAction=this.formaction)}formenctypeChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formEnctype=this.formenctype)}formmethodChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formMethod=this.formmethod)}formnovalidateChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formNoValidate=this.formnovalidate)}formtargetChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formTarget=this.formtarget)}typeChanged(e,n){this.proxy instanceof HTMLInputElement&&(this.proxy.type=this.type),n==="submit"&&this.addEventListener("click",this.handleSubmission),e==="submit"&&this.removeEventListener("click",this.handleSubmission),n==="reset"&&this.addEventListener("click",this.handleFormReset),e==="reset"&&this.removeEventListener("click",this.handleFormReset)}validate(){super.validate(this.control)}connectedCallback(){var e;super.connectedCallback(),this.proxy.setAttribute("type",this.type),this.handleUnsupportedDelegatesFocus();const n=Array.from((e=this.control)===null||e===void 0?void 0:e.children);n&&n.forEach(i=>{i.addEventListener("click",this.handleClick)})}disconnectedCallback(){var e;super.disconnectedCallback();const n=Array.from((e=this.control)===null||e===void 0?void 0:e.children);n&&n.forEach(i=>{i.removeEventListener("click",this.handleClick)})}};P([j({mode:"boolean"})],wt.prototype,"autofocus",void 0);P([j({attribute:"form"})],wt.prototype,"formId",void 0);P([j],wt.prototype,"formaction",void 0);P([j],wt.prototype,"formenctype",void 0);P([j],wt.prototype,"formmethod",void 0);P([j({mode:"boolean"})],wt.prototype,"formnovalidate",void 0);P([j],wt.prototype,"formtarget",void 0);P([j],wt.prototype,"type",void 0);P([ae],wt.prototype,"defaultSlottedContent",void 0);class Cs{}P([j({attribute:"aria-expanded"})],Cs.prototype,"ariaExpanded",void 0);P([j({attribute:"aria-pressed"})],Cs.prototype,"ariaPressed",void 0);sn(Cs,$e);sn(wt,io,Cs);const Hh=(t,e)=>ct`
    <template
        role="checkbox"
        aria-checked="${n=>n.checked}"
        aria-required="${n=>n.required}"
        aria-disabled="${n=>n.disabled}"
        aria-readonly="${n=>n.readOnly}"
        tabindex="${n=>n.disabled?null:0}"
        @keypress="${(n,i)=>n.keypressHandler(i.event)}"
        @click="${(n,i)=>n.clickHandler(i.event)}"
        class="${n=>n.readOnly?"readonly":""} ${n=>n.checked?"checked":""} ${n=>n.indeterminate?"indeterminate":""}"
    >
        <div part="control" class="control">
            <slot name="checked-indicator">
                ${e.checkedIndicator||""}
            </slot>
            <slot name="indeterminate-indicator">
                ${e.indeterminateIndicator||""}
            </slot>
        </div>
        <label
            part="label"
            class="${n=>n.defaultSlottedNodes&&n.defaultSlottedNodes.length?"label":"label label__hidden"}"
        >
            <slot ${ws("defaultSlottedNodes")}></slot>
        </label>
    </template>
`;class jh extends vt{}class Uh extends Lh(jh){constructor(){super(...arguments),this.proxy=document.createElement("input")}}let ks=class extends Uh{constructor(){super(),this.initialValue="on",this.indeterminate=!1,this.keypressHandler=e=>{if(!this.readOnly)switch(e.key){case _s:this.indeterminate&&(this.indeterminate=!1),this.checked=!this.checked;break}},this.clickHandler=e=>{!this.disabled&&!this.readOnly&&(this.indeterminate&&(this.indeterminate=!1),this.checked=!this.checked)},this.proxy.setAttribute("type","checkbox")}readOnlyChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.readOnly=this.readOnly)}};P([j({attribute:"readonly",mode:"boolean"})],ks.prototype,"readOnly",void 0);P([ae],ks.prototype,"defaultSlottedNodes",void 0);P([ae],ks.prototype,"indeterminate",void 0);function Ec(t){return Th(t)&&(t.getAttribute("role")==="option"||t instanceof HTMLOptionElement)}class Wt extends vt{constructor(e,n,i,s){super(),this.defaultSelected=!1,this.dirtySelected=!1,this.selected=this.defaultSelected,this.dirtyValue=!1,e&&(this.textContent=e),n&&(this.initialValue=n),i&&(this.defaultSelected=i),s&&(this.selected=s),this.proxy=new Option(`${this.textContent}`,this.initialValue,this.defaultSelected,this.selected),this.proxy.disabled=this.disabled}checkedChanged(e,n){if(typeof n=="boolean"){this.ariaChecked=n?"true":"false";return}this.ariaChecked=null}contentChanged(e,n){this.proxy instanceof HTMLOptionElement&&(this.proxy.textContent=this.textContent),this.$emit("contentchange",null,{bubbles:!0})}defaultSelectedChanged(){this.dirtySelected||(this.selected=this.defaultSelected,this.proxy instanceof HTMLOptionElement&&(this.proxy.selected=this.defaultSelected))}disabledChanged(e,n){this.ariaDisabled=this.disabled?"true":"false",this.proxy instanceof HTMLOptionElement&&(this.proxy.disabled=this.disabled)}selectedAttributeChanged(){this.defaultSelected=this.selectedAttribute,this.proxy instanceof HTMLOptionElement&&(this.proxy.defaultSelected=this.defaultSelected)}selectedChanged(){this.ariaSelected=this.selected?"true":"false",this.dirtySelected||(this.dirtySelected=!0),this.proxy instanceof HTMLOptionElement&&(this.proxy.selected=this.selected)}initialValueChanged(e,n){this.dirtyValue||(this.value=this.initialValue,this.dirtyValue=!1)}get label(){var e;return(e=this.value)!==null&&e!==void 0?e:this.text}get text(){var e,n;return(n=(e=this.textContent)===null||e===void 0?void 0:e.replace(/\s+/g," ").trim())!==null&&n!==void 0?n:""}set value(e){const n=`${e??""}`;this._value=n,this.dirtyValue=!0,this.proxy instanceof HTMLOptionElement&&(this.proxy.value=n),de.notify(this,"value")}get value(){var e;return de.track(this,"value"),(e=this._value)!==null&&e!==void 0?e:this.text}get form(){return this.proxy?this.proxy.form:null}}P([ae],Wt.prototype,"checked",void 0);P([ae],Wt.prototype,"content",void 0);P([ae],Wt.prototype,"defaultSelected",void 0);P([j({mode:"boolean"})],Wt.prototype,"disabled",void 0);P([j({attribute:"selected",mode:"boolean"})],Wt.prototype,"selectedAttribute",void 0);P([ae],Wt.prototype,"selected",void 0);P([j({attribute:"value",mode:"fromView"})],Wt.prototype,"initialValue",void 0);class Rn{}P([ae],Rn.prototype,"ariaChecked",void 0);P([ae],Rn.prototype,"ariaPosInSet",void 0);P([ae],Rn.prototype,"ariaSelected",void 0);P([ae],Rn.prototype,"ariaSetSize",void 0);sn(Rn,$e);sn(Wt,io,Rn);class et extends vt{constructor(){super(...arguments),this._options=[],this.selectedIndex=-1,this.selectedOptions=[],this.shouldSkipFocus=!1,this.typeaheadBuffer="",this.typeaheadExpired=!0,this.typeaheadTimeout=-1}get firstSelectedOption(){var e;return(e=this.selectedOptions[0])!==null&&e!==void 0?e:null}get hasSelectableOptions(){return this.options.length>0&&!this.options.every(e=>e.disabled)}get length(){var e,n;return(n=(e=this.options)===null||e===void 0?void 0:e.length)!==null&&n!==void 0?n:0}get options(){return de.track(this,"options"),this._options}set options(e){this._options=e,de.notify(this,"options")}get typeAheadExpired(){return this.typeaheadExpired}set typeAheadExpired(e){this.typeaheadExpired=e}clickHandler(e){const n=e.target.closest("option,[role=option]");if(n&&!n.disabled)return this.selectedIndex=this.options.indexOf(n),!0}focusAndScrollOptionIntoView(e=this.firstSelectedOption){this.contains(document.activeElement)&&e!==null&&(e.focus(),requestAnimationFrame(()=>{e.scrollIntoView({block:"nearest"})}))}focusinHandler(e){!this.shouldSkipFocus&&e.target===e.currentTarget&&(this.setSelectedOptions(),this.focusAndScrollOptionIntoView()),this.shouldSkipFocus=!1}getTypeaheadMatches(){const e=this.typeaheadBuffer.replace(/[.*+\-?^${}()|[\]\\]/g,"\\$&"),n=new RegExp(`^${e}`,"gi");return this.options.filter(i=>i.text.trim().match(n))}getSelectableIndex(e=this.selectedIndex,n){const i=e>n?-1:e<n?1:0,s=e+i;let r=null;switch(i){case-1:{r=this.options.reduceRight((o,l,a)=>!o&&!l.disabled&&a<s?l:o,r);break}case 1:{r=this.options.reduce((o,l,a)=>!o&&!l.disabled&&a>s?l:o,r);break}}return this.options.indexOf(r)}handleChange(e,n){switch(n){case"selected":{et.slottedOptionFilter(e)&&(this.selectedIndex=this.options.indexOf(e)),this.setSelectedOptions();break}}}handleTypeAhead(e){this.typeaheadTimeout&&window.clearTimeout(this.typeaheadTimeout),this.typeaheadTimeout=window.setTimeout(()=>this.typeaheadExpired=!0,et.TYPE_AHEAD_TIMEOUT_MS),!(e.length>1)&&(this.typeaheadBuffer=`${this.typeaheadExpired?"":this.typeaheadBuffer}${e}`)}keydownHandler(e){if(this.disabled)return!0;this.shouldSkipFocus=!1;const n=e.key;switch(n){case uo:{e.shiftKey||(e.preventDefault(),this.selectFirstOption());break}case oo:{e.shiftKey||(e.preventDefault(),this.selectNextOption());break}case lo:{e.shiftKey||(e.preventDefault(),this.selectPreviousOption());break}case fo:{e.preventDefault(),this.selectLastOption();break}case ho:return this.focusAndScrollOptionIntoView(),!0;case ao:case co:return!0;case _s:if(this.typeaheadExpired)return!0;default:return n.length===1&&this.handleTypeAhead(`${n}`),!0}}mousedownHandler(e){return this.shouldSkipFocus=!this.contains(document.activeElement),!0}multipleChanged(e,n){this.ariaMultiSelectable=n?"true":null}selectedIndexChanged(e,n){var i;if(!this.hasSelectableOptions){this.selectedIndex=-1;return}if(!((i=this.options[this.selectedIndex])===null||i===void 0)&&i.disabled&&typeof e=="number"){const s=this.getSelectableIndex(e,n),r=s>-1?s:e;this.selectedIndex=r,n===r&&this.selectedIndexChanged(n,r);return}this.setSelectedOptions()}selectedOptionsChanged(e,n){var i;const s=n.filter(et.slottedOptionFilter);(i=this.options)===null||i===void 0||i.forEach(r=>{const o=de.getNotifier(r);o.unsubscribe(this,"selected"),r.selected=s.includes(r),o.subscribe(this,"selected")})}selectFirstOption(){var e,n;this.disabled||(this.selectedIndex=(n=(e=this.options)===null||e===void 0?void 0:e.findIndex(i=>!i.disabled))!==null&&n!==void 0?n:-1)}selectLastOption(){this.disabled||(this.selectedIndex=Ah(this.options,e=>!e.disabled))}selectNextOption(){!this.disabled&&this.selectedIndex<this.options.length-1&&(this.selectedIndex+=1)}selectPreviousOption(){!this.disabled&&this.selectedIndex>0&&(this.selectedIndex=this.selectedIndex-1)}setDefaultSelectedOption(){var e,n;this.selectedIndex=(n=(e=this.options)===null||e===void 0?void 0:e.findIndex(i=>i.defaultSelected))!==null&&n!==void 0?n:-1}setSelectedOptions(){var e,n,i;!((e=this.options)===null||e===void 0)&&e.length&&(this.selectedOptions=[this.options[this.selectedIndex]],this.ariaActiveDescendant=(i=(n=this.firstSelectedOption)===null||n===void 0?void 0:n.id)!==null&&i!==void 0?i:"",this.focusAndScrollOptionIntoView())}slottedOptionsChanged(e,n){this.options=n.reduce((s,r)=>(Ec(r)&&s.push(r),s),[]);const i=`${this.options.length}`;this.options.forEach((s,r)=>{s.id||(s.id=kc("option-")),s.ariaPosInSet=`${r+1}`,s.ariaSetSize=i}),this.$fastController.isConnected&&(this.setSelectedOptions(),this.setDefaultSelectedOption())}typeaheadBufferChanged(e,n){if(this.$fastController.isConnected){const i=this.getTypeaheadMatches();if(i.length){const s=this.options.indexOf(i[0]);s>-1&&(this.selectedIndex=s)}this.typeaheadExpired=!1}}}et.slottedOptionFilter=t=>Ec(t)&&!t.hidden;et.TYPE_AHEAD_TIMEOUT_MS=1e3;P([j({mode:"boolean"})],et.prototype,"disabled",void 0);P([ae],et.prototype,"selectedIndex",void 0);P([ae],et.prototype,"selectedOptions",void 0);P([ae],et.prototype,"slottedOptions",void 0);P([ae],et.prototype,"typeaheadBuffer",void 0);class hn{}P([ae],hn.prototype,"ariaActiveDescendant",void 0);P([ae],hn.prototype,"ariaDisabled",void 0);P([ae],hn.prototype,"ariaExpanded",void 0);P([ae],hn.prototype,"ariaMultiSelectable",void 0);sn(hn,$e);sn(et,hn);const Xs={above:"above",below:"below"};function Cr(t){const e=t.parentElement;if(e)return e;{const n=t.getRootNode();if(n.host instanceof HTMLElement)return n.host}return null}function zh(t,e){let n=e;for(;n!==null;){if(n===t)return!0;n=Cr(n)}return!1}const Ft=document.createElement("div");function qh(t){return t instanceof xs}class go{setProperty(e,n){he.queueUpdate(()=>this.target.setProperty(e,n))}removeProperty(e){he.queueUpdate(()=>this.target.removeProperty(e))}}class Wh extends go{constructor(e){super();const n=new CSSStyleSheet;n[fc]=!0,this.target=n.cssRules[n.insertRule(":host{}")].style,e.$fastController.addStyles(it.create([n]))}}class Yh extends go{constructor(){super();const e=new CSSStyleSheet;this.target=e.cssRules[e.insertRule(":root{}")].style,document.adoptedStyleSheets=[...document.adoptedStyleSheets,e]}}class Gh extends go{constructor(){super(),this.style=document.createElement("style"),document.head.appendChild(this.style);const{sheet:e}=this.style;if(e){const n=e.insertRule(":root{}",e.cssRules.length);this.target=e.cssRules[n].style}}}class $c{constructor(e){this.store=new Map,this.target=null;const n=e.$fastController;this.style=document.createElement("style"),n.addStyles(this.style),de.getNotifier(n).subscribe(this,"isConnected"),this.handleChange(n,"isConnected")}targetChanged(){if(this.target!==null)for(const[e,n]of this.store.entries())this.target.setProperty(e,n)}setProperty(e,n){this.store.set(e,n),he.queueUpdate(()=>{this.target!==null&&this.target.setProperty(e,n)})}removeProperty(e){this.store.delete(e),he.queueUpdate(()=>{this.target!==null&&this.target.removeProperty(e)})}handleChange(e,n){const{sheet:i}=this.style;if(i){const s=i.insertRule(":host{}",i.cssRules.length);this.target=i.cssRules[s].style}else this.target=null}}P([ae],$c.prototype,"target",void 0);class Jh{constructor(e){this.target=e.style}setProperty(e,n){he.queueUpdate(()=>this.target.setProperty(e,n))}removeProperty(e){he.queueUpdate(()=>this.target.removeProperty(e))}}class Be{setProperty(e,n){Be.properties[e]=n;for(const i of Be.roots.values())yn.getOrCreate(Be.normalizeRoot(i)).setProperty(e,n)}removeProperty(e){delete Be.properties[e];for(const n of Be.roots.values())yn.getOrCreate(Be.normalizeRoot(n)).removeProperty(e)}static registerRoot(e){const{roots:n}=Be;if(!n.has(e)){n.add(e);const i=yn.getOrCreate(this.normalizeRoot(e));for(const s in Be.properties)i.setProperty(s,Be.properties[s])}}static unregisterRoot(e){const{roots:n}=Be;if(n.has(e)){n.delete(e);const i=yn.getOrCreate(Be.normalizeRoot(e));for(const s in Be.properties)i.removeProperty(s)}}static normalizeRoot(e){return e===Ft?document:e}}Be.roots=new Set;Be.properties={};const Zs=new WeakMap,Qh=he.supportsAdoptedStyleSheets?Wh:$c,yn=Object.freeze({getOrCreate(t){if(Zs.has(t))return Zs.get(t);let e;return t===Ft?e=new Be:t instanceof Document?e=he.supportsAdoptedStyleSheets?new Yh:new Gh:qh(t)?e=new Qh(t):e=new Jh(t),Zs.set(t,e),e}});class Ke extends bc{constructor(e){super(),this.subscribers=new WeakMap,this._appliedTo=new Set,this.name=e.name,e.cssCustomPropertyName!==null&&(this.cssCustomProperty=`--${e.cssCustomPropertyName}`,this.cssVar=`var(${this.cssCustomProperty})`),this.id=Ke.uniqueId(),Ke.tokensById.set(this.id,this)}get appliedTo(){return[...this._appliedTo]}static from(e){return new Ke({name:typeof e=="string"?e:e.name,cssCustomPropertyName:typeof e=="string"?e:e.cssCustomPropertyName===void 0?e.name:e.cssCustomPropertyName})}static isCSSDesignToken(e){return typeof e.cssCustomProperty=="string"}static isDerivedDesignTokenValue(e){return typeof e=="function"}static getTokenById(e){return Ke.tokensById.get(e)}getOrCreateSubscriberSet(e=this){return this.subscribers.get(e)||this.subscribers.set(e,new Set)&&this.subscribers.get(e)}createCSS(){return this.cssVar||""}getValueFor(e){const n=Re.getOrCreate(e).get(this);if(n!==void 0)return n;throw new Error(`Value could not be retrieved for token named "${this.name}". Ensure the value is set for ${e} or an ancestor of ${e}.`)}setValueFor(e,n){return this._appliedTo.add(e),n instanceof Ke&&(n=this.alias(n)),Re.getOrCreate(e).set(this,n),this}deleteValueFor(e){return this._appliedTo.delete(e),Re.existsFor(e)&&Re.getOrCreate(e).delete(this),this}withDefault(e){return this.setValueFor(Ft,e),this}subscribe(e,n){const i=this.getOrCreateSubscriberSet(n);n&&!Re.existsFor(n)&&Re.getOrCreate(n),i.has(e)||i.add(e)}unsubscribe(e,n){const i=this.subscribers.get(n||this);i&&i.has(e)&&i.delete(e)}notify(e){const n=Object.freeze({token:this,target:e});this.subscribers.has(this)&&this.subscribers.get(this).forEach(i=>i.handleChange(n)),this.subscribers.has(e)&&this.subscribers.get(e).forEach(i=>i.handleChange(n))}alias(e){return n=>e.getValueFor(n)}}Ke.uniqueId=(()=>{let t=0;return()=>(t++,t.toString(16))})();Ke.tokensById=new Map;class Xh{startReflection(e,n){e.subscribe(this,n),this.handleChange({token:e,target:n})}stopReflection(e,n){e.unsubscribe(this,n),this.remove(e,n)}handleChange(e){const{token:n,target:i}=e;this.add(n,i)}add(e,n){yn.getOrCreate(n).setProperty(e.cssCustomProperty,this.resolveCSSValue(Re.getOrCreate(n).get(e)))}remove(e,n){yn.getOrCreate(n).removeProperty(e.cssCustomProperty)}resolveCSSValue(e){return e&&typeof e.createCSS=="function"?e.createCSS():e}}class Zh{constructor(e,n,i){this.source=e,this.token=n,this.node=i,this.dependencies=new Set,this.observer=de.binding(e,this,!1),this.observer.handleChange=this.observer.call,this.handleChange()}disconnect(){this.observer.disconnect()}handleChange(){try{this.node.store.set(this.token,this.observer.observe(this.node.target,ti))}catch(e){console.error(e)}}}class Kh{constructor(){this.values=new Map}set(e,n){this.values.get(e)!==n&&(this.values.set(e,n),de.getNotifier(this).notify(e.id))}get(e){return de.track(this,e.id),this.values.get(e)}delete(e){this.values.delete(e),de.getNotifier(this).notify(e.id)}all(){return this.values.entries()}}const jn=new WeakMap,Un=new WeakMap;class Re{constructor(e){this.target=e,this.store=new Kh,this.children=[],this.assignedValues=new Map,this.reflecting=new Set,this.bindingObservers=new Map,this.tokenValueChangeHandler={handleChange:(n,i)=>{const s=Ke.getTokenById(i);s&&(s.notify(this.target),this.updateCSSTokenReflection(n,s))}},jn.set(e,this),de.getNotifier(this.store).subscribe(this.tokenValueChangeHandler),e instanceof xs?e.$fastController.addBehaviors([this]):e.isConnected&&this.bind()}static getOrCreate(e){return jn.get(e)||new Re(e)}static existsFor(e){return jn.has(e)}static findParent(e){if(Ft!==e.target){let n=Cr(e.target);for(;n!==null;){if(jn.has(n))return jn.get(n);n=Cr(n)}return Re.getOrCreate(Ft)}return null}static findClosestAssignedNode(e,n){let i=n;do{if(i.has(e))return i;i=i.parent?i.parent:i.target!==Ft?Re.getOrCreate(Ft):null}while(i!==null);return null}get parent(){return Un.get(this)||null}updateCSSTokenReflection(e,n){if(Ke.isCSSDesignToken(n)){const i=this.parent,s=this.isReflecting(n);if(i){const r=i.get(n),o=e.get(n);r!==o&&!s?this.reflectToCSS(n):r===o&&s&&this.stopReflectToCSS(n)}else s||this.reflectToCSS(n)}}has(e){return this.assignedValues.has(e)}get(e){const n=this.store.get(e);if(n!==void 0)return n;const i=this.getRaw(e);if(i!==void 0)return this.hydrate(e,i),this.get(e)}getRaw(e){var n;return this.assignedValues.has(e)?this.assignedValues.get(e):(n=Re.findClosestAssignedNode(e,this))===null||n===void 0?void 0:n.getRaw(e)}set(e,n){Ke.isDerivedDesignTokenValue(this.assignedValues.get(e))&&this.tearDownBindingObserver(e),this.assignedValues.set(e,n),Ke.isDerivedDesignTokenValue(n)?this.setupBindingObserver(e,n):this.store.set(e,n)}delete(e){this.assignedValues.delete(e),this.tearDownBindingObserver(e);const n=this.getRaw(e);n?this.hydrate(e,n):this.store.delete(e)}bind(){const e=Re.findParent(this);e&&e.appendChild(this);for(const n of this.assignedValues.keys())n.notify(this.target)}unbind(){this.parent&&Un.get(this).removeChild(this);for(const e of this.bindingObservers.keys())this.tearDownBindingObserver(e)}appendChild(e){e.parent&&Un.get(e).removeChild(e);const n=this.children.filter(i=>e.contains(i));Un.set(e,this),this.children.push(e),n.forEach(i=>e.appendChild(i)),de.getNotifier(this.store).subscribe(e);for(const[i,s]of this.store.all())e.hydrate(i,this.bindingObservers.has(i)?this.getRaw(i):s),e.updateCSSTokenReflection(e.store,i)}removeChild(e){const n=this.children.indexOf(e);if(n!==-1&&this.children.splice(n,1),de.getNotifier(this.store).unsubscribe(e),e.parent!==this)return!1;const i=Un.delete(e);for(const[s]of this.store.all())e.hydrate(s,e.getRaw(s)),e.updateCSSTokenReflection(e.store,s);return i}contains(e){return zh(this.target,e.target)}reflectToCSS(e){this.isReflecting(e)||(this.reflecting.add(e),Re.cssCustomPropertyReflector.startReflection(e,this.target))}stopReflectToCSS(e){this.isReflecting(e)&&(this.reflecting.delete(e),Re.cssCustomPropertyReflector.stopReflection(e,this.target))}isReflecting(e){return this.reflecting.has(e)}handleChange(e,n){const i=Ke.getTokenById(n);i&&(this.hydrate(i,this.getRaw(i)),this.updateCSSTokenReflection(this.store,i))}hydrate(e,n){if(!this.has(e)){const i=this.bindingObservers.get(e);Ke.isDerivedDesignTokenValue(n)?i?i.source!==n&&(this.tearDownBindingObserver(e),this.setupBindingObserver(e,n)):this.setupBindingObserver(e,n):(i&&this.tearDownBindingObserver(e),this.store.set(e,n))}}setupBindingObserver(e,n){const i=new Zh(n,e,this);return this.bindingObservers.set(e,i),i}tearDownBindingObserver(e){return this.bindingObservers.has(e)?(this.bindingObservers.get(e).disconnect(),this.bindingObservers.delete(e),!0):!1}}Re.cssCustomPropertyReflector=new Xh;P([ae],Re.prototype,"children",void 0);function ep(t){return Ke.from(t)}const Ic=Object.freeze({create:ep,notifyConnection(t){return!t.isConnected||!Re.existsFor(t)?!1:(Re.getOrCreate(t).bind(),!0)},notifyDisconnection(t){return t.isConnected||!Re.existsFor(t)?!1:(Re.getOrCreate(t).unbind(),!0)},registerRoot(t=Ft){Be.registerRoot(t)},unregisterRoot(t=Ft){Be.unregisterRoot(t)}}),Ks=Object.freeze({definitionCallbackOnly:null,ignoreDuplicate:Symbol()}),er=new Map,Ni=new Map;let Cn=null;const zn=ke.createInterface(t=>t.cachedCallback(e=>(Cn===null&&(Cn=new Rc(null,e)),Cn))),Oc=Object.freeze({tagFor(t){return Ni.get(t)},responsibleFor(t){const e=t.$$designSystem$$;return e||ke.findResponsibleContainer(t).get(zn)},getOrCreate(t){if(!t)return Cn===null&&(Cn=ke.getOrCreateDOMContainer().get(zn)),Cn;const e=t.$$designSystem$$;if(e)return e;const n=ke.getOrCreateDOMContainer(t);if(n.has(zn,!1))return n.get(zn);{const i=new Rc(t,n);return n.register(hi.instance(zn,i)),i}}});function tp(t,e,n){return typeof t=="string"?{name:t,type:e,callback:n}:t}class Rc{constructor(e,n){this.owner=e,this.container=n,this.designTokensInitialized=!1,this.prefix="fast",this.shadowRootMode=void 0,this.disambiguate=()=>Ks.definitionCallbackOnly,e!==null&&(e.$$designSystem$$=this)}withPrefix(e){return this.prefix=e,this}withShadowRootMode(e){return this.shadowRootMode=e,this}withElementDisambiguation(e){return this.disambiguate=e,this}withDesignTokenRoot(e){return this.designTokenRoot=e,this}register(...e){const n=this.container,i=[],s=this.disambiguate,r=this.shadowRootMode,o={elementPrefix:this.prefix,tryDefineElement(l,a,u){const c=tp(l,a,u),{name:h,callback:p,baseClass:v}=c;let{type:$}=c,k=h,E=er.get(k),N=!0;for(;E;){const U=s(k,$,E);switch(U){case Ks.ignoreDuplicate:return;case Ks.definitionCallbackOnly:N=!1,E=void 0;break;default:k=U,E=er.get(k);break}}N&&((Ni.has($)||$===vt)&&($=class extends ${}),er.set(k,$),Ni.set($,k),v&&Ni.set(v,k)),i.push(new np(n,k,$,r,p,N))}};this.designTokensInitialized||(this.designTokensInitialized=!0,this.designTokenRoot!==null&&Ic.registerRoot(this.designTokenRoot)),n.registerWithContext(o,...e);for(const l of i)l.callback(l),l.willDefine&&l.definition!==null&&l.definition.define();return this}}class np{constructor(e,n,i,s,r,o){this.container=e,this.name=n,this.type=i,this.shadowRootMode=s,this.callback=r,this.willDefine=o,this.definition=null}definePresentation(e){Cc.define(this.name,e,this.container)}defineElement(e){this.definition=new Ss(this.type,Object.assign(Object.assign({},e),{name:this.name}))}tagFor(e){return Oc.tagFor(e)}}const ip=(t,e)=>ct`
    <template role="${n=>n.role}" aria-orientation="${n=>n.orientation}"></template>
`,sp={separator:"separator"};let vo=class extends vt{constructor(){super(...arguments),this.role=sp.separator,this.orientation=Rh.horizontal}};P([j],vo.prototype,"role",void 0);P([j],vo.prototype,"orientation",void 0);const rp=(t,e)=>ct`
    <template
        aria-checked="${n=>n.ariaChecked}"
        aria-disabled="${n=>n.ariaDisabled}"
        aria-posinset="${n=>n.ariaPosInSet}"
        aria-selected="${n=>n.ariaSelected}"
        aria-setsize="${n=>n.ariaSetSize}"
        class="${n=>[n.checked&&"checked",n.selected&&"selected",n.disabled&&"disabled"].filter(Boolean).join(" ")}"
        role="option"
    >
        ${ro(t,e)}
        <span class="content" part="content">
            <slot ${ws("content")}></slot>
        </span>
        ${so(t,e)}
    </template>
`;class Es extends et{constructor(){super(...arguments),this.activeIndex=-1,this.rangeStartIndex=-1}get activeOption(){return this.options[this.activeIndex]}get checkedOptions(){var e;return(e=this.options)===null||e===void 0?void 0:e.filter(n=>n.checked)}get firstSelectedOptionIndex(){return this.options.indexOf(this.firstSelectedOption)}activeIndexChanged(e,n){var i,s;this.ariaActiveDescendant=(s=(i=this.options[n])===null||i===void 0?void 0:i.id)!==null&&s!==void 0?s:"",this.focusAndScrollOptionIntoView()}checkActiveIndex(){if(!this.multiple)return;const e=this.activeOption;e&&(e.checked=!0)}checkFirstOption(e=!1){e?(this.rangeStartIndex===-1&&(this.rangeStartIndex=this.activeIndex+1),this.options.forEach((n,i)=>{n.checked=Ei(i,this.rangeStartIndex)})):this.uncheckAllOptions(),this.activeIndex=0,this.checkActiveIndex()}checkLastOption(e=!1){e?(this.rangeStartIndex===-1&&(this.rangeStartIndex=this.activeIndex),this.options.forEach((n,i)=>{n.checked=Ei(i,this.rangeStartIndex,this.options.length)})):this.uncheckAllOptions(),this.activeIndex=this.options.length-1,this.checkActiveIndex()}connectedCallback(){super.connectedCallback(),this.addEventListener("focusout",this.focusoutHandler)}disconnectedCallback(){this.removeEventListener("focusout",this.focusoutHandler),super.disconnectedCallback()}checkNextOption(e=!1){e?(this.rangeStartIndex===-1&&(this.rangeStartIndex=this.activeIndex),this.options.forEach((n,i)=>{n.checked=Ei(i,this.rangeStartIndex,this.activeIndex+1)})):this.uncheckAllOptions(),this.activeIndex+=this.activeIndex<this.options.length-1?1:0,this.checkActiveIndex()}checkPreviousOption(e=!1){e?(this.rangeStartIndex===-1&&(this.rangeStartIndex=this.activeIndex),this.checkedOptions.length===1&&(this.rangeStartIndex+=1),this.options.forEach((n,i)=>{n.checked=Ei(i,this.activeIndex,this.rangeStartIndex)})):this.uncheckAllOptions(),this.activeIndex-=this.activeIndex>0?1:0,this.checkActiveIndex()}clickHandler(e){var n;if(!this.multiple)return super.clickHandler(e);const i=(n=e.target)===null||n===void 0?void 0:n.closest("[role=option]");if(!(!i||i.disabled))return this.uncheckAllOptions(),this.activeIndex=this.options.indexOf(i),this.checkActiveIndex(),this.toggleSelectedForAllCheckedOptions(),!0}focusAndScrollOptionIntoView(){super.focusAndScrollOptionIntoView(this.activeOption)}focusinHandler(e){if(!this.multiple)return super.focusinHandler(e);!this.shouldSkipFocus&&e.target===e.currentTarget&&(this.uncheckAllOptions(),this.activeIndex===-1&&(this.activeIndex=this.firstSelectedOptionIndex!==-1?this.firstSelectedOptionIndex:0),this.checkActiveIndex(),this.setSelectedOptions(),this.focusAndScrollOptionIntoView()),this.shouldSkipFocus=!1}focusoutHandler(e){this.multiple&&this.uncheckAllOptions()}keydownHandler(e){if(!this.multiple)return super.keydownHandler(e);if(this.disabled)return!0;const{key:n,shiftKey:i}=e;switch(this.shouldSkipFocus=!1,n){case uo:{this.checkFirstOption(i);return}case oo:{this.checkNextOption(i);return}case lo:{this.checkPreviousOption(i);return}case fo:{this.checkLastOption(i);return}case ho:return this.focusAndScrollOptionIntoView(),!0;case co:return this.uncheckAllOptions(),this.checkActiveIndex(),!0;case _s:if(e.preventDefault(),this.typeAheadExpired){this.toggleSelectedForAllCheckedOptions();return}default:return n.length===1&&this.handleTypeAhead(`${n}`),!0}}mousedownHandler(e){if(e.offsetX>=0&&e.offsetX<=this.scrollWidth)return super.mousedownHandler(e)}multipleChanged(e,n){var i;this.ariaMultiSelectable=n?"true":null,(i=this.options)===null||i===void 0||i.forEach(s=>{s.checked=n?!1:void 0}),this.setSelectedOptions()}setSelectedOptions(){if(!this.multiple){super.setSelectedOptions();return}this.$fastController.isConnected&&this.options&&(this.selectedOptions=this.options.filter(e=>e.selected),this.focusAndScrollOptionIntoView())}sizeChanged(e,n){var i;const s=Math.max(0,parseInt((i=n==null?void 0:n.toFixed())!==null&&i!==void 0?i:"",10));s!==n&&he.queueUpdate(()=>{this.size=s})}toggleSelectedForAllCheckedOptions(){const e=this.checkedOptions.filter(i=>!i.disabled),n=!e.every(i=>i.selected);e.forEach(i=>i.selected=n),this.selectedIndex=this.options.indexOf(e[e.length-1]),this.setSelectedOptions()}typeaheadBufferChanged(e,n){if(!this.multiple){super.typeaheadBufferChanged(e,n);return}if(this.$fastController.isConnected){const i=this.getTypeaheadMatches(),s=this.options.indexOf(i[0]);s>-1&&(this.activeIndex=s,this.uncheckAllOptions(),this.checkActiveIndex()),this.typeAheadExpired=!1}}uncheckAllOptions(e=!1){this.options.forEach(n=>n.checked=this.multiple?!1:void 0),e||(this.rangeStartIndex=-1)}}P([ae],Es.prototype,"activeIndex",void 0);P([j({mode:"boolean"})],Es.prototype,"multiple",void 0);P([j({converter:ys})],Es.prototype,"size",void 0);const kl=44,op=(t,e)=>ct`
    <template
        role="progressbar"
        aria-valuenow="${n=>n.value}"
        aria-valuemin="${n=>n.min}"
        aria-valuemax="${n=>n.max}"
        class="${n=>n.paused?"paused":""}"
    >
        ${Sc(n=>typeof n.value=="number",ct`
                <svg
                    class="progress"
                    part="progress"
                    viewBox="0 0 16 16"
                    slot="determinate"
                >
                    <circle
                        class="background"
                        part="background"
                        cx="8px"
                        cy="8px"
                        r="7px"
                    ></circle>
                    <circle
                        class="determinate"
                        part="determinate"
                        style="stroke-dasharray: ${n=>kl*n.percentComplete/100}px ${kl}px"
                        cx="8px"
                        cy="8px"
                        r="7px"
                    ></circle>
                </svg>
            `,ct`
                <slot name="indeterminate" slot="indeterminate">
                    ${e.indeterminateIndicator||""}
                </slot>
            `)}
    </template>
`;class An extends vt{constructor(){super(...arguments),this.percentComplete=0}valueChanged(){this.$fastController.isConnected&&this.updatePercentComplete()}minChanged(){this.$fastController.isConnected&&this.updatePercentComplete()}maxChanged(){this.$fastController.isConnected&&this.updatePercentComplete()}connectedCallback(){super.connectedCallback(),this.updatePercentComplete()}updatePercentComplete(){const e=typeof this.min=="number"?this.min:0,n=typeof this.max=="number"?this.max:100,i=typeof this.value=="number"?this.value:0,s=n-e;this.percentComplete=s===0?0:Math.fround((i-e)/s*100)}}P([j({converter:ys})],An.prototype,"value",void 0);P([j({converter:ys})],An.prototype,"min",void 0);P([j({converter:ys})],An.prototype,"max",void 0);P([j({mode:"boolean"})],An.prototype,"paused",void 0);P([ae],An.prototype,"percentComplete",void 0);class lp extends Es{}class ap extends po(lp){constructor(){super(...arguments),this.proxy=document.createElement("select")}}class rn extends ap{constructor(){super(...arguments),this.open=!1,this.forcedPosition=!1,this.listboxId=kc("listbox-"),this.maxHeight=0}openChanged(e,n){if(this.collapsible){if(this.open){this.ariaControls=this.listboxId,this.ariaExpanded="true",this.setPositioning(),this.focusAndScrollOptionIntoView(),this.indexWhenOpened=this.selectedIndex,he.queueUpdate(()=>this.focus());return}this.ariaControls="",this.ariaExpanded="false"}}get collapsible(){return!(this.multiple||typeof this.size=="number")}get value(){return de.track(this,"value"),this._value}set value(e){var n,i,s,r,o,l,a;const u=`${this._value}`;if(!((n=this._options)===null||n===void 0)&&n.length){const c=this._options.findIndex(v=>v.value===e),h=(s=(i=this._options[this.selectedIndex])===null||i===void 0?void 0:i.value)!==null&&s!==void 0?s:null,p=(o=(r=this._options[c])===null||r===void 0?void 0:r.value)!==null&&o!==void 0?o:null;(c===-1||h!==p)&&(e="",this.selectedIndex=c),e=(a=(l=this.firstSelectedOption)===null||l===void 0?void 0:l.value)!==null&&a!==void 0?a:e}u!==e&&(this._value=e,super.valueChanged(u,e),de.notify(this,"value"),this.updateDisplayValue())}updateValue(e){var n,i;this.$fastController.isConnected&&(this.value=(i=(n=this.firstSelectedOption)===null||n===void 0?void 0:n.value)!==null&&i!==void 0?i:""),e&&(this.$emit("input"),this.$emit("change",this,{bubbles:!0,composed:void 0}))}selectedIndexChanged(e,n){super.selectedIndexChanged(e,n),this.updateValue()}positionChanged(e,n){this.positionAttribute=n,this.setPositioning()}setPositioning(){const e=this.getBoundingClientRect(),i=window.innerHeight-e.bottom;this.position=this.forcedPosition?this.positionAttribute:e.top>i?Xs.above:Xs.below,this.positionAttribute=this.forcedPosition?this.positionAttribute:this.position,this.maxHeight=this.position===Xs.above?~~e.top:~~i}get displayValue(){var e,n;return de.track(this,"displayValue"),(n=(e=this.firstSelectedOption)===null||e===void 0?void 0:e.text)!==null&&n!==void 0?n:""}disabledChanged(e,n){super.disabledChanged&&super.disabledChanged(e,n),this.ariaDisabled=this.disabled?"true":"false"}formResetCallback(){this.setProxyOptions(),super.setDefaultSelectedOption(),this.selectedIndex===-1&&(this.selectedIndex=0)}clickHandler(e){if(!this.disabled){if(this.open){const n=e.target.closest("option,[role=option]");if(n&&n.disabled)return}return super.clickHandler(e),this.open=this.collapsible&&!this.open,!this.open&&this.indexWhenOpened!==this.selectedIndex&&this.updateValue(!0),!0}}focusoutHandler(e){var n;if(super.focusoutHandler(e),!this.open)return!0;const i=e.relatedTarget;if(this.isSameNode(i)){this.focus();return}!((n=this.options)===null||n===void 0)&&n.includes(i)||(this.open=!1,this.indexWhenOpened!==this.selectedIndex&&this.updateValue(!0))}handleChange(e,n){super.handleChange(e,n),n==="value"&&this.updateValue()}slottedOptionsChanged(e,n){this.options.forEach(i=>{de.getNotifier(i).unsubscribe(this,"value")}),super.slottedOptionsChanged(e,n),this.options.forEach(i=>{de.getNotifier(i).subscribe(this,"value")}),this.setProxyOptions(),this.updateValue()}mousedownHandler(e){var n;return e.offsetX>=0&&e.offsetX<=((n=this.listbox)===null||n===void 0?void 0:n.scrollWidth)?super.mousedownHandler(e):this.collapsible}multipleChanged(e,n){super.multipleChanged(e,n),this.proxy&&(this.proxy.multiple=n)}selectedOptionsChanged(e,n){var i;super.selectedOptionsChanged(e,n),(i=this.options)===null||i===void 0||i.forEach((s,r)=>{var o;const l=(o=this.proxy)===null||o===void 0?void 0:o.options.item(r);l&&(l.selected=s.selected)})}setDefaultSelectedOption(){var e;const n=(e=this.options)!==null&&e!==void 0?e:Array.from(this.children).filter(et.slottedOptionFilter),i=n==null?void 0:n.findIndex(s=>s.hasAttribute("selected")||s.selected||s.value===this.value);if(i!==-1){this.selectedIndex=i;return}this.selectedIndex=0}setProxyOptions(){this.proxy instanceof HTMLSelectElement&&this.options&&(this.proxy.options.length=0,this.options.forEach(e=>{const n=e.proxy||(e instanceof HTMLOptionElement?e.cloneNode():null);n&&this.proxy.options.add(n)}))}keydownHandler(e){super.keydownHandler(e);const n=e.key||e.key.charCodeAt(0);switch(n){case _s:{e.preventDefault(),this.collapsible&&this.typeAheadExpired&&(this.open=!this.open);break}case uo:case fo:{e.preventDefault();break}case ao:{e.preventDefault(),this.open=!this.open;break}case co:{this.collapsible&&this.open&&(e.preventDefault(),this.open=!1);break}case ho:return this.collapsible&&this.open&&(e.preventDefault(),this.open=!1),!0}return!this.open&&this.indexWhenOpened!==this.selectedIndex&&(this.updateValue(!0),this.indexWhenOpened=this.selectedIndex),!(n===oo||n===lo)}connectedCallback(){super.connectedCallback(),this.forcedPosition=!!this.positionAttribute,this.addEventListener("contentchange",this.updateDisplayValue)}disconnectedCallback(){this.removeEventListener("contentchange",this.updateDisplayValue),super.disconnectedCallback()}sizeChanged(e,n){super.sizeChanged(e,n),this.proxy&&(this.proxy.size=n)}updateDisplayValue(){this.collapsible&&de.notify(this,"displayValue")}}P([j({attribute:"open",mode:"boolean"})],rn.prototype,"open",void 0);P([Uf],rn.prototype,"collapsible",null);P([ae],rn.prototype,"control",void 0);P([j({attribute:"position"})],rn.prototype,"positionAttribute",void 0);P([ae],rn.prototype,"position",void 0);P([ae],rn.prototype,"maxHeight",void 0);class mo{}P([ae],mo.prototype,"ariaControls",void 0);sn(mo,hn);sn(rn,io,mo);const cp=(t,e)=>ct`
    <template
        class="${n=>[n.collapsible&&"collapsible",n.collapsible&&n.open&&"open",n.disabled&&"disabled",n.collapsible&&n.position].filter(Boolean).join(" ")}"
        aria-activedescendant="${n=>n.ariaActiveDescendant}"
        aria-controls="${n=>n.ariaControls}"
        aria-disabled="${n=>n.ariaDisabled}"
        aria-expanded="${n=>n.ariaExpanded}"
        aria-haspopup="${n=>n.collapsible?"listbox":null}"
        aria-multiselectable="${n=>n.ariaMultiSelectable}"
        ?open="${n=>n.open}"
        role="combobox"
        tabindex="${n=>n.disabled?null:"0"}"
        @click="${(n,i)=>n.clickHandler(i.event)}"
        @focusin="${(n,i)=>n.focusinHandler(i.event)}"
        @focusout="${(n,i)=>n.focusoutHandler(i.event)}"
        @keydown="${(n,i)=>n.keydownHandler(i.event)}"
        @mousedown="${(n,i)=>n.mousedownHandler(i.event)}"
    >
        ${Sc(n=>n.collapsible,ct`
                <div
                    class="control"
                    part="control"
                    ?disabled="${n=>n.disabled}"
                    ${xt("control")}
                >
                    ${ro(t,e)}
                    <slot name="button-container">
                        <div class="selected-value" part="selected-value">
                            <slot name="selected-value">${n=>n.displayValue}</slot>
                        </div>
                        <div aria-hidden="true" class="indicator" part="indicator">
                            <slot name="indicator">
                                ${e.indicator||""}
                            </slot>
                        </div>
                    </slot>
                    ${so(t,e)}
                </div>
            `)}
        <div
            class="listbox"
            id="${n=>n.listboxId}"
            part="listbox"
            role="listbox"
            ?disabled="${n=>n.disabled}"
            ?hidden="${n=>n.collapsible?!n.open:!1}"
            ${xt("listbox")}
        >
            <slot
                ${ws({filter:et.slottedOptionFilter,flatten:!0,property:"slottedOptions"})}
            ></slot>
        </div>
    </template>
`,pi="not-allowed",up=":host([hidden]){display:none}";function Pn(t){return`${up}:host{display:${t}}`}const nn=Mh()?"focus-visible":"focus";function dp(t){return Oc.getOrCreate(t).withPrefix("vscode")}function fp(t){window.addEventListener("load",()=>{new MutationObserver(()=>{El(t)}).observe(document.body,{attributes:!0,attributeFilter:["class"]}),El(t)})}function El(t){const e=getComputedStyle(document.body),n=document.querySelector("body");if(n){const i=n.getAttribute("data-vscode-theme-kind");for(const[s,r]of t){let o=e.getPropertyValue(s).toString();if(i==="vscode-high-contrast")o.length===0&&r.name.includes("background")&&(o="transparent"),r.name==="button-icon-hover-background"&&(o="transparent");else if(i==="vscode-high-contrast-light"){if(o.length===0&&r.name.includes("background"))switch(r.name){case"button-primary-hover-background":o="#0F4A85";break;case"button-secondary-hover-background":o="transparent";break;case"button-icon-hover-background":o="transparent";break}}else r.name==="contrast-active-border"&&(o="transparent");r.setValueFor(n,o)}}}const $l=new Map;let Il=!1;function F(t,e){const n=Ic.create(t);if(e){if(e.includes("--fake-vscode-token")){const i="id"+Math.random().toString(16).slice(2);e=`${e}-${i}`}$l.set(e,n)}return Il||(fp($l),Il=!0),n}const Cm=F("background","--vscode-editor-background").withDefault("#1e1e1e"),Ue=F("border-width").withDefault(1),hp=F("contrast-active-border","--vscode-contrastActiveBorder").withDefault("#f38518");F("contrast-border","--vscode-contrastBorder").withDefault("#6fc3df");const pp=F("corner-radius").withDefault(0),Fi=F("corner-radius-round").withDefault(2),Ye=F("design-unit").withDefault(4),$s=F("disabled-opacity").withDefault(.4),bt=F("focus-border","--vscode-focusBorder").withDefault("#007fd4"),bo=F("font-family","--vscode-font-family").withDefault("-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol");F("font-weight","--vscode-font-weight").withDefault("400");const Lt=F("foreground","--vscode-foreground").withDefault("#cccccc"),tr=F("input-height").withDefault("26"),gp=F("input-min-width").withDefault("100px"),Is=F("type-ramp-base-font-size","--vscode-font-size").withDefault("13px"),Os=F("type-ramp-base-line-height").withDefault("normal"),km=F("type-ramp-minus1-font-size").withDefault("11px"),Em=F("type-ramp-minus1-line-height").withDefault("16px");F("type-ramp-minus2-font-size").withDefault("9px");F("type-ramp-minus2-line-height").withDefault("16px");F("type-ramp-plus1-font-size").withDefault("16px");F("type-ramp-plus1-line-height").withDefault("24px");const $m=F("scrollbarWidth").withDefault("10px"),Im=F("scrollbarHeight").withDefault("10px"),Om=F("scrollbar-slider-background","--vscode-scrollbarSlider-background").withDefault("#79797966"),Rm=F("scrollbar-slider-hover-background","--vscode-scrollbarSlider-hoverBackground").withDefault("#646464b3"),Am=F("scrollbar-slider-active-background","--vscode-scrollbarSlider-activeBackground").withDefault("#bfbfbf66"),Pm=F("badge-background","--vscode-badge-background").withDefault("#4d4d4d"),Tm=F("badge-foreground","--vscode-badge-foreground").withDefault("#ffffff"),vp=F("button-border","--vscode-button-border").withDefault("transparent"),Ol=F("button-icon-background").withDefault("transparent"),mp=F("button-icon-corner-radius").withDefault("5px"),bp=F("button-icon-outline-offset").withDefault(0),Rl=F("button-icon-hover-background","--fake-vscode-token").withDefault("rgba(90, 93, 94, 0.31)"),yp=F("button-icon-padding").withDefault("3px"),kn=F("button-primary-background","--vscode-button-background").withDefault("#0e639c"),Ac=F("button-primary-foreground","--vscode-button-foreground").withDefault("#ffffff"),Pc=F("button-primary-hover-background","--vscode-button-hoverBackground").withDefault("#1177bb"),nr=F("button-secondary-background","--vscode-button-secondaryBackground").withDefault("#3a3d41"),Sp=F("button-secondary-foreground","--vscode-button-secondaryForeground").withDefault("#ffffff"),xp=F("button-secondary-hover-background","--vscode-button-secondaryHoverBackground").withDefault("#45494e"),wp=F("button-padding-horizontal").withDefault("11px"),_p=F("button-padding-vertical").withDefault("4px"),ir=F("checkbox-background","--vscode-checkbox-background").withDefault("#3c3c3c"),Al=F("checkbox-border","--vscode-checkbox-border").withDefault("#3c3c3c"),Cp=F("checkbox-corner-radius").withDefault(3);F("checkbox-foreground","--vscode-checkbox-foreground").withDefault("#f0f0f0");const bn=F("list-active-selection-background","--vscode-list-activeSelectionBackground").withDefault("#094771"),Li=F("list-active-selection-foreground","--vscode-list-activeSelectionForeground").withDefault("#ffffff"),Dm=F("list-hover-background","--vscode-list-hoverBackground").withDefault("#2a2d2e"),kp=F("divider-background","--vscode-settings-dropdownListBorder").withDefault("#454545"),$i=F("dropdown-background","--vscode-dropdown-background").withDefault("#3c3c3c"),Pl=F("dropdown-border","--vscode-dropdown-border").withDefault("#3c3c3c");F("dropdown-foreground","--vscode-dropdown-foreground").withDefault("#f0f0f0");const Ep=F("dropdown-list-max-height").withDefault("200px"),Mm=F("input-background","--vscode-input-background").withDefault("#3c3c3c"),Nm=F("input-foreground","--vscode-input-foreground").withDefault("#cccccc");F("input-placeholder-foreground","--vscode-input-placeholderForeground").withDefault("#cccccc");const Fm=F("link-active-foreground","--vscode-textLink-activeForeground").withDefault("#3794ff"),Lm=F("link-foreground","--vscode-textLink-foreground").withDefault("#3794ff"),$p=F("progress-background","--vscode-progressBar-background").withDefault("#0e70c0"),Bm=F("panel-tab-active-border","--vscode-panelTitle-activeBorder").withDefault("#e7e7e7"),Vm=F("panel-tab-active-foreground","--vscode-panelTitle-activeForeground").withDefault("#e7e7e7"),Hm=F("panel-tab-foreground","--vscode-panelTitle-inactiveForeground").withDefault("#e7e7e799");F("panel-view-background","--vscode-panel-background").withDefault("#1e1e1e");F("panel-view-border","--vscode-panel-border").withDefault("#80808059");const jm=F("tag-corner-radius").withDefault("2px");function Ip(t,e,n,i){var s=arguments.length,r=s<3?e:i===null?i=Object.getOwnPropertyDescriptor(e,n):i,o;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")r=Reflect.decorate(t,e,n,i);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(r=(s<3?o(r):s>3?o(e,n,r):o(e,n))||r);return s>3&&r&&Object.defineProperty(e,n,r),r}const Op=Rt`
	${Pn("inline-flex")} :host {
		outline: none;
		font-family: ${bo};
		font-size: ${Is};
		line-height: ${Os};
		color: ${Ac};
		background: ${kn};
		border-radius: calc(${Fi} * 1px);
		fill: currentColor;
		cursor: pointer;
	}
	.control {
		background: transparent;
		height: inherit;
		flex-grow: 1;
		box-sizing: border-box;
		display: inline-flex;
		justify-content: center;
		align-items: center;
		padding: ${_p} ${wp};
		white-space: wrap;
		outline: none;
		text-decoration: none;
		border: calc(${Ue} * 1px) solid ${vp};
		color: inherit;
		border-radius: inherit;
		fill: inherit;
		cursor: inherit;
		font-family: inherit;
	}
	:host(:hover) {
		background: ${Pc};
	}
	:host(:active) {
		background: ${kn};
	}
	.control:${nn} {
		outline: calc(${Ue} * 1px) solid ${bt};
		outline-offset: calc(${Ue} * 2px);
	}
	.control::-moz-focus-inner {
		border: 0;
	}
	:host([disabled]) {
		opacity: ${$s};
		background: ${kn};
		cursor: ${pi};
	}
	.content {
		display: flex;
	}
	.start {
		display: flex;
	}
	::slotted(svg),
	::slotted(span) {
		width: calc(${Ye} * 4px);
		height: calc(${Ye} * 4px);
	}
	.start {
		margin-inline-end: 8px;
	}
`,Rp=Rt`
	:host([appearance='primary']) {
		background: ${kn};
		color: ${Ac};
	}
	:host([appearance='primary']:hover) {
		background: ${Pc};
	}
	:host([appearance='primary']:active) .control:active {
		background: ${kn};
	}
	:host([appearance='primary']) .control:${nn} {
		outline: calc(${Ue} * 1px) solid ${bt};
		outline-offset: calc(${Ue} * 2px);
	}
	:host([appearance='primary'][disabled]) {
		background: ${kn};
	}
`,Ap=Rt`
	:host([appearance='secondary']) {
		background: ${nr};
		color: ${Sp};
	}
	:host([appearance='secondary']:hover) {
		background: ${xp};
	}
	:host([appearance='secondary']:active) .control:active {
		background: ${nr};
	}
	:host([appearance='secondary']) .control:${nn} {
		outline: calc(${Ue} * 1px) solid ${bt};
		outline-offset: calc(${Ue} * 2px);
	}
	:host([appearance='secondary'][disabled]) {
		background: ${nr};
	}
`,Pp=Rt`
	:host([appearance='icon']) {
		background: ${Ol};
		border-radius: ${mp};
		color: ${Lt};
	}
	:host([appearance='icon']:hover) {
		background: ${Rl};
		outline: 1px dotted ${hp};
		outline-offset: -1px;
	}
	:host([appearance='icon']) .control {
		padding: ${yp};
		border: none;
	}
	:host([appearance='icon']:active) .control:active {
		background: ${Rl};
	}
	:host([appearance='icon']) .control:${nn} {
		outline: calc(${Ue} * 1px) solid ${bt};
		outline-offset: ${bp};
	}
	:host([appearance='icon'][disabled]) {
		background: ${Ol};
	}
`,Tp=(t,e)=>Rt`
	${Op}
	${Rp}
	${Ap}
	${Pp}
`;class Tc extends wt{connectedCallback(){if(super.connectedCallback(),!this.appearance){const e=this.getAttribute("appearance");this.appearance=e}}attributeChangedCallback(e,n,i){e==="appearance"&&i==="icon"&&(this.getAttribute("aria-label")||(this.ariaLabel="Icon Button")),e==="aria-label"&&(this.ariaLabel=i),e==="disabled"&&(this.disabled=i!==null)}}Ip([j],Tc.prototype,"appearance",void 0);const Dp=Tc.compose({baseName:"button",template:Fh,styles:Tp,shadowOptions:{delegatesFocus:!0}}),Mp=(t,e)=>Rt`
	${Pn("inline-flex")} :host {
		align-items: center;
		outline: none;
		margin: calc(${Ye} * 1px) 0;
		user-select: none;
		font-size: ${Is};
		line-height: ${Os};
	}
	.control {
		position: relative;
		width: calc(${Ye} * 4px + 2px);
		height: calc(${Ye} * 4px + 2px);
		box-sizing: border-box;
		border-radius: calc(${Cp} * 1px);
		border: calc(${Ue} * 1px) solid ${Al};
		background: ${ir};
		outline: none;
		cursor: pointer;
	}
	.label {
		font-family: ${bo};
		color: ${Lt};
		padding-inline-start: calc(${Ye} * 2px + 2px);
		margin-inline-end: calc(${Ye} * 2px + 2px);
		cursor: pointer;
	}
	.label__hidden {
		display: none;
		visibility: hidden;
	}
	.checked-indicator {
		width: 100%;
		height: 100%;
		display: block;
		fill: ${Lt};
		opacity: 0;
		pointer-events: none;
	}
	.indeterminate-indicator {
		border-radius: 2px;
		background: ${Lt};
		position: absolute;
		top: 50%;
		left: 50%;
		width: 50%;
		height: 50%;
		transform: translate(-50%, -50%);
		opacity: 0;
	}
	:host(:enabled) .control:hover {
		background: ${ir};
		border-color: ${Al};
	}
	:host(:enabled) .control:active {
		background: ${ir};
		border-color: ${bt};
	}
	:host(:${nn}) .control {
		border: calc(${Ue} * 1px) solid ${bt};
	}
	:host(.disabled) .label,
	:host(.readonly) .label,
	:host(.readonly) .control,
	:host(.disabled) .control {
		cursor: ${pi};
	}
	:host(.checked:not(.indeterminate)) .checked-indicator,
	:host(.indeterminate) .indeterminate-indicator {
		opacity: 1;
	}
	:host(.disabled) {
		opacity: ${$s};
	}
`;class Np extends ks{connectedCallback(){super.connectedCallback(),this.textContent?this.setAttribute("aria-label",this.textContent):this.setAttribute("aria-label","Checkbox")}}const Fp=Np.compose({baseName:"checkbox",template:Hh,styles:Mp,checkedIndicator:`
		<svg 
			part="checked-indicator"
			class="checked-indicator"
			width="16" 
			height="16" 
			viewBox="0 0 16 16" 
			xmlns="http://www.w3.org/2000/svg" 
			fill="currentColor"
		>
			<path 
				fill-rule="evenodd" 
				clip-rule="evenodd" 
				d="M14.431 3.323l-8.47 10-.79-.036-3.35-4.77.818-.574 2.978 4.24 8.051-9.506.764.646z"
			/>
		</svg>
	`,indeterminateIndicator:`
		<div part="indeterminate-indicator" class="indeterminate-indicator"></div>
	`}),Lp=(t,e)=>Rt`
	${Pn("block")} :host {
		border: none;
		border-top: calc(${Ue} * 1px) solid ${kp};
		box-sizing: content-box;
		height: 0;
		margin: calc(${Ye} * 1px) 0;
		width: 100%;
	}
`;class Bp extends vo{}const Vp=Bp.compose({baseName:"divider",template:ip,styles:Lp}),Hp=(t,e)=>Rt`
	${Pn("inline-flex")} :host {
		background: ${$i};
		border-radius: calc(${Fi} * 1px);
		box-sizing: border-box;
		color: ${Lt};
		contain: contents;
		font-family: ${bo};
		height: calc(${tr} * 1px);
		position: relative;
		user-select: none;
		min-width: ${gp};
		outline: none;
		vertical-align: top;
	}
	.control {
		align-items: center;
		box-sizing: border-box;
		border: calc(${Ue} * 1px) solid ${Pl};
		border-radius: calc(${Fi} * 1px);
		cursor: pointer;
		display: flex;
		font-family: inherit;
		font-size: ${Is};
		line-height: ${Os};
		min-height: 100%;
		padding: 2px 6px 2px 8px;
		width: 100%;
	}
	.listbox {
		background: ${$i};
		border: calc(${Ue} * 1px) solid ${bt};
		border-radius: calc(${Fi} * 1px);
		box-sizing: border-box;
		display: inline-flex;
		flex-direction: column;
		left: 0;
		max-height: ${Ep};
		padding: 0;
		overflow-y: auto;
		position: absolute;
		width: 100%;
		z-index: 1;
	}
	.listbox[hidden] {
		display: none;
	}
	:host(:${nn}) .control {
		border-color: ${bt};
	}
	:host(:not([disabled]):hover) {
		background: ${$i};
		border-color: ${Pl};
	}
	:host(:${nn}) ::slotted([aria-selected="true"][role="option"]:not([disabled])) {
		background: ${bn};
		border: calc(${Ue} * 1px) solid transparent;
		color: ${Li};
	}
	:host([disabled]) {
		cursor: ${pi};
		opacity: ${$s};
	}
	:host([disabled]) .control {
		cursor: ${pi};
		user-select: none;
	}
	:host([disabled]:hover) {
		background: ${$i};
		color: ${Lt};
		fill: currentcolor;
	}
	:host(:not([disabled])) .control:active {
		border-color: ${bt};
	}
	:host(:empty) .listbox {
		display: none;
	}
	:host([open]) .control {
		border-color: ${bt};
	}
	:host([open][position='above']) .listbox {
		border-bottom-left-radius: 0;
		border-bottom-right-radius: 0;
	}
	:host([open][position='below']) .listbox {
		border-top-left-radius: 0;
		border-top-right-radius: 0;
	}
	:host([open][position='above']) .listbox {
		bottom: calc(${tr} * 1px);
	}
	:host([open][position='below']) .listbox {
		top: calc(${tr} * 1px);
	}
	.selected-value {
		flex: 1 1 auto;
		font-family: inherit;
		overflow: hidden;
		text-align: start;
		text-overflow: ellipsis;
		white-space: nowrap;
	}
	.indicator {
		flex: 0 0 auto;
		margin-inline-start: 1em;
	}
	slot[name='listbox'] {
		display: none;
		width: 100%;
	}
	:host([open]) slot[name='listbox'] {
		display: flex;
		position: absolute;
	}
	.end {
		margin-inline-start: auto;
	}
	.start,
	.end,
	.indicator,
	.select-indicator,
	::slotted(svg),
	::slotted(span) {
		fill: currentcolor;
		height: 1em;
		min-height: calc(${Ye} * 4px);
		min-width: calc(${Ye} * 4px);
		width: 1em;
	}
	::slotted([role='option']),
	::slotted(option) {
		flex: 0 0 auto;
	}
`;class jp extends rn{}const Up=jp.compose({baseName:"dropdown",template:cp,styles:Hp,indicator:`
		<svg 
			class="select-indicator"
			part="select-indicator"
			width="16" 
			height="16" 
			viewBox="0 0 16 16" 
			xmlns="http://www.w3.org/2000/svg" 
			fill="currentColor"
		>
			<path 
				fill-rule="evenodd" 
				clip-rule="evenodd" 
				d="M7.976 10.072l4.357-4.357.62.618L8.284 11h-.618L3 6.333l.619-.618 4.357 4.357z"
			/>
		</svg>
	`}),zp=(t,e)=>Rt`
	${Pn("inline-flex")} :host {
		font-family: var(--body-font);
		border-radius: ${pp};
		border: calc(${Ue} * 1px) solid transparent;
		box-sizing: border-box;
		color: ${Lt};
		cursor: pointer;
		fill: currentcolor;
		font-size: ${Is};
		line-height: ${Os};
		margin: 0;
		outline: none;
		overflow: hidden;
		padding: 0 calc((${Ye} / 2) * 1px)
			calc((${Ye} / 4) * 1px);
		user-select: none;
		white-space: nowrap;
	}
	:host(:${nn}) {
		border-color: ${bt};
		background: ${bn};
		color: ${Lt};
	}
	:host([aria-selected='true']) {
		background: ${bn};
		border: calc(${Ue} * 1px) solid transparent;
		color: ${Li};
	}
	:host(:active) {
		background: ${bn};
		color: ${Li};
	}
	:host(:not([aria-selected='true']):hover) {
		background: ${bn};
		border: calc(${Ue} * 1px) solid transparent;
		color: ${Li};
	}
	:host(:not([aria-selected='true']):active) {
		background: ${bn};
		color: ${Lt};
	}
	:host([disabled]) {
		cursor: ${pi};
		opacity: ${$s};
	}
	:host([disabled]:hover) {
		background-color: inherit;
	}
	.content {
		grid-column-start: 2;
		justify-self: start;
		overflow: hidden;
		text-overflow: ellipsis;
	}
`;let qp=class extends Wt{connectedCallback(){super.connectedCallback(),this.textContent?this.setAttribute("aria-label",this.textContent):this.setAttribute("aria-label","Option")}};const Wp=qp.compose({baseName:"option",template:rp,styles:zp}),Yp=(t,e)=>Rt`
	${Pn("flex")} :host {
		align-items: center;
		outline: none;
		height: calc(${Ye} * 7px);
		width: calc(${Ye} * 7px);
		margin: 0;
	}
	.progress {
		height: 100%;
		width: 100%;
	}
	.background {
		fill: none;
		stroke: transparent;
		stroke-width: calc(${Ye} / 2 * 1px);
	}
	.indeterminate-indicator-1 {
		fill: none;
		stroke: ${$p};
		stroke-width: calc(${Ye} / 2 * 1px);
		stroke-linecap: square;
		transform-origin: 50% 50%;
		transform: rotate(-90deg);
		transition: all 0.2s ease-in-out;
		animation: spin-infinite 2s linear infinite;
	}
	@keyframes spin-infinite {
		0% {
			stroke-dasharray: 0.01px 43.97px;
			transform: rotate(0deg);
		}
		50% {
			stroke-dasharray: 21.99px 21.99px;
			transform: rotate(450deg);
		}
		100% {
			stroke-dasharray: 0.01px 43.97px;
			transform: rotate(1080deg);
		}
	}
`;class Gp extends An{connectedCallback(){super.connectedCallback(),this.paused&&(this.paused=!1),this.setAttribute("aria-label","Loading"),this.setAttribute("aria-live","assertive"),this.setAttribute("role","alert")}attributeChangedCallback(e,n,i){e==="value"&&this.removeAttribute("value")}}const Jp=Gp.compose({baseName:"progress-ring",template:op,styles:Yp,indeterminateIndicator:`
		<svg class="progress" part="progress" viewBox="0 0 16 16">
			<circle
				class="background"
				part="background"
				cx="8px"
				cy="8px"
				r="7px"
			></circle>
			<circle
				class="indeterminate-indicator-1"
				part="indeterminate-indicator-1"
				cx="8px"
				cy="8px"
				r="7px"
			></circle>
		</svg>
	`}),Qp={class:"container"},Xp={key:0,class:"overlay"},Zp=Ne({__name:"OverlayableView",props:{activateOverlay:{type:Boolean}},setup(t){return(e,n)=>(m(),R("div",Qp,[e.activateOverlay?(m(),R("div",Xp)):K("",!0),lt(e.$slots,"default",{},void 0,!0)]))}}),mt=(t,e)=>{const n=t.__vccOpts||t;for(const[i,s]of e)n[i]=s;return n},Kp=mt(Zp,[["__scopeId","data-v-882d5437"]]);function Ge(t){return t.error!==void 0}var Dc=(t=>(t.HTML="html",t.JUPYTER_NOTEBOOK="jupyter-notebook",t.JUPYTER_VOILA="jupyter-voila",t.PYTHON_BOKEH="python-bokeh",t.PYTHON_DASH="python-dash",t.PYTHON_FASTAPI="python-fastapi",t.PYTHON_FLASK="python-flask",t.PYTHON_SHINY="python-shiny",t.PYTHON_STREAMLIT="python-streamlit",t.PYTHON_GRADIO="python-gradio",t.QUARTO_SHINY="quarto-shiny",t.QUARTO="quarto",t.QUARTO_STATIC="quarto-static",t.R_PLUMBER="r-plumber",t.R_SHINY="r-shiny",t.RMD_SHINY="rmd-shiny",t.RMD="rmd",t.UNKNOWN="unknown",t))(Dc||{});function Qt(t){return!!(t&&t.state==="new")}var kr=(t=>(t.FILE="file",t.BUILT_IN="built-in",t.PERMISSIONS_ERROR="permissions",t))(kr||{}),yo=(t=>(t[t.EditConfiguration=0]="EditConfiguration",t))(yo||{});function eg(t){return Object.values(yo).includes(t)}const Er=[{detectionStr:"editing your configuration",anchorStr:"editing",buttonStr:"Edit Configuration",actionId:0}];function tg(t){return Er.find(e=>typeof t=="string"?t.includes(e.detectionStr):eg(t)?e.actionId===t:!1)}var me=(t=>(t.DEPLOY="deploy",t.INITIALIZING="initializing",t.EDIT_CONFIGURATION="editConfiguration",t.SHOW_SELECT_CONFIGURATION="showSelectConfiguration",t.NAVIGATE="navigate",t.SAVE_SELECTION_STATE="saveSelectionState",t.VSCODE_OPEN="vsCodeOpen",t.INCLUDE_FILE="includeFile",t.EXCLUDE_FILE="excludeFile",t.REQUEST_FILES_LISTS="requestFilesLists",t.REQUEST_CREDENTIALS="requestCredentials",t.VSCODE_OPEN_RELATIVE="VSCodeOpenRelativeMsg",t.ADD_SECRET="addSecret",t.REFRESH_PYTHON_PACKAGES="RefreshPythonPackagesMsg",t.SCAN_PYTHON_PACKAGE_REQUIREMENTS="ScanPythonPackageRequirementsMsg",t.REFRESH_R_PACKAGES="RefreshRPackagesMsg",t.SCAN_R_PACKAGE_REQUIREMENTS="ScanRPackageRequirementsMsg",t.SELECT_DEPLOYMENT="selectDeployment",t.NEW_DEPLOYMENT="newDeployment",t.NEW_CREDENTIAL_FOR_DEPLOYMENT="newCredentialForDeployment",t.NEW_CREDENTIAL="newCredential",t.VIEW_PUBLISHING_LOG="viewPublishingLog",t.SHOW_ASSOCIATE_GUID="ShowAssociateGUID",t.UPDATE_SELECTION_CREDENTIAL_STATE="UpdateSelectionCredentialStateMsg",t.UPDATE_SELECTION_IS_PRE_CONTENT_RECORD="UpdateSelectionIsPreContentRecordMsg",t))(me||{});const ng=(t,e)=>{let n=e&&Ge(e)||e==null?void 0:e.configuration.title;if(n)return{title:n,problem:!1};if(!t.configurationName)return{title:`Unknown Title Due To Missing Config Entry in ${t.saveName}`,problem:!0};if(!e)return{title:`Unknown Title Due to Missing Config ${t.configurationName}`,problem:!0};if(Ge(e))return{title:`Unknown Title • Error in ${e.configurationName}`,problem:!0};let i=e.configurationName;return i||(i=t.configurationName),i?n=`No Title (in ${i})`:n="No Title available",{title:n,problem:!0}};function Tl(t,{includeTime:e}={includeTime:!0}){const n=new Date(`${t}`).toLocaleDateString("en-US",{day:"2-digit",month:"short",year:"numeric"});if(!e)return n;const i=ig(t);return`${n} at ${i}`}function ig(t,{includeSeconds:e}={includeSeconds:!1}){const n={hour:"2-digit",minute:"2-digit"};return e&&(n.second="2-digit"),new Date(`${t}`).toLocaleTimeString("en-US",n)}function sg(t,e){let n=t.filter(i=>!Ge(i));return e&&e!==Dc.UNKNOWN&&(n=n.filter(i=>rg(i,e))),n}function rg(t,e){return e===void 0?!1:t.configuration.type===e}var He=(t=>(t.INITIALIZING_REQUEST_COMPLETE="initializingRequestComplete",t.REFRESH_CONTENTRECORD_DATA="refreshContentRecordData",t.REFRESH_CONFIG_DATA="refreshConfigData",t.REFRESH_CREDENTIAL_DATA="refreshCredentialData",t.PUBLISH_START="publishStart",t.PUBLISH_FINISH_SUCCESS="publishFinishSuccess",t.PUBLISH_FINISH_FAILURE="publishFinishFailure",t.UPDATE_CONTENTRECORD_SELECTION="updateContentRecordSelection",t.SAVE_SELECTION="saveSelection",t.REFRESH_FILES="refreshFiles",t.UPDATE_PYTHON_PACKAGES="updatePythonPackages",t.UPDATE_R_PACKAGES="updateRPackages",t.SHOW_DISABLE_OVERLAY="showDisableOverlay",t.HIDE_DISABLE_OVERLAY="hideDisableOverlay",t.SET_PATH_SEPARATOR="setPathSeparator",t.UPDATE_SERVER_ENVIRONMENT="updateServerEnvironment",t))(He||{});function og(t){return t.kind==="initializingRequestComplete"||t.kind==="refreshContentRecordData"||t.kind==="refreshConfigData"||t.kind==="refreshCredentialData"||t.kind==="publishStart"||t.kind==="publishFinishSuccess"||t.kind==="publishFinishFailure"||t.kind==="updateContentRecordSelection"||t.kind==="saveSelection"||t.kind==="refreshFiles"||t.kind==="updatePythonPackages"||t.kind==="updateRPackages"||t.kind==="showDisableOverlay"||t.kind==="hideDisableOverlay"||t.kind==="setPathSeparator"||t.kind==="updateServerEnvironment"}class lg{constructor(e,n){Nn(this,"externalMsgCB");Nn(this,"rawMsgCB",e=>{if(this.externalMsgCB){const n=JSON.parse(e.data);if(og(n))this.externalMsgCB(n);else{console.error(`HostConduit::rawMsgCB, NonConduitMessage Received: ${JSON.stringify(e)}`);return}}});Nn(this,"onMsg",e=>{this.externalMsgCB=e,this.window.addEventListener("message",this.rawMsgCB)});Nn(this,"sendMsg",e=>{const n=JSON.stringify(e);this.vsCodeApi.postMessage(n)});this.window=e,this.vsCodeApi=n}deactivate(){this.window.removeEventListener("message",this.rawMsgCB)}}const Dl=t=>{let e=t;return e.endsWith("/")||(e+="/"),e},ag=t=>{const e=Object.keys(t);return!!(e.length&&e.includes("code")&&e.includes("msg")&&e.includes("operation"))},So=t=>{if(ag(t)){const e=Object.keys(t);if(e.length&&e.includes("data"))return!0}return!1},cg=t=>So(t)&&!ii(t)&&!Mc(t),ii=t=>So(t)&&(t.code==="invalidTOML"||t.code==="unknownTOMLKey"),Mc=t=>So(t)&&t.code==="deployedContentNotRunning",_e=nc("home",()=>{const t=re("/"),e=re(!1),n=re([]),i=re([]),s=re([]),r=re([]),o=I(()=>r.value.sort((G,ie)=>G.name.localeCompare(ie.name))),l=re(new Set),a=re(new Map),u=I(()=>{const G=new Map,ie=v.value;return ie===void 0||Ge(ie)||Object.entries(ie.configuration.environment||{}).forEach(([ee,Ce])=>{G.set(ee,Ce)}),G}),c=I(()=>{const G=[];return a.value.forEach((ie,ee)=>{u.value.has(ee)&&G.push(ee)}),G}),h=re(!1),p=re(),v=I(()=>{if(!p.value)return;const{configurationName:G,projectDir:ie}=p.value;let ee;return ee=i.value.find(Ce=>Ce.configurationName===G&&Ce.projectDir===ie),ee||(ee=s.value.find(Ce=>Ce.configurationName===G&&Ce.projectDir===ie)),ee});Nt([p,v],([G,ie],[ee])=>{var Gt;const Ce=new Map;if(ie===void 0||Ge(ie)){a.value=Ce;return}const Yt=(G==null?void 0:G.saveName)===(ee==null?void 0:ee.saveName);(Gt=ie.configuration.secrets)==null||Gt.forEach(Dn=>{var d;Yt&&((d=a.value)!=null&&d.has(Dn))?Ce.set(Dn,a.value.get(Dn)):Ce.set(Dn,void 0)}),a.value=Ce},{immediate:!0});const $=I(()=>r.value.find(G=>{var Ce;const ie=G.url.toLowerCase(),ee=(Ce=p.value)==null?void 0:Ce.serverUrl.toLowerCase();return ee?Dl(ie)===Dl(ee):!1})),k=re(),E=re(),N=re(!1),U=re(),W=re(),C=re(),J=re(!1),Te=re(),ce=re(),z=re(),X=re(),B=re(!1);function pe(G){const ie=p.value,ee=v.value,Ce=n.value.find(Yt=>Yt.deploymentPath===(G==null?void 0:G.deploymentPath));return p.value=Ce,ie===p.value&&ee===v.value}function ne(G){n.value.push(G),p.value=G}Nt([$],()=>ge());const ge=()=>{gt().sendMsg({kind:me.UPDATE_SELECTION_CREDENTIAL_STATE,content:{state:$.value!==void 0?"true":"false"}})};Nt([p],()=>Je());const Je=()=>{gt().sendMsg({kind:me.UPDATE_SELECTION_IS_PRE_CONTENT_RECORD,content:{state:Qt(p.value)?"true":"false"}})};Nt([v],()=>dt());const dt=()=>{var ie;const G=gt();if(p.value){const ee={deploymentName:p.value.saveName,projectDir:p.value.projectDir,configurationName:(ie=v.value)==null?void 0:ie.configurationName,deploymentPath:p.value.deploymentPath};G.sendMsg({kind:me.SAVE_SELECTION_STATE,content:{state:ee}})}},Z=(G,ie,ee,Ce)=>{N.value=G,U.value=ie,W.value=ee,C.value=Ce},S=(G,ie,ee,Ce,Yt)=>{J.value=G,Te.value=ie,ce.value=ee,z.value=Ce,X.value=Yt},b=()=>{const G=new Map;a.value.forEach((ie,ee)=>{G.set(ee,void 0)}),a.value=G},Ie=I(()=>Array.from(a.value.values()).filter(G=>G!==void 0).length),Qe={active:{isEmptyRequirements:I(()=>N.value&&W.value&&U.value&&U.value.length===0),isMissingRequirements:I(()=>N.value&&!W.value),isAlertActive:I(()=>Qe.active.isEmptyRequirements.value||Qe.active.isMissingRequirements.value),isInProject:I(()=>N.value)}},Le={active:{isMissingPackageFile:I(()=>J.value&&!ce.value),isEmptyRequirements:I(()=>!!(J.value&&ce.value&&Te.value&&Te.value.length===0)),isAlertActive:I(()=>Le.active.isMissingPackageFile.value||Le.active.isEmptyRequirements.value),isInProject:I(()=>J.value)}},Oe={isAvailable:I(()=>!!o.value.length),active:{isMissing:I(()=>ft.active.isCredentialMissing.value),isAlertActive:I(()=>Oe.active.isMissing.value)}},yi=I(()=>!ft.active.isAlertActive.value&&(Oe.active.isAlertActive.value||Le.active.isAlertActive.value||Qe.active.isAlertActive.value)),ft={active:{isEntryMissing:I(()=>!!(p.value&&!p.value.configurationName)),isMissing:I(()=>{var G;return!!(p.value&&!v.value&&!ft.active.isInErrorList((G=p.value)==null?void 0:G.configurationName)&&!ft.active.isEntryMissing.value)}),isTOMLError:I(()=>!!(v.value&&Ge(v.value)&&ii(v.value.error))),isUnknownType:I(()=>!!(v.value&&!Ge(v.value)&&v.value.configuration.type==="unknown")),isUnknownError:I(()=>!!(v.value&&Ge(v.value)&&cg(v.value.error))),isInErrorList:G=>G?!!s.value.find(ie=>{var ee;return ie.configurationName===((ee=p.value)==null?void 0:ee.configurationName)}):!1,isCredentialMissing:I(()=>!!(p.value&&!$.value)),isAlertActive:I(()=>ft.active.isEntryMissing.value||ft.active.isMissing.value||ft.active.isTOMLError.value||ft.active.isUnknownError.value||ft.active.isCredentialMissing.value)}};return{platformFileSeparator:t,showDisabledOverlay:h,publishInProgress:e,contentRecords:n,configurations:i,configurationsInError:s,credentials:r,sortedCredentials:o,serverSecrets:l,secrets:a,environment:u,duplicatedEnvironmentVariables:c,selectedContentRecord:p,selectedConfiguration:v,serverCredential:$,initializingRequestComplete:B,lastContentRecordResult:k,lastContentRecordMsg:E,pythonProject:N,pythonPackages:U,pythonPackageFile:W,pythonPackageManager:C,rProject:J,rPackages:Te,rPackageFile:ce,anyActiveAlerts:yi,updateSelectedContentRecordBySelector:pe,updateSelectedContentRecordByObject:ne,updateParentViewSelectionState:dt,updatePythonPackages:Z,updateRPackages:S,clearSecretValues:b,secretsWithValueCount:Ie,python:Qe,r:Le,config:ft,credential:Oe}});function Nc(t,e,n=new Array,i=0,s){return t.forEach(r=>{const{files:o,...l}=r,a={...l,indent:i,parent:s};n.push(a),r.files.length>0&&e.has(r.id)&&Nc(r.files,e,n,i+1,r.id)}),n}const xo=nc("file",()=>{const t=_e(),{sendMsg:e}=gt(),n=re(),i=re(new Set),s=I(()=>{var p;return Nc(((p=n.value)==null?void 0:p.files)||[],i.value)}),r=I(()=>{var p,v;return((p=t.selectedContentRecord)==null?void 0:p.state)!=="new"?new Set((v=t.selectedContentRecord)==null?void 0:v.files):new Set});function o(){e({kind:me.REQUEST_FILES_LISTS})}function l({id:p}){e({kind:me.INCLUDE_FILE,content:{path:p}})}function a({id:p}){e({kind:me.EXCLUDE_FILE,content:{path:p}})}function u({id:p}){e({kind:me.VSCODE_OPEN_RELATIVE,content:{relativePath:p}})}function c({id:p}){i.value.add(p)}function h({id:p}){i.value.delete(p)}return{files:n,expandedDirs:i,lastDeployedFiles:r,flatFiles:s,refreshFiles:o,includeFile:l,excludeFile:a,openFile:u,expandDir:c,collapseDir:h}});let sr;const ug=()=>(sr||(sr=acquireVsCodeApi()),sr);let Pt;const dg=ug();function gt(){return Pt||(Pt=new lg(window,dg),Br(()=>Pt&&Pt.onMsg(fg)),fs(()=>Pt&&Pt.deactivate()),_e().initializingRequestComplete=!1,Pt.sendMsg({kind:me.INITIALIZING})),{sendMsg:e=>{if(!Pt){console.error(`HostCondiutService::sendMsg attempted ahead of call to useHostConduitService. Message Dropped: ${JSON.stringify(e)}`);return}return console.debug(`HostConduitService - Sending Msg: ${JSON.stringify(e)}`),Pt.sendMsg(e)}}}const fg=t=>{switch(console.debug(`HostConduitService - Receiving Msg: ${JSON.stringify(t)}`),t.kind){case He.INITIALIZING_REQUEST_COMPLETE:return pg();case He.REFRESH_CONTENTRECORD_DATA:return mg(t);case He.REFRESH_CONFIG_DATA:return bg(t);case He.REFRESH_CREDENTIAL_DATA:return yg(t);case He.PUBLISH_START:return Sg();case He.PUBLISH_FINISH_SUCCESS:return xg();case He.PUBLISH_FINISH_FAILURE:return wg(t);case He.UPDATE_CONTENTRECORD_SELECTION:return _g(t);case He.SAVE_SELECTION:return Cg();case He.REFRESH_FILES:return kg(t);case He.UPDATE_PYTHON_PACKAGES:return Eg(t);case He.UPDATE_R_PACKAGES:return $g(t);case He.SHOW_DISABLE_OVERLAY:return gg();case He.HIDE_DISABLE_OVERLAY:return vg();case He.SET_PATH_SEPARATOR:return hg(t);case He.UPDATE_SERVER_ENVIRONMENT:return Ig(t);default:console.warn(`unexpected command: ${JSON.stringify(t)}`)}},hg=t=>{_e().platformFileSeparator=t.content.separator},pg=()=>{_e().initializingRequestComplete=!0},gg=()=>{_e().showDisabledOverlay=!0},vg=()=>{_e().showDisabledOverlay=!1},mg=t=>{const e=_e();e.contentRecords=t.content.contentRecords;const n=t.content.deploymentSelected;if(n===null){e.selectedContentRecord=void 0;return}if(n===void 0){e.selectedContentRecord&&e.updateSelectedContentRecordBySelector({deploymentPath:e.selectedContentRecord.deploymentPath,deploymentName:e.selectedContentRecord.deploymentName,projectDir:e.selectedContentRecord.projectDir});return}e.updateSelectedContentRecordBySelector(n)},bg=t=>{const e=_e();e.configurations=t.content.configurations,e.configurationsInError=t.content.configurationsInError},yg=t=>{const e=_e();e.credentials=t.content.credentials},Sg=()=>{const t=_e();t.publishInProgress=!0},xg=()=>{const t=_e();t.clearSecretValues(),t.publishInProgress=!1,t.lastContentRecordResult="Last Deployment was Successful",t.lastContentRecordMsg=""},wg=t=>{const e=_e();e.publishInProgress=!1,e.lastContentRecordResult="Last Deployment Failed",e.lastContentRecordMsg=t.content.data.message},_g=t=>{const e=_e();e.updateSelectedContentRecordByObject(t.content.preContentRecord),t.content.saveSelection&&e.updateParentViewSelectionState()},Cg=()=>{_e().updateParentViewSelectionState()},kg=t=>{var n;const e=xo();t.content.files.abs!==((n=e.files)==null?void 0:n.abs)&&(e.expandedDirs=new Set),e.files=t.content.files},Eg=t=>{_e().updatePythonPackages(t.content.pythonProject,t.content.packages,t.content.file,t.content.manager)},$g=t=>{_e().updateRPackages(t.content.rProject,t.content.packages,t.content.file,t.content.manager,t.content.rVersion)},Ig=t=>{const e=_e();e.serverSecrets=new Set(t.content.environment)},Og={class:"quick-pick-option"},Rg={class:"quick-pick-row"},Ag={class:"quick-pick-label-container"},Pg={class:"quick-pick-label"},Tg={key:0,class:"quick-pick-description"},Dg={class:"quick-pick-row"},Mg={key:0,class:"quick-pick-detail"},Ng={key:1,class:"quick-pick-detail"},Fg=Ne({__name:"QuickPickItem",props:{label:{},description:{},details:{},codicon:{}},setup(t){const e=n=>typeof n=="object"&&"icon"in n&&"text"in n;return(n,i)=>(m(),R("div",Og,[M("div",Rg,[n.codicon?(m(),R("div",{key:0,class:De(["quick-pick-icon codicon",n.codicon])},null,2)):K("",!0),M("div",Ag,[M("span",Pg,xe(n.label),1),n.description?(m(),R("span",Tg,xe(n.description),1)):K("",!0)])]),(m(!0),R(le,null,qt(n.details,s=>(m(),R("div",Dg,[e(s)?(m(),R("div",Mg,[M("div",{class:De(["quick-pick-icon codicon",s.icon])},null,2),M("span",null,xe(s.text),1)])):(m(),R("span",Ng,xe(s),1))]))),256))]))}}),Ml=mt(Fg,[["__scopeId","data-v-1ded88e6"]]),Lg={class:"monaco-action-bar"},Bg=["aria-label"],Vg={class:"action-item menu-entry",role:"presentation"},Hg=["title","aria-label","onClick","onKeydown"],jg=["data-vscode-context"],Ug=["title","aria-label"],zg=Ne({__name:"ActionToolbar",props:{title:{},actions:{},contextMenu:{}},setup(t){const e=t,n=re(null),i=r=>{var o,l,a,u;r instanceof PointerEvent?(o=r.target)==null||o.dispatchEvent(new MouseEvent("contextmenu",{bubbles:!0,clientX:r.clientX,clientY:r.clientY})):r instanceof KeyboardEvent&&((u=r.target)==null||u.dispatchEvent(new MouseEvent("contextmenu",{bubbles:!0,clientX:(l=n.value)==null?void 0:l.getBoundingClientRect().x,clientY:(a=n.value)==null?void 0:a.getBoundingClientRect().bottom})))},s=I(()=>{if(e.contextMenu)return JSON.stringify({webviewSection:e.contextMenu,preventDefaultContextMenuItems:!0})});return(r,o)=>(m(),R("div",Lg,[M("ul",{class:"actions-container",role:"toolbar","aria-label":`${r.title} actions`},[(m(!0),R(le,null,qt(r.actions,l=>(m(),R("li",Vg,[M("a",{class:De(["action-label codicon",l.codicon]),role:"button",title:l.label,"aria-label":l.label,tabindex:"0",onClick:Qi(l.fn,["stop"]),onKeydown:ui(l.fn,["enter"])},null,42,Hg)]))),256)),r.contextMenu?(m(),R("li",{key:0,ref_key:"contextMenuButton",ref:n,"data-vscode-context":s.value,class:"action-item menu-entry",role:"presentation"},[M("a",{class:"action-label codicon codicon-ellipsis",role:"button",title:`More ${r.title} actions`,"aria-label":`More ${r.title} actions`,tabindex:"0",onClick:Qi(i,["stop","prevent"]),onKeydown:ui(i,["enter"])},null,40,Ug)],8,jg)):K("",!0)],8,Bg)]))}}),En=mt(zg,[["__scopeId","data-v-86e03dc5"]]),qg=["disabled"],Wg=Ne({__name:"DeployButton",setup(t){const e=_e(),n=gt(),i=I(()=>!!e.selectedContentRecord&&!!e.selectedConfiguration&&!!e.serverCredential),s=()=>{if(!e.selectedContentRecord||!e.selectedConfiguration||!e.serverCredential){console.error("DeployButton::deploy trying to send message with undefined values. Action ignored.");return}const r={};e.secrets.forEach((o,l)=>{o&&(r[l]=o)}),n.sendMsg({kind:me.DEPLOY,content:{deploymentName:e.selectedContentRecord.saveName,configurationName:e.selectedConfiguration.configurationName,credentialName:e.serverCredential.name,projectDir:e.selectedContentRecord.projectDir,secrets:r}})};return(r,o)=>(m(),R("vscode-button",{"data-automation":"deploy-button",disabled:!i.value||L(e).publishInProgress,onClick:s}," Deploy Your Project ",8,qg))}}),Yg=Ne({__name:"TextStringWithAnchor",props:{message:{},splitOptions:{}},emits:["click"],setup(t,{emit:e}){const n=e,i=t,s=I(()=>tg(i.message)),r=I(()=>{if(s.value!==void 0&&s.value.anchorStr){const l=i.message.split(s.value.anchorStr);if(l.length===2)return l}return["",""]}),o=()=>{s.value&&n("click",s.value.actionId)};return(l,a)=>{var u;return s.value?(m(),R("span",{key:0,class:De(l.$attrs.class)},[ye(xe(r.value[0])+" ",1),M("a",{class:"webview-link",role:"button",onClick:a[0]||(a[0]=c=>o())},xe((u=s.value)==null?void 0:u.anchorStr),1),ye(" "+xe(r.value[1]),1)],2)):(m(),R("span",{key:1,class:De(l.$attrs.class)},xe(l.message),3))}}}),Gg={key:0,"data-automation":"publisher-deployment-section"},Jg={class:"label"},Qg={key:1},Xg={key:2,"data-automation":"missing-config"},Zg={key:3,"data-automation":"edit-config"},Kg={key:4},ev={key:5},tv={key:6,"data-automation":"missing-creds"},nv={key:0,class:"deployment-in-progress-container"},iv={class:"flex-grow"},sv={class:"deployment-summary-container"},rv={key:1},ov={class:"deployment-summary-container","data-automation":"deploy-status"},lv={class:"deployment-summary-title"},av={key:0,class:"date-time"},cv={key:0},uv={key:1},dv={key:2,class:"date-time"},fv={key:3,class:"last-deployment-details last-deployment-error"},hv={key:2,class:"last-deployment-details"},pv={key:1},gv=Ne({__name:"EvenEasierDeploy",setup(t){const e=_e(),n=gt(),i=I(()=>{const S=[];return S.push({label:"Add Deployment",codicon:"codicon-add",fn:r}),e.selectedConfiguration&&S.push({label:"Edit Configuration",codicon:"codicon-edit",fn:()=>o(e.selectedConfiguration.configurationPath)}),S}),s=()=>{n.sendMsg({kind:me.SELECT_DEPLOYMENT})},r=()=>{n.sendMsg({kind:me.NEW_DEPLOYMENT})},o=(S,b)=>{n.sendMsg({kind:me.EDIT_CONFIGURATION,content:{configurationPath:S,selection:b}})},l=()=>{n.sendMsg({kind:me.VIEW_PUBLISHING_LOG})},a=I(()=>{var S;return sg(e.configurations,(S=e.selectedContentRecord)==null?void 0:S.type)}),u=I(()=>a.value.length>0?"even-easier-deploy-more-menu-matching-configs":"even-easier-deploy-more-menu-no-matching-configs"),c=I(()=>a.value.length>0?"Select a Configuration":"Create a Configuration"),h=I(()=>e.publishInProgress||Qt(e.selectedContentRecord)?"homeview-active-contentRecord-more-menu":"homeview-last-contentRecord-more-menu"),p=I(()=>e.selectedContentRecord?ng(e.selectedContentRecord,e.selectedConfiguration).title:""),v=I(()=>{const S=[];return S.push({icon:"codicon-server",text:$.value}),k.value&&S.push({icon:"codicon-file",text:k.value}),S}),$=I(()=>{var S,b;return(S=e.serverCredential)!=null&&S.name?`${e.serverCredential.name}`:`Missing Credential for ${(b=e.selectedContentRecord)==null?void 0:b.serverUrl}`}),k=I(()=>{if(e.selectedConfiguration&&!Ge(e.selectedConfiguration)){const S=e.selectedContentRecord,b=e.selectedConfiguration;if(S){let Ie="";return S.projectDir!=="."&&(Ie=`${S.projectDir}${e.platformFileSeparator}`),e.config.active.isUnknownError||(Ie+=b.configuration.entrypoint),Ie}}return"ProjectDir and Entrypoint not determined"}),E=()=>{n.sendMsg({kind:me.SHOW_SELECT_CONFIGURATION})},N=I(()=>{if(e.selectedContentRecord)return C.value?"Last Deployment Dismissed":e.selectedContentRecord.deploymentError?"Last Deployment Failed":Qt(e.selectedContentRecord)?U.value?"Not Yet Updated":"Not Yet Deployed":"Last Deployment Successful"}),U=I(()=>Qt(e.selectedContentRecord)&&!!e.selectedContentRecord.id),W=I(()=>Qt(e.selectedContentRecord)&&!U.value),C=I(()=>{var S;return!!((S=e.selectedContentRecord)!=null&&S.dismissedAt)}),J=I(()=>{var b,Ie,Qe,Le,Oe;let S="unknown";return e.selectedConfiguration&&!Ge(e.selectedConfiguration)&&e.selectedConfiguration.configuration.entrypoint&&(S=e.selectedConfiguration.configuration.entrypoint),`Deployment Details
- Deployment Record: ${((b=e.selectedContentRecord)==null?void 0:b.saveName)||"<undefined>"}
- Configuration File: ${((Ie=e.selectedConfiguration)==null?void 0:Ie.configurationName)||"<undefined>"}
- Credential In Use: ${((Qe=e.serverCredential)==null?void 0:Qe.name)||"<undefined>"}
- Project Dir: ${((Le=e.selectedContentRecord)==null?void 0:Le.projectDir)||"<undefined>"}
- Entrypoint: ${S}
- Server URL: ${((Oe=e.serverCredential)==null?void 0:Oe.url)||"<undefined>"}`}),Te=I(()=>{if(e.selectedConfiguration&&Ge(e.selectedConfiguration)&&ii(e.selectedConfiguration.error))return e.selectedConfiguration.error}),ce=I(()=>{const S=Te.value;return S&&ii(S)?`on line ${S.data.line}`:""}),z=I(()=>{var b;const S=(b=e.selectedContentRecord)==null?void 0:b.deploymentError;return!!(S&&Mc(S))}),X=I(()=>z.value?"View Deployment Logs":"View Content"),B=()=>{const S=Te.value;S&&ii(S)&&o(e.selectedConfiguration.configurationPath,{start:{line:S.data.line-1,character:S.data.column-1}}),console.error("EvenEasierDeploy::onEditConfigurationWithTOMLError, error is not expected type. Ignoring.")},pe=S=>{const b=Er.find(Ie=>Ie.actionId===S);if(!b){console.error("EvenEasierDeploy::onErrorMessageAnchorClick, event does not match options. Ignoring.");return}if(b.actionId===yo.EditConfiguration){o(e.selectedConfiguration.configurationPath);return}},ne=S=>{n.sendMsg({kind:me.NAVIGATE,content:{uriPath:S}})},ge=()=>{n.sendMsg({kind:me.NEW_CREDENTIAL_FOR_DEPLOYMENT})},Je=()=>{n.sendMsg({kind:me.SHOW_ASSOCIATE_GUID})},dt=I(()=>{const S=e.selectedContentRecord;if(S)return(S==null?void 0:S.dashboardUrl)||!Qt(S)&&S.logsUrl}),Z=()=>{const S=e.selectedContentRecord;S&&(z.value&&!Qt(S)?ne(S.logsUrl):S.dashboardUrl&&ne(S.dashboardUrl))};return(S,b)=>{var Ie,Qe,Le;return L(e).initializingRequestComplete?(m(),R("div",Gg,[M("div",Jg,[b[4]||(b[4]=M("span",{class:"text-sm text-sidebar-section-header"},"DEPLOYMENT",-1)),se(En,{title:"Deployment",actions:i.value,"context-menu":L(e).selectedContentRecord?u.value:void 0},null,8,["actions","context-menu"])]),L(e).selectedContentRecord?(m(),R(le,{key:0},[M("div",In({class:"deployment-control"},li({click:s},!0)),[se(Ml,{label:p.value,details:v.value,title:J.value,"data-automation":"entrypoint-label"},null,8,["label","details","title"]),b[5]||(b[5]=M("div",{class:"select-indicator codicon codicon-chevron-right","aria-hidden":"true"},null,-1))],16),L(e).duplicatedEnvironmentVariables.length?(m(),R(le,{key:0},[M("p",null,[L(e).duplicatedEnvironmentVariables.length===1?(m(),R(le,{key:0},[ye(" A variable was set as both a secret and environment variable. It must only be set as one or the other. ")],64)):K("",!0),L(e).duplicatedEnvironmentVariables.length>1?(m(),R(le,{key:1},[ye(" Variables were set as both secrets and environment variables. They must only be set as one or the other. ")],64)):K("",!0),M("a",{class:"webview-link",role:"button",onClick:b[0]||(b[0]=Oe=>o(L(e).selectedConfiguration.configurationPath))},"Edit the Configuration"),b[6]||(b[6]=ye(". "))]),M("p",null,xe(L(e).duplicatedEnvironmentVariables.join(", ")),1),b[7]||(b[7]=M("p",null,null,-1))],64)):K("",!0),L(e).config.active.isEntryMissing?(m(),R("p",Qg,[ye(" No Config Entry in Deployment record - "+xe((Ie=L(e).selectedContentRecord)==null?void 0:Ie.saveName)+". ",1),M("a",{class:"webview-link",role:"button",onClick:E},xe(c.value),1),b[8]||(b[8]=ye(". "))])):K("",!0),L(e).config.active.isMissing?(m(),R("p",Xg,[b[9]||(b[9]=ye(" The last Configuration used for this Deployment was not found. ")),M("a",{class:"webview-link",role:"button",onClick:E,"data-automation":"config-button"},xe(c.value),1),b[10]||(b[10]=ye(". "))])):K("",!0),L(e).config.active.isTOMLError?(m(),R("p",Zg,[ye(" The selected Configuration has a schema error "+xe(ce.value)+". ",1),M("a",{class:"webview-link",role:"button",onClick:b[1]||(b[1]=Oe=>B()),"data-automation":"edit-config-button"},"Edit the Configuration"),b[11]||(b[11]=ye(". "))])):K("",!0),L(e).config.active.isUnknownType?(m(),R("p",Kg,[b[12]||(b[12]=ye(" Please set the framework you are using, for example ")),b[13]||(b[13]=M("code",null,"type = 'python-shiny'",-1)),b[14]||(b[14]=ye(". ")),M("a",{class:"webview-link",role:"button",onClick:b[2]||(b[2]=Oe=>o(L(e).selectedConfiguration.configurationPath))},"Edit the Configuration"),b[15]||(b[15]=ye(". "))])):K("",!0),L(e).config.active.isUnknownError?(m(),R("p",ev,[b[16]||(b[16]=ye(" The selected Configuration has an error. ")),M("a",{class:"webview-link",role:"button",onClick:b[3]||(b[3]=Oe=>o(L(e).selectedConfiguration.configurationPath))},"Edit the Configuration"),b[17]||(b[17]=ye(". "))])):K("",!0),L(e).config.active.isCredentialMissing?(m(),R("p",tv,[b[18]||(b[18]=ye(" A Credential for the Deployment's server URL was not found. ")),M("a",{class:"webview-link",role:"button",onClick:ge,"data-automation":"creds-button"},"Create a new Credential"),b[19]||(b[19]=ye(". "))])):K("",!0),se(Wg,{class:"w-full"})],64)):(m(),R("div",In({key:1,class:"deployment-control"},li({click:s},!0)),[se(Ml,{label:"Select...",details:["(new or existing)"],"data-automation":"select-deployment"}),b[20]||(b[20]=M("div",{class:"select-indicator codicon codicon-chevron-down","aria-hidden":"true"},null,-1))],16)),L(e).selectedContentRecord&&L(e).selectedContentRecord.serverType?(m(),R(le,{key:2},[b[27]||(b[27]=M("vscode-divider",{class:"home-view-divider"},null,-1)),L(e).publishInProgress?(m(),R("div",nv,[b[22]||(b[22]=M("vscode-progress-ring",{class:"progress-ring"},null,-1)),M("div",iv,[M("div",sv,[b[21]||(b[21]=M("div",{class:"progress-container"},[M("div",{class:"progress-desc"},[M("h4",{"data-automation":"deployment-progress",class:"deployment-summary-title"}," Deployment in Progress... ")])],-1)),se(En,{title:"Logs",actions:[],"context-menu":h.value},null,8,["context-menu"])]),M("p",{class:"progress-log-anchor"},[M("a",{class:"webview-link",role:"button",onClick:l}," View Log ")])])])):(m(),R("div",rv,[M("div",ov,[M("h4",lv,xe(N.value),1),se(En,{title:"Logs",actions:[],"context-menu":h.value},null,8,["context-menu"])]),C.value?(m(),R("div",av,xe(L(Tl)(L(e).selectedContentRecord.dismissedAt)),1)):(m(),R(le,{key:1},[W.value?(m(),R("div",cv,[b[23]||(b[23]=ye(" Is this already deployed to a Connect server? You can ")),M("a",{class:"webview-link",role:"button",onClick:Je},"update that previous deployment"),b[24]||(b[24]=ye(". "))])):K("",!0),U.value?(m(),R("div",uv,[M("a",{class:"webview-link",role:"button",onClick:Z},"This deployment"),b[25]||(b[25]=ye(" will be updated when deployed. "))])):K("",!0),L(Qt)(L(e).selectedContentRecord)?K("",!0):(m(),R("div",dv,xe(L(Tl)(L(e).selectedContentRecord.deployedAt)),1)),L(e).selectedContentRecord.deploymentError?(m(),R("div",fv,[b[26]||(b[26]=M("div",{class:"alert-border border-warning text-warning"},[M("span",{class:"codicon codicon-alert"})],-1)),se(Yg,{message:(Le=(Qe=L(e).selectedContentRecord)==null?void 0:Qe.deploymentError)==null?void 0:Le.msg,splitOptions:L(Er),class:"error-message text-description",onClick:pe},null,8,["message","splitOptions"])])):K("",!0)],64)),dt.value?(m(),R("div",hv,[M("vscode-button",{appearance:"secondary",onClick:Z,class:"w-full"},xe(X.value),1)])):K("",!0)]))],64)):K("",!0)])):(m(),R("div",pv,b[28]||(b[28]=[M("div",{class:"progress-container"},[M("div",{class:"progress-desc"},[M("div",null,"Scanning directories...")])],-1)])))}}}),vv=mt(gv,[["__scopeId","data-v-dc961001"]]),mv={class:"count-badge"},bv=Ne({__name:"CountBadge",props:{count:{}},setup(t){return(e,n)=>(m(),R("div",mv,xe(e.count),1))}}),yv=mt(bv,[["__scopeId","data-v-bcab692a"]]),Sv=["onKeydown"],xv={class:"title"},wv={key:0,class:"description"},_v={key:1,class:"description"},Cv={key:0,class:"actions"},kv={key:1,class:"count"},Ev={class:"pane-body"},$v=Ne({__name:"TreeSection",props:fn({title:{},description:{},codicon:{},actions:{},count:{}},{expanded:{required:!1,default:!1},expandedModifiers:{}}),emits:["update:expanded"],setup(t){const e=hs(t,"expanded"),n=()=>{e.value=!e.value};return(i,s)=>(m(),R("div",{class:De(["pane",{expanded:e.value}])},[M("div",{class:De(["pane-header",{expanded:e.value}]),tabindex:"0",onKeydown:ui(Qi(n,["self"]),["enter"])},[M("div",{class:"pane-header-title-container",onClick:n},[M("div",{class:De(["twisty-container codicon",e.value?"codicon-chevron-down":"codicon-chevron-right"])},null,2),M("h3",xv,xe(i.title),1),i.$slots.description?(m(),R("span",wv,[lt(i.$slots,"description",{},void 0,!0)])):i.description?(m(),R("span",_v,xe(i.description),1)):K("",!0),i.codicon&&!e.value?(m(),R("div",{key:2,class:De(["tree-section-icon codicon",i.codicon])},null,2)):K("",!0)]),i.actions?(m(),R("div",Cv,[se(En,{title:i.title,actions:i.actions},null,8,["title","actions"])])):K("",!0),i.count?(m(),R("div",kv,[se(yv,{count:i.count},null,8,["count"])])):K("",!0)],42,Sv),mi(M("div",Ev,[lt(i.$slots,"default",{},void 0,!0)],512),[[Jr,e.value]])],2))}}),Tn=mt($v,[["__scopeId","data-v-16f679f1"]]),Iv=["title"],Ov={class:"indent"},Rv={class:"indent-guide"},Av=["checked","disabled"],Pv={class:"tree-item-title"},Tv={key:0,class:"tree-item-description"},Dv={key:0,class:"actions"},Mv={key:1},Nv={class:"tree-item-children"},Fv=Ne({__name:"TreeItemCheckbox",props:fn({title:{},checked:{type:Boolean},disabled:{type:Boolean},listStyle:{default:"default"},description:{},tooltip:{},alignIconWithTwisty:{type:Boolean},actions:{},indentLevel:{default:1},expandable:{type:Boolean,default:!1},virtualized:{type:Boolean,default:!1},disableOpacity:{type:Boolean,default:!1}},{expanded:{required:!1,default:!1},expandedModifiers:{}}),emits:fn(["check","uncheck","expand","collapse"],["update:expanded"]),setup(t,{emit:e}){Ya(a=>({"0e73e221":a.indentLevel}));const n=hs(t,"expanded"),i=t,s=xa(),r=e,o=()=>{n.value=!n.value,r(n.value?"expand":"collapse")},l=I(()=>!!(s.default||i.expandable));return(a,u)=>(m(),R("div",{class:De(["tree-item",{"align-icon-with-twisty":a.alignIconWithTwisty,collapsible:l.value,"text-list-emphasized":a.listStyle==="emphasized","text-foreground":a.listStyle==="default","text-list-deemphasized":a.listStyle==="deemphasized"}])},[M("div",{class:De(["tree-item-container",a.virtualized?"class-hover":void 0]),title:a.tooltip},[M("div",Ov,[(m(!0),R(le,null,qt(a.indentLevel-1,c=>(m(),R("div",Rv))),256))]),M("div",In({class:["twisty-container text-icon",[{codicon:l.value},a.expandable||a.$slots.default?n.value?"codicon-chevron-down":"codicon-chevron-right":void 0]]},li({click:l.value?o:void 0},!0)),null,16),M("vscode-checkbox",{checked:a.checked,disabled:a.disabled,class:De(["tree-item-checkbox",{"opacity-100":a.disableOpacity}]),onClick:u[0]||(u[0]=c=>a.checked?a.$emit("uncheck"):a.$emit("check"))},[M("span",Pv,xe(a.title),1),a.description?(m(),R("span",Tv,xe(a.description),1)):K("",!0)],10,Av),a.actions?(m(),R("div",Dv,[se(En,{title:a.title,actions:a.actions},null,8,["title","actions"])])):K("",!0),a.$slots.postDecor?(m(),R("div",Mv,[lt(a.$slots,"postDecor",{},void 0,!0)])):K("",!0)],10,Iv),mi(M("div",Nv,[lt(a.$slots,"default",{indentLevel:a.indentLevel+1},void 0,!0)],512),[[Jr,l.value&&n.value]])],2))}}),Lv=mt(Fv,[["__scopeId","data-v-d8e379eb"]]);function Bv(t,{isEntrypoint:e=!1,isPackageFile:n=!1}={}){var s,r;let i=`${t.rel} will be included in the next deployment.`;return t.reason&&(i+=`
The configuration file ${(s=t.reason)==null?void 0:s.fileName} is including it with the pattern '${(r=t.reason)==null?void 0:r.pattern}'`),e&&(i+=`
${t.rel} is the entrypoint. Entrypoints must be included in the configuration 'files' list.`),n&&(i+=`
${t.rel} is a package file. Package files must be included in the configuration 'files' list.`),i}function Vv(t){var n,i;let e=`${t.rel} will be excluded in the next deployment.`;return t.reason?t.reason.source===kr.BUILT_IN?e+=`
This is a built-in exclusion for the pattern: '${t.reason.pattern}' and cannot be overridden.`:t.reason.source===kr.PERMISSIONS_ERROR?e+=`
You don't have permission to access this directory.`:e+=`
The configuration file ${(n=t.reason)==null?void 0:n.fileName} is excluding it with the pattern '${(i=t.reason)==null?void 0:i.pattern}'`:e+=`
It did not match any pattern in the configuration 'files' list.`,e}const Hv=Ne({__name:"ProjectFile",props:{file:{}},setup(t){const e=t,n=_e(),i=xo(),s=I(()=>{var N;const E=(N=e.file.reason)==null?void 0:N.source;return u.value&&r.value||c.value&&r.value||E==="built-in"||E==="permissions"}),r=I(()=>{var E;return((E=e.file.reason)==null?void 0:E.exclude)===!1}),o=I(()=>i.lastDeployedFiles.has(e.file.id)),l=I(()=>e.file.isFile&&r.value&&!o.value),a=I(()=>e.file.isFile&&!r.value&&o.value),u=I(()=>{const E=n.selectedConfiguration;return E!=null&&!Ge(E)?e.file.id===E.configuration.entrypoint:!1}),c=I(()=>h.value||p.value),h=I(()=>{var N;const E=n.selectedConfiguration;return E!=null&&!Ge(E)?e.file.id===((N=E.configuration.python)==null?void 0:N.packageFile):!1}),p=I(()=>{var N;const E=n.selectedConfiguration;return E!=null&&!Ge(E)?e.file.id===((N=E.configuration.r)==null?void 0:N.packageFile):!1}),v=I(()=>u.value?"emphasized":r.value?"default":"deemphasized"),$=I(()=>r.value?Bv(e.file,{isEntrypoint:u.value,isPackageFile:c.value}):Vv(e.file)),k=I(()=>{let E=[];return e.file.isFile&&E.push({label:"Open file",codicon:"codicon-link-external",fn:()=>{i.openFile(e.file)}}),E});return(E,N)=>{const U=Hr("PostDecor");return m(),we(Lv,{title:E.file.base,checked:r.value,disabled:s.value,"list-style":v.value,"disable-opacity":u.value||c.value,"indent-level":E.file.indent+1,expandable:E.file.isDir,tooltip:$.value,actions:k.value,virtualized:!0,onCheck:N[0]||(N[0]=W=>L(i).includeFile(E.file)),onUncheck:N[1]||(N[1]=W=>L(i).excludeFile(E.file)),onExpand:N[2]||(N[2]=W=>L(i).expandDir(E.file)),onCollapse:N[3]||(N[3]=W=>L(i).collapseDir(E.file))},{postDecor:Me(()=>[l.value?(m(),we(U,{key:0,class:"text-git-added","data-automation":`${E.file.id}-decorator`},{default:Me(()=>N[4]||(N[4]=[ye(" A ")])),_:1,__:[4]},8,["data-automation"])):K("",!0),a.value?(m(),we(U,{key:1,class:"text-git-deleted"},{default:Me(()=>N[5]||(N[5]=[ye("R")])),_:1,__:[5]})):K("",!0)]),_:1},8,["title","checked","disabled","list-style","disable-opacity","indent-level","expandable","tooltip","actions"])}}}),jv={key:1},Uv=Ne({__name:"ProjectFiles",setup(t){const e=xo();return(n,i)=>{const s=Hr("RecycleScroller");return m(),we(Tn,{"data-automation":"project-files",title:"Project Files",actions:[{label:"Refresh Project Files",codicon:"codicon-refresh",fn:()=>L(e).refreshFiles}]},{default:Me(()=>[L(e).flatFiles.length?(m(),we(s,{key:0,class:"scroller",items:L(e).flatFiles,"item-size":22},{default:Me(({item:r})=>[se(Hv,{file:r},null,8,["file"])]),_:1},8,["items"])):(m(),R("p",jv,"No files found"))]),_:1},8,["actions"])}}}),zv=mt(Uv,[["__scopeId","data-v-b0723544"]]),qv={},Wv={class:"welcome-view"};function Yv(t,e){return m(),R("div",Wv,[lt(t.$slots,"default")])}const Rs=mt(qv,[["render",Yv]]),Gv=["title"],Jv={class:"indent"},Qv={class:"indent-guide"},Xv={class:"tree-item-label-container"},Zv={class:"tree-item-title","data-automation":"req"},Kv={key:0,class:"tree-item-description"},em={key:1,class:"tree-item-description"},tm={key:1,class:"actions"},nm={key:2},im={class:"tree-item-children"},sm=Ne({__name:"TreeItem",props:fn({title:{},listStyle:{default:"default"},description:{},tooltip:{},alignIconWithTwisty:{type:Boolean},codicon:{},actions:{},indentLevel:{default:1},expandable:{type:Boolean,default:!1},virtualized:{type:Boolean,default:!1}},{expanded:{required:!1,default:!1},expandedModifiers:{}}),emits:fn(["expand","collapse"],["update:expanded"]),setup(t,{emit:e}){Ya(a=>({"8939423a":a.indentLevel}));const n=hs(t,"expanded"),i=t,s=xa(),r=e,o=()=>{n.value=!n.value,r(n.value?"expand":"collapse")},l=I(()=>!!(s.default||i.expandable));return(a,u)=>(m(),R("div",{class:De(["tree-item",{"align-icon-with-twisty":a.alignIconWithTwisty,collapsible:l.value,"text-list-emphasized":a.listStyle==="emphasized","text-foreground":a.listStyle==="default","text-list-deemphasized":a.listStyle==="deemphasized"}])},[M("div",In({class:["tree-item-container",a.virtualized?"class-hover":void 0],title:a.tooltip},li({click:l.value?o:void 0},!0)),[M("div",Jv,[(m(!0),R(le,null,qt(a.indentLevel-1,c=>(m(),R("div",Qv))),256))]),M("div",{class:De(["twisty-container text-icon",[{codicon:l.value},a.expandable||a.$slots.default?n.value?"codicon-chevron-down":"codicon-chevron-right":void 0]])},null,2),a.codicon?(m(),R("div",{key:0,class:De(["tree-item-icon text-icon codicon",a.codicon])},null,2)):K("",!0),M("div",Xv,[M("span",Zv,xe(a.title),1),a.$slots.description?(m(),R("span",Kv,[lt(a.$slots,"description",{},void 0,!0)])):a.description?(m(),R("span",em,xe(a.description),1)):K("",!0)]),a.actions?(m(),R("div",tm,[se(En,{title:a.title,actions:a.actions},null,8,["title","actions"])])):K("",!0),a.$slots.postDecor?(m(),R("div",nm,[lt(a.$slots,"postDecor",{},void 0,!0)])):K("",!0)],16,Gv),mi(M("div",im,[lt(a.$slots,"default",{indentLevel:a.indentLevel+1},void 0,!0)],512),[[Jr,l.value&&n.value]])],2))}}),On=mt(sm,[["__scopeId","data-v-92abc41e"]]),rm=["aria-label"],om=Ne({__name:"SidebarInput",props:fn({label:{}},{modelValue:{},modelModifiers:{}}),emits:fn(["submit","cancel"],["update:modelValue"]),setup(t,{expose:e}){const n=hs(t,"modelValue"),i=t,s=re(null),r=I(()=>`${i.label}. Press Enter to confirm or Escape to cancel.`);return e({select:()=>{var l;(l=s.value)==null||l.select()}}),(l,a)=>mi((m(),R("input",{"onUpdate:modelValue":a[0]||(a[0]=u=>n.value=u),ref_key:"input",ref:s,class:"sidebar-input","aria-label":r.value,onKeydown:[a[1]||(a[1]=ui(Qi(u=>l.$emit("submit"),["prevent"]),["enter"])),a[2]||(a[2]=ui(u=>l.$emit("cancel"),["escape"]))]},null,40,rm)),[[ef,n.value]])}}),lm=mt(om,[["__scopeId","data-v-54352c6e"]]),am=Ne({__name:"Secret",props:{name:{}},setup(t){const e=t,n=re(null),i=re(!1),s=re(),r=_e(),o=I(()=>r.secrets.get(e.name)),l=I(()=>r.serverSecrets.has(e.name)),a=I(()=>!o.value&&!l.value),u=()=>{s.value=o.value,i.value=!0,vi(()=>{var $;return($=n.value)==null?void 0:$.select()})},c=()=>{r.secrets.set(e.name,s.value),i.value=!1},h=I(()=>l.value?o.value?"On the next deploy the secret will be overwritten with the new value.":"The value is set on the server. Set a new value to overwrite it on the next deploy.":o.value?"On the next deploy the secret will be set.":"The secret will not be created on the next deploy without a value. Set a value to set it."),p=I(()=>{if(i.value)return[];const $=[{label:"Edit Value",codicon:"codicon-symbol-string",fn:u}];return o.value&&$.push({label:"Clear Value",codicon:"codicon-remove",fn:()=>{r.secrets.set(e.name,void 0)}}),$}),v=I(()=>JSON.stringify({name:e.name,webviewSection:"secrets-tree-item",preventDefaultContextMenuItems:!0}));return($,k)=>(m(),we(On,{title:$.name,actions:p.value,codicon:a.value?"codicon-warning":o.value?"codicon-cloud-upload":"codicon-check","list-style":a.value||o.value||i.value?"default":"deemphasized",tooltip:h.value,"align-icon-with-twisty":"","data-vscode-context":v.value},{description:Me(()=>[i.value?(m(),we(lm,{key:0,ref_key:"input",ref:n,modelValue:s.value,"onUpdate:modelValue":k[0]||(k[0]=E=>s.value=E),class:"w-full",label:"Type secret value",onSubmit:c,onCancel:k[1]||(k[1]=E=>i.value=!1)},null,8,["modelValue"])):a.value?K("",!0):(m(),R(le,{key:1},[ye("••••••")],64))]),_:1},8,["title","actions","codicon","list-style","tooltip","data-vscode-context"]))}}),cm=Ne({__name:"Secrets",setup(t){const e=_e(),{sendMsg:n}=gt(),i=I(()=>{const s=[{label:"Add Secret",codicon:"codicon-add",fn:()=>{n({kind:me.ADD_SECRET})}}];return e.secretsWithValueCount>0&&s.push({label:"Clear Values for all Secrets",codicon:"codicon-clear-all",fn:()=>{e.secrets.forEach((r,o)=>{e.secrets.set(o,void 0)})}}),s});return(s,r)=>(m(),we(Tn,{title:"Secrets",actions:i.value,count:L(e).secretsWithValueCount},{default:Me(()=>[L(e).secrets.size?(m(!0),R(le,{key:0},qt(L(e).secrets,([o])=>(m(),we(am,{name:o,key:o},null,8,["name"]))),128)):(m(),we(Rs,{key:1},{default:Me(()=>r[0]||(r[0]=[M("p",null,"No secrets have been added to the configuration.",-1)])),_:1,__:[0]}))]),_:1},8,["actions","count"]))}}),um={key:1},dm=Ne({__name:"PythonPackages",setup(t){const e=_e(),n=gt(),i=()=>{n.sendMsg({kind:me.REFRESH_PYTHON_PACKAGES})},s=()=>{n.sendMsg({kind:me.SCAN_PYTHON_PACKAGE_REQUIREMENTS})},r=()=>{e.pythonPackageFile&&n.sendMsg({kind:me.VSCODE_OPEN_RELATIVE,content:{relativePath:e.pythonPackageFile}})},o=I(()=>{const a=[];return e.pythonPackageFile&&a.push({label:"Edit Package Requirements File",codicon:"codicon-edit",fn:r}),a.push({label:"Refresh Packages",codicon:"codicon-refresh",fn:i}),e.pythonPackageFile&&a.push({label:"Scan For Package Requirements",codicon:"codicon-eye",fn:s}),a}),l=I(()=>!e.python.active.isInProject||e.python.active.isEmptyRequirements||e.python.active.isMissingRequirements);return(a,u)=>(m(),we(Tn,{title:"Python Packages","data-automation":"python-packages",actions:o.value,codicon:L(e).python.active.isAlertActive?"codicon-alert":""},{default:Me(()=>[l.value?(m(),we(Rs,{key:0},{default:Me(()=>[L(e).python.active.isMissingRequirements?(m(),R(le,{key:0},[u[2]||(u[2]=M("p",null," To deploy Python content, you need a package file listing any package dependencies, but the file does not exist. Click Scan to create one based on the files in your project and your configuration. ",-1)),M("vscode-button",{onClick:u[0]||(u[0]=c=>s())}," Scan ")],64)):L(e).python.active.isInProject?L(e).python.active.isEmptyRequirements?(m(),R(le,{key:2},[u[3]||(u[3]=M("p",null," This project currently has no Python package requirements. If this is not accurate, click Scan to update based on the files in your project and configuration. ",-1)),M("vscode-button",{onClick:u[1]||(u[1]=c=>s())}," Scan ")],64)):K("",!0):(m(),R("p",um," This project is not configured to use Python. To configure Python, add a [python] section to your configuration file. "))]),_:1})):(m(!0),R(le,{key:1},qt(L(e).pythonPackages,c=>(m(),we(On,{key:c,title:c,codicon:"codicon-package","align-icon-with-twisty":""},null,8,["title"]))),128))]),_:1},8,["actions","codicon"]))}}),fm={key:0},hm={key:1,"data-automation":"r-not-configured"},pm=Ne({__name:"RPackages",setup(t){const e=_e(),n=gt(),i=()=>{n.sendMsg({kind:me.REFRESH_R_PACKAGES})},s=()=>{e.rPackageFile&&n.sendMsg({kind:me.VSCODE_OPEN_RELATIVE,content:{relativePath:e.rPackageFile}})},r=()=>{n.sendMsg({kind:me.NAVIGATE,content:{uriPath:"https://rstudio.github.io/renv/articles/renv.html"}})},o=I(()=>{const c=[];return e.rPackageFile&&c.push({label:"Edit Package Requirements File",codicon:"codicon-edit",fn:s}),c.push({label:"Refresh Packages",codicon:"codicon-refresh",fn:i}),c}),l=I(()=>!e.r.active.isInProject||e.r.active.isEmptyRequirements||e.r.active.isMissingPackageFile),a=I(()=>{var c;if(e.selectedConfiguration&&!Ge(e.selectedConfiguration))return((c=e.selectedConfiguration.configuration.r)==null?void 0:c.packageFile)||"renv.lock"}),u=I(()=>e.r.active.isMissingPackageFile||e.r.active.isEmptyRequirements);return(c,h)=>(m(),we(Tn,{title:"R Packages","data-automation":"r-packages",actions:o.value,codicon:L(e).r.active.isAlertActive?"codicon-alert":""},{default:Me(()=>[l.value?(m(),we(Rs,{key:0},{default:Me(()=>[u.value?(m(),R("p",fm,[ye(" To deploy R content, you need a package file listing any package dependencies, but the file ("+xe(a.value)+") is missing, empty or invalid. ",1),M("a",{class:"webview-link",role:"button",onClick:r}," See the renv documentation for more details.")])):K("",!0),L(e).r.active.isInProject?K("",!0):(m(),R("p",hm," This project is not configured to use R. To configure R, add an [r] section to your configuration file. "))]),_:1})):(m(!0),R(le,{key:1},qt(L(e).rPackages,p=>(m(),we(On,{key:p.package,title:p.package,description:p.version,tooltip:p.source+": "+p.repository,codicon:"codicon-package","align-icon-with-twisty":""},null,8,["title","description","tooltip"]))),128))]),_:1},8,["actions","codicon"]))}}),gm=Ne({__name:"Credentials",setup(t){const e=_e(),{sendMsg:n}=gt(),i=I(()=>[{label:"New Credential",codicon:"codicon-add",fn:()=>{n({kind:me.NEW_CREDENTIAL})}},{label:"Refresh Credentials",codicon:"codicon-refresh",fn:()=>{n({kind:me.REQUEST_CREDENTIALS})}}]),s=r=>JSON.stringify({credentialGUID:r.guid,credentialName:r.name,webviewSection:"credentials-tree-item",preventDefaultContextMenuItems:!0});return(r,o)=>(m(),we(Tn,{title:"Credentials","data-automation":"publisher-credentials-section",actions:i.value,codicon:L(e).credential.active.isAlertActive?"codicon-alert":""},{default:Me(()=>[L(e).credential.isAvailable?(m(!0),R(le,{key:1},qt(L(e).sortedCredentials,l=>(m(),we(On,{title:l.name,description:l.url,"data-automation":`${l.name}-list`,codicon:"codicon-key","align-icon-with-twisty":"","data-vscode-context":s(l)},null,8,["title","description","data-automation","data-vscode-context"]))),256)):(m(),we(Rs,{key:0},{default:Me(()=>o[0]||(o[0]=[M("p",null,"No credentials have been added yet.",-1)])),_:1,__:[0]}))]),_:1},8,["actions","codicon"]))}}),vm=Ne({__name:"HelpAndFeedback",setup(t){const e=gt();return(n,i)=>(m(),we(Tn,{title:"Help and Feedback","data-automation":"publisher-help-section"},{default:Me(()=>[se(On,{title:"Get Started with Posit Publisher",tooltip:"Open Getting Started Documentation","align-icon-with-twisty":"",onClick:i[0]||(i[0]=s=>L(e).sendMsg({kind:L(me).NAVIGATE,content:{uriPath:"https://github.com/posit-dev/publisher/blob/main/docs/index.md"}}))}),se(On,{title:"Provide Feedback",tooltip:"Open GitHub Discussions","align-icon-with-twisty":"",onClick:i[1]||(i[1]=s=>L(e).sendMsg({kind:L(me).NAVIGATE,content:{uriPath:"https://github.com/posit-dev/publisher/discussions"}}))})]),_:1}))}}),mm=Ne({__name:"App",setup(t){gt();const e=_e(),n=re(!0);return(i,s)=>(m(),R("main",null,[se(Kp,{activateOverlay:L(e).showDisabledOverlay},{default:Me(()=>[se(vv,{class:"easy-deploy-container"}),L(e).selectedConfiguration&&!L(Ge)(L(e).selectedConfiguration)?(m(),R(le,{key:0},[se(zv,{expanded:n.value,"onUpdate:expanded":s[0]||(s[0]=r=>n.value=r)},null,8,["expanded"]),se(cm),se(dm),se(pm)],64)):K("",!0),se(gm),se(vm)]),_:1},8,["activateOverlay"])]))}}),bm=mt(mm,[["__scopeId","data-v-f8dfd618"]]);dp().register(Dp(),Up(),Wp(),Jp(),Vp(),Fp());const ym=Ff(),wo=lf(bm);wo.use(ym);wo.component("RecycleScroller",Qr);wo.mount("#app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
