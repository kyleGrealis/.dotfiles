---
title: "How to use weighting with NHANES data"
date: last-modified
code-fold: false
---

```{r}
#| label: setup
#| echo: false
#| message: false
source('R/_libraries.R')
source('R/data_dictionary.R')
load('data/the_data.rda')
```

# Evaulating types of weights

Since this study incorporates multiple survey cycles & sample weights, review 
[this NHANES reference](https://wwwn.cdc.gov/nchs/nhanes/tutorials/weighting.aspx) to 
select the proper survey weight based on which variables are to be used in the analysis.

There are 3 types of survey weights:  
- interview weight (`wtint2yr`)  
- MEC exam weight (`wtmec2yr`)  
- fasting subsample weight (`wtsaf2yr`)

Our variables that require using the MEC weights:  
- BMX variables (body scan)  
- DXX variables (DEXA scan)  
- lbxgh (glycohemoglobin)  
- lbxtc (cholesterol)  
- lbdhdd (hdl cholesterol)  
- BPX (blood pressure measures)  

Our variables that require using the fasting weights:  
- lbxtr  
- lbdldl  
- lbxglu (fasting glucose)  

> "For any combination of survey cycles from 2001-2002 and beyond that does not include 1999-2000 data, the multiyear sample weight constructed using the formulas in the above table is a linear scaling of the two-year weight, i.e. the weight is multiplied by a constant equal to (1 / number of survey cycles.)"

There are 11 cycles in our dataset:
```
>> unique(the_data$year)
[1] 1999 2001 2003 2005 2007 2009 2011 2013 2015 2017 2021
```

## EXAMPLE: combine the first 2 cycles (1999 & 2001) with the following 2 cycles
```{r}
#| eval: false
cycles <- c(1999, 2001, 2003, 2005)
the_data |> 
  filter(year %in% cycles) |>
  mutate(
    wt8yrs = case_when(
      year %in% c(1999, 2001) ~ wtmec4yr * 2/4,  # MUST use the 4-yr weight here
      year %in% c(2003, 2005) ~ wtmec2yr * 1/4,  # no 4-yr weight, so must use 2-yr weight
      .default = 9999
    )
  )
```
Notice above that the denominator is 4 since there are 4 total cycles. The denominator is
ALWAYS the number of cycles used -AND- if either 1999 or 2001 is included in the analysis,
then their 4-yr weight variable must be used. All others will use the 2-yr weight. Also 
note that the numerator for the 1999 & 2001 cycles is 2 since the 4-yr weight variable
(wtmec4yr) already represents TWO 2-year cycles combined. Therefore, 2/4 means 'this 
4-year weight represents 2 out of 4 total cycles.'

## EXAMPLE 2: excluding 1999 & 2001, using 6 cycles
```{r}
#| eval: false
cycles <- c(2003, 2005, 2007, 2009, 2011, 2013)
the_data |> 
  filter(year %in% cycles) |> 
  mutate(
    mec_weight = wtmec2yr / length(cycles)
  )
```

## EXAMPLE 3: using all of our cycles
```{r}
#| eval: false
cycles <- unique(the_data$year)
the_data |> 
  mutate(
    mec_weight = if_else(
      year %in% c(1999, 2001), 
      wtmec4yr * 2/length(cycles),  # MUST use the 4-yr weight here
      wtmec2yr * 1/length(cycles)   # no 4-yr weight, so must use 2-yr weight
    )
  )
```

NOTE: The above examples are using the MEC WEIGHTS since we are assuming that at least
one variable is from the medical exam portion of NHANES data. We are also temporarily
ignoring that our data also includes fasting variables listed above. Those fasting 
variables MUST be excluded before properly calculating the weight, but these examples 
are only to show proof of concept!


## Creating a survey design object

Reference ["srvyr vs survey" vignette](https://cran.r-project.org/web/packages/srvyr/vignettes/srvyr-vs-survey.html) 
to get a better understanding of how to implement survey design objects.

::: {.callout-important}
When creating the design design object, the order of subsetting is **critical**!  
1. Identify the cycles to be included in the analysis  
2. Create the properly adjusted weight variable  
3. Remove any variables that require different weighting (e.g., fasting variables)  
3. Create the design object on all remaining variables & data  
4. Complete any further subsetting (i.e, age range, income) only *after* creating 
the design object  

**Why?** The survey design needs to account for the full sampling structure before 
subsetting to ensure proper variance estimation.
:::

First, create a data subset using 1999 through 2010:

```{r}
cycles <- c(1999, 2001, 2003, 2005, 2007, 2009)
cohort <- the_data |> 
  filter(year %in% cycles) |> 
  mutate(
    mec_weight = if_else(
      year %in% c(1999, 2001), 
      wtmec4yr * 2/length(cycles),  # MUST use the 4-yr weight here
      wtmec2yr * 1/length(cycles)   # no 4-yr weight, so must use 2-yr weight
    )
  ) |> 
  # remove fasting variables
  select(-c(lbxtr, lbdldl, lbxglu))
```


The [`srvyr`](http://gdfe.co/srvyr/) package uses this example to convert the data into a
design object:

```{r}
#| eval: false
design <- srvyr::as_survey_design(
  .data = my_data_frame,
  ids = __,     # Required variable identifying sample units ("clusters")
  strata = __,  # Optional variable identifying sampling strata
  fpc = __,     # Optional variables giving population sizes or sampling fractions
  probs = __,   # Optional variable identifying sampling probabilites
  weights = __  # Optional variable listing the sampling weight for each observation
)
```

Our implementation will be:

```{r}
design <- srvyr::as_survey_design(
  ids = sdmvpsu,           # Primary sampling units
  strata = sdmvstra,       # Strata  
  weights = mec_weight,    # MEC exam weights (use this for physical measurements)
  nest = TRUE,
  .data = cohort
)

design
```


## Perform statistical summaries

Use `tidyverse`-style functions with `srvyr` package to obtain sample statistics:

```{r}
design |> 
  summarize(
    pop_size = survey_total(),
    mean_age = survey_mean(ridageyr),
    .by = riagendr
  )
```

Notice the differences as compared to the raw data:

```{r}
cohort |> 
  summarize(
    pop_size = n(),
    mean_age = mean(ridageyr, na.rm = TRUE),
    .by = riagendr
  )
```


## Sensitivity comparison to the `survey` package:

Creating the design object is similar to that of `srvyr` package, but uses a newer
syntax. The `survey` package was first released in 2005 and incorporates formula
expression whereas the newer `srvyr` package does not. Also, summary statistics can be
piped for cleaner ("tidier", `tidyr`) presentation.

```{r}
nhanes_design <- survey::svydesign(
  ids = ~sdmvpsu,           # Primary sampling units
  strata = ~sdmvstra,       # Strata  
  weights = ~mec_weight,      # MEC exam weights (use this for physical measurements)
  nest = TRUE,
  data = cohort
)

svymean(~ridageyr, nhanes_design)
design |> summarize(mean_age = survey_mean(ridageyr))
```